<?php
/**
 * ImportBuddy Backup Importer Script
 *
 * ATTENTION: IF YOU ARE READING THIS WHILE TRYING TO LOAD IMPORTBUDDY TO RESTORE YOUR SITE:
 * Your server is not properly handling PHP files. Contact your hosting provider to fix this.
 * Notify them that PHP files are not executing and instead are outputting their code contents.
 *
 * @package BackupBuddy
 */

/**
 * <!-- ImportBuddy Restore & Migration Tool - iThemes.com
 *
 * @version 8.6.0.0 (downloaded 2020-08-31T08:28:09+00:00)
 * @author iThemes.com
 * @developer Dustin Bolton
 * @created Feb 11, 2010
 *
 * ###############################################################################################
 * #                                                                                             #
 * #  THERE ARE NO USER-EDITABLE PORTIONS OF THIS FILE! DO NOT EDIT UNLESS DIRECTED BY SUPPORT!  #
 * #                                                                                             #
 * ###############################################################################################
 */

define( 'PB_PASSWORD', '1a1dc91c907325c69271ddf0c944bc72' ); // Update this portion with the hashed password to override a forgotten password.

$php_minimum         = '5.1'; // User's PHP must be equal or newer to this version.
$ignore_not_writable = false; // Set to true to ignore is_writable() returning false on this directory. Useful for servers lying about the writable status of the directory.

// Uncomment the following line when 500 Internal Server Error occurs.
// error_reporting( E_ALL );

if ( version_compare( PHP_VERSION, $php_minimum ) < 0 ) {
	die( 'ERROR #9013. See <a href="https://ithemeshelp.zendesk.com/hc/en-us/articles/211132377-Error-Codes-#9013">this page for details</a>. Sorry! PHP version ' . $php_minimum . ' or newer is required for BackupBuddy to properly run. You are running PHP version ' . PHP_VERSION . '.' );
}

global $importbuddy_file;
$importbuddy_file = basename( __FILE__ ); // filename of importbuddy.php (or whatever it is named).

global $wp_version;
$wp_version = '4.4'; // Spoof a version for new wp-db class.
$abspath    = rtrim( dirname( __FILE__ ), '\\/' ) . '/';

define( 'ABSPATH', $abspath );
define( 'WP_CONTENT_DIR', $abspath . 'wp-content' );
define( 'PB_BB_VERSION', '8.6.0.0 (downloaded 2020-08-31T08:28:09+00:00)' );
define( 'DB_CHARSET', 'utf8' ); // Default only. Overriden later if needed. Used by wpdb class.
define( 'DB_COLLATE', '' ); // Default only. Overriden alter if needed. Used by wpdb class.

@date_default_timezone_set( @date_default_timezone_get() ); // Prevents date() from throwing a warning if the default timezone has not been set. Run prior to any file_exists()!

/**
 * Checks the current step.
 *
 * @return int|false  Current step or false when step not found or invalid.
 */
function ib_directory_browsing_allowed() {
	if ( ! isset( $_GET['step'] ) ) {
		return false;
	}

	$step = $_GET['step'];

	if ( ! is_numeric( $step ) ) {
		return false;
	}

	if ( $step < 5 ) {
		return false;
	}

	return $step;
}

// Try to put an index.htm file in place during import to help prevent against file browsing. Only do if not a defined step OR a non-numeric defined step OR a defined numeric step < 5.
if ( ! ib_directory_browsing_allowed() ) {
	if ( ! file_exists( ABSPATH . 'index.htm' ) && ! file_exists( ABSPATH . 'index.php' ) ) {
		@file_put_contents( ABSPATH . 'index.htm', '<html></html>' );
	}
}

// If inside BB install then die. Else unpack importbuddy if needed.
if ( @file_exists( @dirname( @dirname( __FILE__ ) ) . '/backupbuddy.php' ) ) {
	die( '<html>Access Denied</html>' );
}


// Unpack importbuddy files into importbuddy directory. Does this when importbuddy directory does not exist OR if now request GET or POST params are sent (aka the first page only).
if ( ! file_exists( ABSPATH . 'importbuddy' ) || ( ( count( $_GET ) == 0 ) && ( count( $_POST ) == 0 ) ) ) {

	$importbuddy_contents = file_get_contents( __FILE__ );
	if ( false === $importbuddy_contents ) {
		die( 'Error #8494834: Unable to read in importbuddy file `' . __FILE__ . '` for validating.' );
	}

	// Make sure this file is complete and contains all the packed data to the end before proceeding.
	if ( false === strpos( $importbuddy_contents, '###PACKDATA' . ',END' ) ) { // Concat here so we don't false positive on this line when searching.
		die( 'ERROR: It appears your `' . __FILE__ . '` file is incomplete.  It may have not finished downloading or uploading completely.  Please try re-downloading the script from within BackupBuddy in WordPress (do not just copy the file from the plugin directory) and re-uploading it.' );
	}

	// Make sure no leading whitespace. Some servers introduce this to the beginning, breaking authentication due to output before auth headers being sent.
	if ( ltrim( $importbuddy_contents ) !== $importbuddy_contents ) {
		if ( false === ( file_put_contents( __FILE__, ltrim( $importbuddy_contents ) ) ) ) {
			die( 'Error #84394834: Your importbuddy file `' . __FILE__ . '` file contains leading whitespace/newslines and the script could not re-write it to fix it for you (possibly due to permissions). Please re-download it or manually edit to make sure it begins with <?php with no spaces or newlines/enters before it.' );
		} else { // Re-wrote file.
			sleep( 1 );
			die( '<meta http-equiv="refresh" content="1">Refreshing... Removed unexpected leading whitespace found in importbuddy.php file.' );
		}
	}

	$importbuddy_contents = '';

	$unpack_importbuddy = true;
	if ( file_exists( ABSPATH . 'importbuddy' ) ) { // ImportBuddy directory already exists. We may need to re-unpack it if this file has been updated since.
		$signature = @file_get_contents( ABSPATH . 'importbuddy/_signature.php' );
		$signature = trim( str_replace( '<?php die(); ?>', '', $signature ) );
		if ( md5( PB_BB_VERSION . PB_PASSWORD ) != $signature ) { // Signature mismatch. We will need to delete and unpack again to update.
			// echo '<!-- unlinking existing importbuddy directory. -->'; 5.1.0.10: Broke causing headers already sent error due to auth.
			recursive_unlink( ABSPATH . 'importbuddy' );
		} else {
			$unpack_importbuddy = false;
		}
	}
	if ( true === $unpack_importbuddy ) {
		unpack_importbuddy( $ignore_not_writable );
		@file_put_contents( ABSPATH . 'importbuddy/_signature.php', '<?php die(); ?>' . md5( PB_BB_VERSION . PB_PASSWORD ) ); // Create a hash of this ImportBuddy version & password. On accessing importbuddy.php's authentication page all importbuddy files will be freshly unpacked if the importbuddy.php version and/or password mismatches to allow users to just replace importbuddy.php to upgrade ImportBuddy or password.
	}
}

// Database wrapper.
require_once ABSPATH . 'importbuddy/classes/wp-db.php';
global $wpdb;

if ( isset( $_GET['api'] ) && '' != $_GET['api'] ) { // API ACCESS.
	if ( 'ping' === $_GET['api'] ) {
		die( 'pong' );
	} else {
		die( 'Unknown API access action.' );
	}
} else { // NORMAL ACCESS.
	if ( ! file_exists( ABSPATH . 'importbuddy/init.php' ) ) {
		die( 'Error: Unable to find file `' . ABSPATH . 'importbuddy/init.php`. Make sure that you downloaded this script from within BackupBuddy. Copying importbuddy files from inside the plugin directory is not sufficient as many file additions are made on demand.' );
	} else {
		require_once ABSPATH . 'importbuddy/init.php';
	}
}

/**
 * Recursively delete files.
 *
 * @param string $path  Path to start deleting.
 *
 * @return bool  If successful.
 */
function recursive_unlink( $path ) {
	return is_file( $path ) ? @unlink( $path ) : array_map( 'recursive_unlink', glob( $path . '/*' ) ) == @rmdir( $path );
}

/**
 * Unpacks required files encoded in importbuddy.php into stand-alone files.
 *
 * @param bool $ignore_not_writable  Ignore not writeable errors.
 */
function unpack_importbuddy( $ignore_not_writable = false ) {
	if ( ! is_writable( ABSPATH ) && false === $ignore_not_writable ) {
		echo 'Error #224834. This directory, `' . ABSPATH . '`, is not write enabled according to the server. Please verify proper write permissions to continue. If this persists, contact your web hosting provider and tell them that is_writable("' . ABSPATH . '") returns FALSE in PHP.';
		die();
	} else {
		$unpack_file = '';

		$handle = @fopen( __FILE__, 'r' );
		if ( $handle ) {
			while ( ( $buffer = fgets( $handle ) ) !== false ) {
				if ( substr( $buffer, 0, 11 ) == '###PACKDATA' ) {
					$packdata_commands = explode( ',', trim( $buffer ) );
					array_shift( $packdata_commands );

					if ( 'BEGIN' === $packdata_commands[0] ) {
						// Start packed data.
					} elseif ( 'FILE_START' === $packdata_commands[0] ) {
						$unpack_file = $packdata_commands[2];
					} elseif ( 'FILE_END' === $packdata_commands[0] ) {
						$unpack_file = '';
					} elseif ( 'END' === $packdata_commands[0] ) {
						return;
					}
				} else {
					if ( '' != $unpack_file ) {
						if ( ! is_dir( dirname( ABSPATH . $unpack_file ) ) ) {
							$mkdir_result = mkdir( dirname( ABSPATH . $unpack_file ), 0777, true ); // second param makes recursive.
							if ( false === $mkdir_result ) {
								echo 'Error #54455. Unable to mkdir `' . dirname( ABSPATH . $unpack_file ) . '`<br>';
							}
						}
						$fileput_result = file_put_contents( ABSPATH . $unpack_file, base64_decode( $buffer ) );
						if ( false === $fileput_result ) {
							echo 'Error #65656. Unable to put file contents to `' . ABSPATH . $unpack_file . '`.<br>';
						}
					}
				}
			}
			if ( ! feof( $handle ) ) {
				echo 'Error: unexpected fgets() fail.<br>';
			}
			fclose( $handle );
		} else {
			echo 'ERROR #54455: Unable to open `' . __FILE__ . '` file for reading in packaged data.<br>';
		}
	}
}

die();

/*
###PACKDATA,BEGIN
###PACKDATA,FILE_START,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess

###PACKDATA,FILE_END,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess
###PACKDATA,FILE_START,/_importbuddy/importbuddy/importbuddy-hooks.php,importbuddy/importbuddy-hooks.php
PD9waHAKLyoqCiAqIFRoaXMgaXMgYSBwb29yIG1hbidzIGltcGxlbWVudGF0aW9uIG9mIFdQJ3MgaG9va3MuCiAqCiAqIEl0IGRvZXNuJ3QgYWxsb3cgeW91IHRvIGFkZCBtdWx0aXBsZSBob29rcyB0byB0aGUgYWN0aW9uLiBPbmx5IG9uZS4KICogTm90IG9mZmljaWFsbHkgc3VwcG9ydGVkIHlldC4KICovCgovKioKICogTXVjaCBsaWtlIFdQIEFjdGlvbnMuIFBhc3NlcyB0byBmaWx0ZXIuIERvZXNuJ3QgcmV0dXJuIGRhdGEuCiAqCiAqIEBwYXJhbSAgc3RyaW5nICAkYWN0aW9uICBTbHVnLiBJbnQgdGhpcyBpbXBsZW1lbnRhdGlvbiAtIGl0IHdpbCBldmVudHVhbGx5IGJlIGFwcGVuZGVkIHRvIGEgZnVuY3Rpb24gbmFtZQogKiBAcGFyYW0gIGFycmF5ICAgJHBhcmFtcyAgT3B0aW9uYWwgZGF0YSB0byB3b3JrIHdpdGgKICovCmZ1bmN0aW9uIGl0X2J1Yl9pbXBvcnRidWRkeV9kb19hY3Rpb24oICRhY3Rpb24sICRwYXJhbXMgPSAnJyApIHsKCWl0X2J1Yl9pbXBvcnRidWRkeV9hcHBseV9maWx0ZXJzKCAkYWN0aW9uLCAkcGFyYW1zICk7Cn0KCi8qKgogKiBNdWNoIGxpa2UgV1AgRmlsdGVycy4KICoKICogT3VyIGltcGxlbWVudGF0aW9uIGRvZXNuJ3QgYWN0dWFsbHkgc3VwcG9ydCBhZGRpbmcgZmlsdGVycy4gVGhleSdyZSBjdXJyZW50bHkgYWxsIGhhcmQgY29kZWQuCiAqCiAqIEBwYXJhbSAgc3RyaW5nICAkYWN0aW9uICBTbHVnLiBJbnQgdGhpcyBpbXBsZW1lbnRhdGlvbiAtIGl0IHdpbCBldmVudHVhbGx5IGJlIGFwcGVuZGVkIHRvIGEgZnVuY3Rpb24gbmFtZQogKiBAcGFyYW0gIGFycmF5ICAgJHBhcmFtcyAgT3B0aW9uYWwgZGF0YSB0byB3b3JrIHdpdGgKICoKICogQHJldHVybiBtaXhlZAogKi8KZnVuY3Rpb24gaXRfYnViX2ltcG9ydGJ1ZGR5X2FwcGx5X2ZpbHRlcnMoICRhY3Rpb24sICRwYXJhbXMgPSBhcnJheSgpICkgewoJLy8gSWYgZHJvcGluIGRvZXNuJ3QgZXhpc3QsIGFib3J0CglpZiAoICEgaXRfYnViX2ltcG9ydGJ1ZGR5X2xvYWRfZHJvcGluKCkgKSB7CgkJcmV0dXJuICRwYXJhbXM7Cgl9CgoJLy8gSWYgYWN0aW9uIGV4aXN0cywgZG8gaXQuIElmIG5vdCwgYWJvcnQKCWlmICggaXNfY2FsbGFibGUoICdpdF9idWJfaW1wb3J0YnVkZHlfaG9va18nIC4gJGFjdGlvbiApICkgewoJCXJldHVybiBjYWxsX3VzZXJfZnVuYyggJ2l0X2J1Yl9pbXBvcnRidWRkeV9ob29rXycgLiAkYWN0aW9uLCAkcGFyYW1zICk7Cgl9CgoJcmV0dXJuICRwYXJhbXM7Cn0KCi8qKgogKiBMb2FkcyB0aGUgZHJvcGluIGZpbGUgaWYgaXQgZXhpc3RzIG9uZSBkaXJlY3RvcnkgdXAgZnJvbSByb290IG9mIGltcG9ydAogKgogKiBAcmV0dXJuIG51bGwKICovCmZ1bmN0aW9uIGl0X2J1Yl9pbXBvcnRidWRkeV9sb2FkX2Ryb3BpbigpIHsKCS8vIFBvc3NpYmxlIGxvY2F0aW9ucy4KCSRsb2NhdGlvbnMgPSBhcnJheSgKCQlkaXJuYW1lKCBBQlNQQVRIICksCgkJZGlybmFtZSggZGlybmFtZSggQUJTUEFUSCApICksCgkpOwoKCWZvcmVhY2ggKCAkbG9jYXRpb25zIGFzICRsb2NhdGlvbiApIHsKCQlpZiAoICEgQGlzX3JlYWRhYmxlKCAkbG9jYXRpb24gLiAnL2l0LWJ1Yi1pbXBvcnRidWRkeS1ob29rcy5waHAnICkgKSB7CgkJCWNvbnRpbnVlOwoJCX0gZWxzZSB7CgkJCXJlcXVpcmVfb25jZSAkbG9jYXRpb24gLiAnL2l0LWJ1Yi1pbXBvcnRidWRkeS1ob29rcy5waHAnOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9CglyZXR1cm4gZmFsc2U7Cn0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/importbuddy-hooks.php,importbuddy/importbuddy-hooks.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.html,importbuddy/index.html
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.html,importbuddy/index.html
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.php,importbuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.php,importbuddy/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init.php,importbuddy/init.php
PD9waHAKLyoqCiAqIFBsdWdpbiBOYW1lOiBJbXBvcnRCdWRkeQogKiBQbHVnaW4gVVJJOiBodHRwOi8vaXRoZW1lcy5jb20vCiAqIERlc2NyaXB0aW9uOiBCYWNrdXBCdWRkeSBJbXBvcnRlcgogKgogKiBAc2luY2UgMS4wLjIKICogQGF1dGhvciBEdXN0aW4gQm9sdG9uCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqCiAqIEluc3RhbGxhdGlvbjoKICoKICogMS4gRG93bmxvYWQgYW5kIHVuemlwIHRoZSBsYXRlc3QgcmVsZWFzZSB6aXAgZmlsZS4KICogMi4gSWYgeW91IHVzZSB0aGUgV29yZFByZXNzIHBsdWdpbiB1cGxvYWRlciB0byBpbnN0YWxsIHRoaXMgcGx1Z2luIHNraXAgdG8gc3RlcCA0LgogKiAzLiBVcGxvYWQgdGhlIGVudGlyZSBwbHVnaW4gZGlyZWN0b3J5IHRvIHlvdXIgYC93cC1jb250ZW50L3BsdWdpbnMvYCBkaXJlY3RvcnkuCiAqIDQuIEFjdGl2YXRlIHRoZSBwbHVnaW4gdGhyb3VnaCB0aGUgJ1BsdWdpbnMnIG1lbnUgaW4gV29yZFByZXNzIEFkbWluaXN0cmF0aW9uLgogKgogKiBVc2FnZToKICoKICogMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBwbHVnaW4gbWVudSBpbiB0aGUgV29yZFByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsLgogKgogKiBOT1RFOiBETyBOT1QgRURJVCBUSElTIE9SIEFOWSBPVEhFUiBQTFVHSU4gRklMRVMuIE5PIFVTRVItQ09ORklHVVJBQkxFIE9QVElPTlMgV0lUSElOLgogKi8KCmVycm9yX3JlcG9ydGluZyggRV9FUlJPUiB8IEVfV0FSTklORyB8IEVfUEFSU0UgfCBFX05PVElDRSApOyAvLyBISUdILgoKZGVmaW5lKCAnUEJfU1RBTkRBTE9ORScsIHRydWUgKTsKZGVmaW5lKCAnUEJfSU1QT1JUQlVERFknLCB0cnVlICk7CgpyZXF1aXJlX29uY2UgQUJTUEFUSCAuICdpbXBvcnRidWRkeS9pbXBvcnRidWRkeS1ob29rcy5waHAnOwppdF9idWJfaW1wb3J0YnVkZHlfZG9fYWN0aW9uKCAnaW5pdCcgKTsKCiRwbHVnaW5idWRkeV9zZXR0aW5ncyA9IGl0X2J1Yl9pbXBvcnRidWRkeV9hcHBseV9maWx0ZXJzKCAncGx1Z2luYnVkZHlfc2V0dGluZ3MnLCBhcnJheSgKCSdzbHVnJyAgICAgICAgICAgICAgICAgICAgPT4gJ2JhY2t1cGJ1ZGR5JywKCSdwaHBfbWluaW11bScgICAgICAgICAgICAgPT4gJzUuMicsCgknc2VyaWVzJyAgICAgICAgICAgICAgICAgID0+ICcnLAoJJ3JlbW90ZV9hcGknICAgICAgICAgICAgICA9PiAnMCcsIC8vIFNldCB0byAxIGJ5IHN0YXRlIGZvciBkZXBsb3ltZW50cy4KCSdkZWZhdWx0X3N0YXRlX292ZXJyaWRlcycgPT4gYXJyYXkoKSwgLy8gRGVmYXVsdCBzdGF0ZSB0byBvdmVycmlkZSB0aGUgbWFpbiBkZWZhdWx0cy4gR29vZCBmb3IgYXV0b21hdGluZyBpbXBvcnRzLiBBcHBsaWVkIG92ZXIgZGVmYXVsdHMgZHVyaW5nIGNvbnN0cnVjdGlvbiBvZiByZXN0b3JlIGNsYXNzLgoJJ2RlZmF1bHRfb3B0aW9ucycgICAgICAgICA9PiBhcnJheSgKCQknYmJfdmVyc2lvbicgICAgICAgPT4gUEJfQkJfVkVSU0lPTiwgIC8vIEJCIHZlcnNpb24gdG8gYmUgZmlsbGVkIGluIG9uIGRvd25sb2FkLgoJCSdiYWNrdXBfZGlyZWN0b3J5JyA9PiAnJywKCQknbG9nX2xldmVsJyAgICAgICAgPT4gMCwgLy8gTm8gbG9uZ2VyIHVzaW5nIHRoaXMgbWV0aG9kIGZvciBoYW5kbGluZyBsb2dnaW5nLiBzdGF0dXMoKSBtZXRob2QgYWx3YXlzIGxvZ3MgYWxsIGlmIGltcG9ydGJ1ZGR5LgoJKSwKCSdtb2R1bGVzJyAgICAgICAgICAgICAgICAgPT4gYXJyYXkoCgkJJ3VwZGF0ZXInICAgID0+IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIFBsdWdpbkJ1ZGR5IGF1dG9tYXRpYyB1cGdyYWRlcy4KCQknZmlsZXN5c3RlbScgPT4gdHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbGUgc3lzdGVtIGhlbHBlciBtZXRob2RzLgoJCSdmb3JtYXQnICAgICA9PiB0cnVlLCAgICAgICAgICAgICAgICAgICAgICAgLy8gVGV4dCAvIGRhdGEgZm9ybWF0dGluZyBoZWxwZXIgbWV0aG9kcy4KCSksCikgKTsKCi8vICRzZXR0aW5ncyBpcyBleHBlY3RlZCB0byBiZSBwb3B1bGF0ZWQgcHJpb3IgdG8gaW5jbHVkaW5nIFBsdWdpbkJ1ZGR5IGZyYW1ld29yay4gRG8gbm90IGVkaXQgYmVsb3cuCnJlcXVpcmUgZGlybmFtZSggX19GSUxFX18gKSAuICcvcGx1Z2luYnVkZHkvX3BsdWdpbmJ1ZGR5LnBocCc7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init.php,importbuddy/init.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWQoKTsKCi8vICoqKioqKioqKiogQUNUSU9OUyAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBBSkFYIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIERBU0hCT0FSRCAoYWRtaW4pICoqKioqKioqKioKCgoKLy8gKioqKioqKioqKiBGSUxURVJTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIFBBR0VTIChhZG1pbikgKioqKioqKioqKgoKCgovLyAqKioqKioqKioqIExJQlJBUklFUyAmIENMQVNTRVMgKGFkbWluKSAqKioqKioqKioqCnJlcXVpcmVfb25jZSggJ2NsYXNzZXMvY29yZS5waHAnICk7CgpyZXF1aXJlX29uY2UoICdjbGFzc2VzL2ltcG9ydC5waHAnICk7CnBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10gPSBuZXcgcGJfYmFja3VwYnVkZHlfaW1wb3J0KCk7CgoKLy8gKioqKioqKioqKiBPVEhFUiAoYWRtaW4pICoqKioqKioqKioKCgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
PD9waHAKLyoqCiAqIEluaXQgR2xvYmFsCiAqCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqLwoKaWYgKCAhIGNsYXNzX2V4aXN0cyggJ2JhY2t1cGJ1ZGR5X2NvcmUnICkgKSB7CglyZXF1aXJlX29uY2UgcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2NsYXNzZXMvY29yZS5waHAnOwp9CgpyZXF1aXJlX29uY2UgQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jbGFzc2VzL2F1dGgucGhwJzsKCi8vIElmIHZlcmlmaWNhdGlvbiBjb2RlIHBhc3NlZCB0aGVuIGF1dGhlbnRpY2F0ZSBlYXJseS4KaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2Rpc3BsYXlfbW9kZScgKSA9PSAnZW1iZWQnICkgewoJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOwp9CgpnbG9iYWwgJGltcG9ydGJ1ZGR5X2ZpbGU7CiRpbXBvcnRfc2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRpbXBvcnRidWRkeV9maWxlICk7CgppZiAoICcnICE9ICRpbXBvcnRfc2VyaWFsICkgeyAvLyBpbXBvcnRidWRkeSBoYXMgYSBzZXJpYWwuIExvb2sgZm9yIGEgZGVmYXVsdCBzdGF0ZSBmaWxlIHRoYXQgbWF0Y2hlcy4KCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snbG9nX3NlcmlhbCddID0gJGltcG9ydF9zZXJpYWw7CglwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOwoKCWlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHktJyAuICRpbXBvcnRfc2VyaWFsIC4gJy1zdGF0ZS5waHAnICkgKSB7IC8vIERlZmF1bHQgc3RhdGUgZXhpc3RzLgoKCQkvLyBJZiBhbiBvdmVycmlkaW5nIHN0YXRlIGZpbGUgZXhpc3RzIHRoZW4gbG9hZCBpdCBvdmVyIHRoZSBjdXJyZW50IHN0YXRlLgoJCSRvdmVycmlkZV9zdGF0ZV9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydF9zZXJpYWwgLiAnLXN0YXRlLnBocCc7CgkJaWYgKCBmaWxlX2V4aXN0cyggJG92ZXJyaWRlX3N0YXRlX2ZpbGUgKSApIHsKCQkJJHN0YXRlZGF0YSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApOwoJCQkvLyBTa2lwIGZpcnN0IGxpbmUuCgkJCSRzZWNvbmRfbGluZV9wb3MgPSBzdHJwb3MoICRzdGF0ZWRhdGEsICJcbiIgKSArIDE7CgkJCSRzdGF0ZWRhdGEgICAgICAgPSBzdWJzdHIoICRzdGF0ZWRhdGEsICRzZWNvbmRfbGluZV9wb3MgKTsKCQkJLy8gRGVjb2RlIGJhY2sgaW50byBhbiBhcnJheS4KCQkJJHN0YXRlZGF0YSA9IGpzb25fZGVjb2RlKCBiYXNlNjRfZGVjb2RlKCAkc3RhdGVkYXRhICksIHRydWUgKTsKCQkJaWYgKCBpc19hcnJheSggJHN0YXRlZGF0YSApICkgeyAvLyBWYWxpZCBjb250ZW50LgoJCQkJLy8gTm9ybWFsaXplIFVSTHMuCgkJCQlpZiAoIGlzc2V0KCAkc3RhdGVkYXRhWydzaXRldXJsJ10gKSApIHsKCQkJCQkkc3RhdGVkYXRhWydzaXRldXJsJ10gPSBydHJpbSggJHN0YXRlZGF0YVsnc2l0ZXVybCddLCAnLycgKTsKCQkJCX0KCQkJCWlmICggaXNzZXQoICRzdGF0ZWRhdGFbJ2hvbWV1cmwnXSApICkgewoJCQkJCSRzdGF0ZWRhdGFbJ2hvbWV1cmwnXSA9IHJ0cmltKCAkc3RhdGVkYXRhWydob21ldXJsJ10sICcvJyApOwoJCQkJfQoKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0xvYWRlZCBkZWZhdWx0IHN0YXRlIG92ZXJyaWRlIHN0YXRlIGZpbGUgZGF0YSBhbmQgZ2F2ZSBpdCBwcmlvcml0eSBvdmVyIGN1cnJlbnQgc3RhdGUuIEZpbGU6IGAnIC4gJG92ZXJyaWRlX3N0YXRlX2ZpbGUgLiAnYC4nICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RlZmF1bHRfc3RhdGVfb3ZlcnJpZGVzJ10gPSAkc3RhdGVkYXRhOwoJCQkJcGJfYmFja3VwYnVkZHk6OnNhdmUoKTsKCQkJfQoJCX0KCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnT3ZlcnJpZGUgc3RhdGUgZmlsZSBub3QgZm91bmQgYXQgYCcgLiAkb3ZlcnJpZGVfc3RhdGVfZmlsZSAuICdgLiBTa2lwcGluZy4nICk7Cgl9Cn0KCi8vIEhhbmRsZSBBUEkgY2FsbHMgaWYgYmFja3VwYnVkZHlfYXBpX2tleSBpcyBwb3N0ZWQuIElmIGFueXRoaW5nIGZhaWxzIHNlY3VyaXR5IGNoZWNrcyBwcmV0ZW5kIG5vdGhpbmcgYXQgYWxsIGhhcHBlbmVkLgppZiAoICcnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2JhY2t1cGJ1ZGR5X2FwaV9rZXknICkgKSB7IC8vIFJlbW90ZSBBUEkgYWNjZXNzLgoJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZW1vdGVfYXBpJ11bJ2tleXMnXSApICYmICggY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVtb3RlX2FwaSddWydrZXlzJ10gKSA+IDAgKSApIHsgLy8gUmVtb3RlIEFQSSBlbmFibGVkIGFuZCAxIG9yIG1vcmUga2V5cyBkZWZpbmVkLgoJCWluY2x1ZGUgJ2NsYXNzZXMvcmVtb3RlX2FwaS5waHAnOwoJCWJhY2t1cGJ1ZGR5X3JlbW90ZV9hcGk6OmxvY2FsQ2FsbCggdHJ1ZSwgdHJ1ZSApOwoJCWRpZSgpOwoJfQp9CgppZiAoICdlbWJlZCcgPT09IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGlzcGxheV9tb2RlJyApICkgewoJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkaXNwbGF5X21vZGUnXSA9ICdlbWJlZCc7CglwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOwp9Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt

###PACKDATA,FILE_END,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
ICogV2Vic2l0ZTogaHR0cDovL2l0aGVtZXMuY29tCiAqCiAqIEluc3RhbGxhdGlvbjoKICogCiAqIDEuIERvd25sb2FkIGFuZCB1bnppcCB0aGUgbGF0ZXN0IHJlbGVhc2UgemlwIGZpbGUKICogMi4gSWYgeW91IHVzZSB0aGUgV29yZFByZXNzIHBsdWdpbiB1cGxvYWRlciB0byBpbnN0YWxsIHRoaXMgcGx1Z2luIHNraXAgdG8gc3RlcCA0LgogKiAzLiBVcGxvYWQgdGhlIGVudGlyZSBwbHVnaW4gZGlyZWN0b3J5IHRvIHlvdXIgYC93cC1jb250ZW50L3BsdWdpbnMvYCBkaXJlY3RvcnkKICogNC4gQWN0aXZhdGUgdGhlIHBsdWdpbiB0aHJvdWdoIHRoZSAnUGx1Z2lucycgbWVudSBpbiBXb3JkUHJlc3MgQWRtaW5pc3RyYXRpb24KICogCiAqIFVzYWdlOgogKiAKICogMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBtZW51IGZvciB0aGlzIHBsdWdpbiBpbiB0aGUgV29yZHByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsCiAqIDIuIFNlbGVjdCAnR2V0dGluZyBTdGFydGVkJyBmb3IgaW5zdHJ1Y3Rpb25zIGFuZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLgogKg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
OyBEZWZhdWx0IHZhbHVlcyBjYW4gYmUgc2VlbiBpbjogaW1wb3J0YnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCAob3IgYmFja3VwYnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCkgaW4gdGhlIF9fY29uc3RydWN0KCkgZnVuY3Rpb24sIHdoZXJlICR0aGlzLT5fc3RhdGUgaXMgZmlyc3Qgc2V0LgoKdHlwZSA9IHJlc3RvcmUKYXJjaGl2ZSA9IGJhY2t1cC1iYWNrdXBidWRkeS1YWFhYWFhYWFhYWC56aXAKc2l0ZXVybCA9IGh0dHA6Ly9maW5hbHVybC5jb20KaG9tZXVybCA9IGh0dHA6Ly9maW5hbHVybC5jb20KcmVzdG9yZUZpbGVzID0gdHJ1ZQpyZXN0b3JlRGF0YWJhc2UgPSB0cnVlCm1pZ3JhdGVIdGFjY2VzcyA9IHRydWUKCjsgQm90aCBvZiB0aGVzZSBtdXN0IGJlIHRydWUgd2hlbiB1c2luZyAuaW5pIGZpbGUuCmluaW1vZGUgPSB0cnVlCmF1dG9BZHZhbmNlID0gdHJ1ZQoKW2RhdGFiYXNlU2V0dGluZ3NdCnNlcnZlciA9IGxvY2FsaG9zdApkYXRhYmFzZSA9IGRhdGFiYXNlX25hbWUKdXNlcm5hbWUgPSBkYXRhYmFzZV91c2VyCnBhc3N3b3JkID0gZGF0YWJhc2VfcGFzc3dvcmQKcHJlZml4ID0gd3BfCnJlbmFtZVByZWZpeCA9IHRydWUKd2lwZVByZWZpeCA9IGZhbHNlCndpcGVEYXRhYmFzZSA9IGZhbHNlCgpbY2xlYW51cF0KZGVsZXRlQXJjaGl2ZSA9IGZhbHNlCmRlbGV0ZVRlbXBGaWxlcyA9IHRydWUKZGVsZXRlSW1wb3J0QnVkZHkgPSBmYWxzZQpzZXRfYmxvZ19wdWJsaWMgPSAKZGVsZXRlSW1wb3J0QnVkZHlEaXJlY3RvcnkgPSB0cnVlCmRlbGV0ZUltcG9ydExvZyA9IHRydWUK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
PD9waHAKY2xhc3MgQXV0aCB7CgkKCWNvbnN0IE1BWF9MT0dJTl9BVFRFTVBUU19BTExPV0VEID0gNDsgLy8gTWF4aW11bSBudW1iZXIgb2YgaW52YWxpZCBsb2dpbiBhdHRlbXB0cyBiZWZvcmUgbG9ja2luZyBpbXBvcnRidWRkeS4KCWNvbnN0IFJFU0VUX0RFRkFVTFRTX09OX0lOVkFMSURfTE9HSU4gPSBmYWxzZTsgLy8gV2hldGhlciBvciBub3QgcmVzZXQgYWxsIHNldHRpbmdzL29wdGlvbnMgYmFjayB0byBkZWZhdWx0cyBvbiBsb2dpbiBmYWlsdXJlLgoJY29uc3QgQ09PS0lFX0VYUElSQVRJT04gPSA4NjQwMDsgLy8gTnVtYmVyIG9mIHNlY29uZHMgYW4gaW1wb3J0YnVkZHkgY29va2llIGlzIHZhbGlkIGZvci4KCXByaXZhdGUgc3RhdGljICRfYXV0aGVudGljYXRlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIHVzZXIgaXMgdmFsaWRseSBhdXRoZW50aWNhdGVkIG9yIG5vdC4KCXByaXZhdGUgc3RhdGljICRfY2hlY2tlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIGNoZWNrKCkgaGFzIGJlZW4gcnVuIHlldC4KCQoJCgkKCS8qIGNoZWNrKCkKCSAqCgkgKiBDaGVjayBhdXRoZW50aWNhdGlvbiBiYXNlZCBvbiBmb3JtIGRhdGEgc3VibWl0dGVkLiBUaGlzIG9ubHkgbmVlZHMgdG8gYmUgcnVuIG9uY2UuIFVzZSBpc19hdXRoZW50aWNhdGVkKCkgdG8gZGV0ZXJtaW5lIGF1dGggc3RhdHVzLgoJICoKCSAqIEBwYXJhbQlmb3JjZV9jaGVjawkJYm9vbAlJZiB0cnVlIHRoZW4gd2lsbCByZS1jaGVjayBldmVuIGlmIGNoZWNrKCkgaGFzIGFscmVhZHkgYmVlbiBydW4gdGhpcyBzZXNzaW9uLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjaGVjayggJGZvcmNlX2NoZWNrID0gZmFsc2UgKSB7CgkJCgkJaWYgKCAoIHRydWUgPT09IHNlbGY6OiRfY2hlY2tlZCApICYmICggJGZvcmNlX2NoZWNrID09PSBmYWxzZSApICkgeyAvLyBTa2lwIGNoZWNraW5nIGlmIGFscmVhZHkgc2tpcHBlZCB1bmxlc3MgZm9yY2luZy4KCQkJcmV0dXJuIHNlbGY6OmlzX2F1dGhlbnRpY2F0ZWQoKTsKCQl9CgkJCgkJJGxvZ2luX2F0dGVtcHRfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvX2xvZ2luX2F0dGVtcHRzLnBocCc7CgkJJGxvZ2luX2F0dGVtcHRzID0gMTsKCQlpZiAoIGZpbGVfZXhpc3RzKCAkbG9naW5fYXR0ZW1wdF9maWxlICkgKSB7CgkJCSRsb2dpbl9hdHRlbXB0cyA9IEBmaWxlX2dldF9jb250ZW50cyggJGxvZ2luX2F0dGVtcHRfZmlsZSApOwoJCX0KCQlpZiAoIGZhbHNlICE9PSAkbG9naW5fYXR0ZW1wdHMgKSB7CgkJCSRsb2dpbl9hdHRlbXB0cyA9IHRyaW0oIHN0cl9yZXBsYWNlKCAnPD9waHAgZGllKCk7ID8+JywgJycsICRsb2dpbl9hdHRlbXB0cyApICk7CgkJCWlmICggJGxvZ2luX2F0dGVtcHRzID4gc2VsZjo6TUFYX0xPR0lOX0FUVEVNUFRTX0FMTE9XRUQgKSB7CgkJCQlkaWUoICdBY2Nlc3MgRGVuaWVkLiBNYXhpbXVtIGxvZ2luIGF0dGVtcHRzIGV4Y2VlZGVkLiBZb3UgbXVzdCBkZWxldGUgdGhlIGZpbGUgIl9sb2dpbl9hdHRlbXB0cy5waHAiIGluIHRoZSBpbXBvcnRidWRkeSBkaXJlY3Rvcnkgb24geW91ciBzZXJ2ZXIgdG8gdW5sb2NrIHRoaXMgSW1wb3J0QnVkZHkgdG8gYWxsb3cgaXQgdG8gY29udGludWUuJyApOwoJCQl9CgkJfQoJCQoJCSRhY3R1YWxfcGFzc19oYXNoID0gUEJfUEFTU1dPUkQ7CgkJaWYgKCAoICcjUEFTU1dPUkQjJyA9PSAkYWN0dWFsX3Bhc3NfaGFzaCApIHx8ICggJycgPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSApIHsgZGllKCAnRXJyb3IgIzg0NTc4NDU5NzQ1LiBBIHBhc3N3b3JkIG11c3QgYmUgc2V0IHRvIGFjY2VzcyBJbXBvcnRCdWRkeS4gUGxlYXNlIGRvd25sb2FkIGEgZnJlc2ggY29weSBhZnRlciBjb25maWd1cmluZyB5b3VyIEltcG9ydEJ1ZGR5IHBhc3N3b3JkLicgKTsgfQoJCQoJCWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGFzc3dvcmQnICkgIT0gJycgKSB7CgkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBtZDUoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICk7CgkJfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgewoJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gbWQ1KCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3N3b3JkJyApICk7CgkJfSBlbHNlIHsKCQkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3YnICkgIT0gJycgKSB7IC8vIEhhc2ggc3VibWl0dGVkIGJ5IG1hZ2ljIG1pZ3JhdGlvbi4KCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3YnICk7CgkJCX0gZWxzZSB7IC8vIE5vcm1hbCBmb3JtIHN1Ym1pdHRlZCBoYXNoLgoJCQkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzX2hhc2gnICkgIT0gJycgKSB7CgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3NfaGFzaCcgKTsKCQkJCX0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGJfYmFja3VwYnVkZHlfcGFzc19oYXNoJyApICE9ICcnICkgewoJCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYl9iYWNrdXBidWRkeV9wYXNzX2hhc2gnICk7CgkJCQl9IGVsc2UgewoJCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSAnJzsKCQkJCX0KCQkJfQoJCX0KCQkKCQlpZiAoICRzdXBwbGllZF9wYXNzX2hhc2ggPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSB7CgkJCXNlbGY6OiRfYXV0aGVudGljYXRlZCA9IHRydWU7CgkJCXNldGNvb2tpZSggJ2ltcG9ydGJ1ZGR5X2xvZ2luJywgbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApLCAoIHRpbWUoKSsgc2VsZjo6Q09PS0lFX0VYUElSQVRJT04gKSApOwoJCX0gZWxzZWlmICggaXNzZXQoICRfQ09PS0lFWydpbXBvcnRidWRkeV9sb2dpbiddICkgJiYgKCAkX0NPT0tJRVsnaW1wb3J0YnVkZHlfbG9naW4nXSAhPSAnJyApICYmICggJF9DT09LSUVbJ2ltcG9ydGJ1ZGR5X2xvZ2luJ10gPT0gbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApICkgKSB7CgkJCXNlbGY6OiRfYXV0aGVudGljYXRlZCA9IHRydWU7CgkJCXNldGNvb2tpZSggJ2ltcG9ydGJ1ZGR5X2xvZ2luJywgbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApLCAoIHRpbWUoKSArIHNlbGY6OkNPT0tJRV9FWFBJUkFUSU9OICkgKTsKCQl9IGVsc2UgeyAvLyBJbmNvcnJlY3QgaGFzaC4gUmVzZXQgc2V0dGluZ3MgJiB0cmFjayBhdHRlbXB0cy4KCQkJaWYgKCAnJyAhPSAkc3VwcGxpZWRfcGFzc19oYXNoICkgeyAvLyBEb250IGNvdW50IGJsYW5rIGhhc2ggYXMgYW4gYXR0ZW1wdC4KCQkJCWlmICggdHJ1ZSA9PT0gc2VsZjo6UkVTRVRfREVGQVVMVFNfT05fSU5WQUxJRF9MT0dJTiApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6cmVzZXRfZGVmYXVsdHMoKTsKCQkJCX0KCQkJCWlmICggZmFsc2UgIT09ICRsb2dpbl9hdHRlbXB0cyApIHsKCQkJCQlnbG9iYWwgJHBiX2xvZ2luX2F0dGVtcHRzOwoJCQkJCSRwYl9sb2dpbl9hdHRlbXB0cyA9ICRsb2dpbl9hdHRlbXB0czsKCQkJCQlAZmlsZV9wdXRfY29udGVudHMoICRsb2dpbl9hdHRlbXB0X2ZpbGUsICc8P3BocCBkaWUoKTsgPz4nIC4gKCAkbG9naW5fYXR0ZW1wdHMgKyAxICkgKTsKCQkJCX0KCQkJfQoJCX0KCQkKCQlzZWxmOjokX2NoZWNrZWQgPSB0cnVlOwoJCQoJCXJldHVybiBzZWxmOjokX2F1dGhlbnRpY2F0ZWQ7CgkJCgl9IC8vIEVuZCBjaGVjaygpLgoJCgkKCQoJLyogaXNfYXV0aGVudGljYXRlZCgpCgkgKgoJICogRGV0ZXJtaW5lIHdoZXRoZXIgdXNlciBpcyBmdWxseSBhdXRoZW50aWNhdGVkIG9yIG5vdC4KCSAqCgkgKiBAcmV0dXJuCQlib29sCQlUcnVlIGlmIGZ1bGx5IGF1dGhlbnRpY2F0ZWQsIG90aGVyd2lzZSBmYWxzZS4KCSAqCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNfYXV0aGVudGljYXRlZCgpIHsKCQkKCQlyZXR1cm4gc2VsZjo6JF9hdXRoZW50aWNhdGVkOwoJCQoJfSAvLyBFbmQgYXV0aGVudGljYXRlZCgpLgoJCgkKCQoJLyogcmVxdWlyZV9hdXRoZW50aWNhdGlvbigpCgkgKgoJICogUmVxdWlyZXMgdmFsaWQgYXV0aGVudGljYXRpb24gdG8gYWxsb3cgcHJvY2VlZGluZy4gZGllKCkgaWYgbm90IGxvZ2dlZCBpbi4KCSAqCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmVxdWlyZV9hdXRoZW50aWNhdGlvbigpIHsKCQkKCQkvLyBDaGVjayBpZiBwcmV2aW91c2x5IGF1dGhlZCBhbHJlYWR5IHRoaXMgc2Vzc2lvbi4KCQlpZiAoIHRydWUgPT09IHNlbGY6OmlzX2F1dGhlbnRpY2F0ZWQoKSApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJCQoJCXNlbGY6OmNoZWNrKCk7CgkJaWYgKCB0cnVlID09PSBzZWxmOjppc19hdXRoZW50aWNhdGVkKCkgKSB7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCWRpZSggJ0FjY2VzcyBEZW5pZWQuIFlvdSBtdXN0IGxvZyBpbiBmaXJzdC4gUGxlYXNlIHJldHVybiB0byB0aGUgPGEgaHJlZj0iaW1wb3J0YnVkZHkucGhwIj5pbXBvcnRidWRkeS5waHAgaG9tZXBhZ2U8L2E+IGF1dGhlbnRpY2F0ZS4nICk7CgkJfQoJCQoJfSAvLyBFbmQgcmVxdWlyZV9hdXRob3JpemF0aW9uKCk7CgkKfSAvLyBFbmQgY2xhc3MuCgoK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php
PD9waHAKLy8gd3BkLWRiLnBocCBtb2RpZmllZCBmb3IgQkIgdjYuMC4wLjYgdG8gc3RvcmUgc2V0IGNoYXJzZXQgaW4gJHdwZGItPmNoYXJzZXQgZm9yIHV0Zm1iNCBoYW5kbGluZyB3aXRoIG15c3FsYnVkZHkgaW4gc2V0X2NoYXJ0c2V0KCkuCi8vIE5PVEU6IEEgY29weSBvZiB0aGlzIGZpbGUgaXMgZHJvcHBlZCBpbnRvIF9yb2xsYmFja191bmRvLnBocC4KCgoKLyoqCiAqIFdvcmRQcmVzcyBEQiBDbGFzcwogKgogKiBPcmlnaW5hbCBjb2RlIGZyb20ge0BsaW5rIGh0dHA6Ly9waHAuanVzdGludmluY2VudC5jb20gSnVzdGluIFZpbmNlbnQgKGp1c3RpbkB2aXN1bmV0LmllKX0KICoKICogQHBhY2thZ2UgV29yZFByZXNzCiAqIEBzdWJwYWNrYWdlIERhdGFiYXNlCiAqIEBzaW5jZSAwLjcxCiAqLwoKLyoqCiAqIEBzaW5jZSAwLjcxCiAqLwpkZWZpbmUoICdFWlNRTF9WRVJTSU9OJywgJ1dQMS4yNScgKTsKCi8qKgogKiBAc2luY2UgMC43MQogKi8KZGVmaW5lKCAnT0JKRUNUJywgJ09CSkVDVCcgKTsKZGVmaW5lKCAnb2JqZWN0JywgJ09CSkVDVCcgKTsgLy8gQmFjayBjb21wYXQuCgovKioKICogQHNpbmNlIDIuNS4wCiAqLwpkZWZpbmUoICdPQkpFQ1RfSycsICdPQkpFQ1RfSycgKTsKCi8qKgogKiBAc2luY2UgMC43MQogKi8KZGVmaW5lKCAnQVJSQVlfQScsICdBUlJBWV9BJyApOwoKLyoqCiAqIEBzaW5jZSAwLjcxCiAqLwpkZWZpbmUoICdBUlJBWV9OJywgJ0FSUkFZX04nICk7CgovKioKICogV29yZFByZXNzIERhdGFiYXNlIEFjY2VzcyBBYnN0cmFjdGlvbiBPYmplY3QKICoKICogSXQgaXMgcG9zc2libGUgdG8gcmVwbGFjZSB0aGlzIGNsYXNzIHdpdGggeW91ciBvd24KICogYnkgc2V0dGluZyB0aGUgJHdwZGIgZ2xvYmFsIHZhcmlhYmxlIGluIHdwLWNvbnRlbnQvZGIucGhwCiAqIGZpbGUgdG8geW91ciBjbGFzcy4gVGhlIHdwZGIgY2xhc3Mgd2lsbCBzdGlsbCBiZSBpbmNsdWRlZCwKICogc28geW91IGNhbiBleHRlbmQgaXQgb3Igc2ltcGx5IHVzZSB5b3VyIG93bi4KICoKICogQGxpbmsgaHR0cHM6Ly9jb2RleC53b3JkcHJlc3Mub3JnL0Z1bmN0aW9uX1JlZmVyZW5jZS93cGRiX0NsYXNzCiAqCiAqIEBwYWNrYWdlIFdvcmRQcmVzcwogKiBAc3VicGFja2FnZSBEYXRhYmFzZQogKiBAc2luY2UgMC43MQogKi8KY2xhc3Mgd3BkYiB7CgoJLyoqCgkgKiBXaGV0aGVyIHRvIHNob3cgU1FML0RCIGVycm9ycy4KCSAqCgkgKiBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHNob3cgZXJyb3JzIGlmIGJvdGggV1BfREVCVUcgYW5kIFdQX0RFQlVHX0RJU1BMQVkKCSAqIGV2YWx1YXRlZCB0byB0cnVlLgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqIEB2YXIgYm9vbAoJICovCgl2YXIgJHNob3dfZXJyb3JzID0gZmFsc2U7CgoJLyoqCgkgKiBXaGV0aGVyIHRvIHN1cHByZXNzIGVycm9ycyBkdXJpbmcgdGhlIERCIGJvb3RzdHJhcHBpbmcuCgkgKgoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAc2luY2UgMi41LjAKCSAqIEB2YXIgYm9vbAoJICovCgl2YXIgJHN1cHByZXNzX2Vycm9ycyA9IGZhbHNlOwoKCS8qKgoJICogVGhlIGxhc3QgZXJyb3IgZHVyaW5nIHF1ZXJ5LgoJICoKCSAqIEBzaW5jZSAyLjUuMAoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRsYXN0X2Vycm9yID0gJyc7CgoJLyoqCgkgKiBBbW91bnQgb2YgcXVlcmllcyBtYWRlCgkgKgoJICogQHNpbmNlIDEuMi4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBpbnQKCSAqLwoJcHVibGljICRudW1fcXVlcmllcyA9IDA7CgoJLyoqCgkgKiBDb3VudCBvZiByb3dzIHJldHVybmVkIGJ5IHByZXZpb3VzIHF1ZXJ5CgkgKgoJICogQHNpbmNlIDAuNzEKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIGludAoJICovCglwdWJsaWMgJG51bV9yb3dzID0gMDsKCgkvKioKCSAqIENvdW50IG9mIGFmZmVjdGVkIHJvd3MgYnkgcHJldmlvdXMgcXVlcnkKCSAqCgkgKiBAc2luY2UgMC43MQoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAdmFyIGludAoJICovCgl2YXIgJHJvd3NfYWZmZWN0ZWQgPSAwOwoKCS8qKgoJICogVGhlIElEIGdlbmVyYXRlZCBmb3IgYW4gQVVUT19JTkNSRU1FTlQgY29sdW1uIGJ5IHRoZSBwcmV2aW91cyBxdWVyeSAodXN1YWxseSBJTlNFUlQpLgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBpbnQKCSAqLwoJcHVibGljICRpbnNlcnRfaWQgPSAwOwoKCS8qKgoJICogTGFzdCBxdWVyeSBtYWRlCgkgKgoJICogQHNpbmNlIDAuNzEKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogQHZhciBhcnJheQoJICovCgl2YXIgJGxhc3RfcXVlcnk7CgoJLyoqCgkgKiBSZXN1bHRzIG9mIHRoZSBsYXN0IHF1ZXJ5IG1hZGUKCSAqCgkgKiBAc2luY2UgMC43MQoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAdmFyIGFycmF5fG51bGwKCSAqLwoJdmFyICRsYXN0X3Jlc3VsdDsKCgkvKioKCSAqIE15U1FMIHJlc3VsdCwgd2hpY2ggaXMgZWl0aGVyIGEgcmVzb3VyY2Ugb3IgYm9vbGVhbi4KCSAqCgkgKiBAc2luY2UgMC43MQoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEB2YXIgbWl4ZWQKCSAqLwoJcHJvdGVjdGVkICRyZXN1bHQ7CgoJLyoqCgkgKiBDYWNoZWQgY29sdW1uIGluZm8sIGZvciBzYW5pdHkgY2hlY2tpbmcgZGF0YSBiZWZvcmUgaW5zZXJ0aW5nCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICogQHZhciBhcnJheQoJICovCglwcm90ZWN0ZWQgJGNvbF9tZXRhID0gYXJyYXkoKTsKCgkvKioKCSAqIENhbGN1bGF0ZWQgY2hhcmFjdGVyIHNldHMgb24gdGFibGVzCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICogQHZhciBhcnJheQoJICovCglwcm90ZWN0ZWQgJHRhYmxlX2NoYXJzZXQgPSBhcnJheSgpOwoKCS8qKgoJICogV2hldGhlciB0ZXh0IGZpZWxkcyBpbiB0aGUgY3VycmVudCBxdWVyeSBuZWVkIHRvIGJlIHNhbml0eSBjaGVja2VkLgoJICoKCSAqIEBzaW5jZSA0LjIuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEB2YXIgYm9vbAoJICovCglwcm90ZWN0ZWQgJGNoZWNrX2N1cnJlbnRfcXVlcnkgPSB0cnVlOwoKCS8qKgoJICogRmxhZyB0byBlbnN1cmUgd2UgZG9uJ3QgcnVuIGludG8gcmVjdXJzaW9uIHByb2JsZW1zIHdoZW4gY2hlY2tpbmcgdGhlIGNvbGxhdGlvbi4KCSAqCgkgKiBAc2luY2UgNC4yLjAKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogQHNlZSB3cGRiOjpjaGVja19zYWZlX2NvbGxhdGlvbigpCgkgKiBAdmFyIGJvb2wKCSAqLwoJcHJpdmF0ZSAkY2hlY2tpbmdfY29sbGF0aW9uID0gZmFsc2U7CgoJLyoqCgkgKiBTYXZlZCBpbmZvIG9uIHRoZSB0YWJsZSBjb2x1bW4KCSAqCgkgKiBAc2luY2UgMC43MQoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEB2YXIgYXJyYXkKCSAqLwoJcHJvdGVjdGVkICRjb2xfaW5mbzsKCgkvKioKCSAqIFNhdmVkIHF1ZXJpZXMgdGhhdCB3ZXJlIGV4ZWN1dGVkCgkgKgoJICogQHNpbmNlIDEuNS4wCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqIEB2YXIgYXJyYXkKCSAqLwoJdmFyICRxdWVyaWVzOwoKCS8qKgoJICogVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXRyeSByZWNvbm5lY3RpbmcgYmVmb3JlIGR5aW5nLgoJICoKCSAqIEBzaW5jZSAzLjkuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEBzZWUgd3BkYjo6Y2hlY2tfY29ubmVjdGlvbigpCgkgKiBAdmFyIGludAoJICovCglwcm90ZWN0ZWQgJHJlY29ubmVjdF9yZXRyaWVzID0gNTsKCgkvKioKCSAqIFdvcmRQcmVzcyB0YWJsZSBwcmVmaXgKCSAqCgkgKiBZb3UgY2FuIHNldCB0aGlzIHRvIGhhdmUgbXVsdGlwbGUgV29yZFByZXNzIGluc3RhbGxhdGlvbnMKCSAqIGluIGEgc2luZ2xlIGRhdGFiYXNlLiBUaGUgc2Vjb25kIHJlYXNvbiBpcyBmb3IgcG9zc2libGUKCSAqIHNlY3VyaXR5IHByZWNhdXRpb25zLgoJICoKCSAqIEBzaW5jZSAyLjUuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkcHJlZml4ID0gJyc7CgoJLyoqCgkgKiBXb3JkUHJlc3MgYmFzZSB0YWJsZSBwcmVmaXguCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJIHB1YmxpYyAkYmFzZV9wcmVmaXg7CgoJLyoqCgkgKiBXaGV0aGVyIHRoZSBkYXRhYmFzZSBxdWVyaWVzIGFyZSByZWFkeSB0byBzdGFydCBleGVjdXRpbmcuCgkgKgoJICogQHNpbmNlIDIuMy4yCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqIEB2YXIgYm9vbAoJICovCgl2YXIgJHJlYWR5ID0gZmFsc2U7CgoJLyoqCgkgKiBCbG9nIElELgoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgaW50CgkgKi8KCXB1YmxpYyAkYmxvZ2lkID0gMDsKCgkvKioKCSAqIFNpdGUgSUQuCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBpbnQKCSAqLwoJcHVibGljICRzaXRlaWQgPSAwOwoKCS8qKgoJICogTGlzdCBvZiBXb3JkUHJlc3MgcGVyLWJsb2cgdGFibGVzCgkgKgoJICogQHNpbmNlIDIuNS4wCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqIEBzZWUgd3BkYjo6dGFibGVzKCkKCSAqIEB2YXIgYXJyYXkKCSAqLwoJdmFyICR0YWJsZXMgPSBhcnJheSggJ3Bvc3RzJywgJ2NvbW1lbnRzJywgJ2xpbmtzJywgJ29wdGlvbnMnLCAncG9zdG1ldGEnLAoJCSd0ZXJtcycsICd0ZXJtX3RheG9ub215JywgJ3Rlcm1fcmVsYXRpb25zaGlwcycsICd0ZXJtbWV0YScsICdjb21tZW50bWV0YScgKTsKCgkvKioKCSAqIExpc3Qgb2YgZGVwcmVjYXRlZCBXb3JkUHJlc3MgdGFibGVzCgkgKgoJICogY2F0ZWdvcmllcywgcG9zdDJjYXQsIGFuZCBsaW5rMmNhdCB3ZXJlIGRlcHJlY2F0ZWQgaW4gMi4zLjAsIGRiIHZlcnNpb24gNTUzOQoJICoKCSAqIEBzaW5jZSAyLjkuMAoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAc2VlIHdwZGI6OnRhYmxlcygpCgkgKiBAdmFyIGFycmF5CgkgKi8KCXZhciAkb2xkX3RhYmxlcyA9IGFycmF5KCAnY2F0ZWdvcmllcycsICdwb3N0MmNhdCcsICdsaW5rMmNhdCcgKTsKCgkvKioKCSAqIExpc3Qgb2YgV29yZFByZXNzIGdsb2JhbCB0YWJsZXMKCSAqCgkgKiBAc2luY2UgMy4wLjAKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogQHNlZSB3cGRiOjp0YWJsZXMoKQoJICogQHZhciBhcnJheQoJICovCgl2YXIgJGdsb2JhbF90YWJsZXMgPSBhcnJheSggJ3VzZXJzJywgJ3VzZXJtZXRhJyApOwoKCS8qKgoJICogTGlzdCBvZiBNdWx0aXNpdGUgZ2xvYmFsIHRhYmxlcwoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAc2VlIHdwZGI6OnRhYmxlcygpCgkgKiBAdmFyIGFycmF5CgkgKi8KCXZhciAkbXNfZ2xvYmFsX3RhYmxlcyA9IGFycmF5KCAnYmxvZ3MnLCAnc2lnbnVwcycsICdzaXRlJywgJ3NpdGVtZXRhJywKCQknc2l0ZWNhdGVnb3JpZXMnLCAncmVnaXN0cmF0aW9uX2xvZycsICdibG9nX3ZlcnNpb25zJyApOwoKCS8qKgoJICogV29yZFByZXNzIENvbW1lbnRzIHRhYmxlCgkgKgoJICogQHNpbmNlIDEuNS4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRjb21tZW50czsKCgkvKioKCSAqIFdvcmRQcmVzcyBDb21tZW50IE1ldGFkYXRhIHRhYmxlCgkgKgoJICogQHNpbmNlIDIuOS4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRjb21tZW50bWV0YTsKCgkvKioKCSAqIFdvcmRQcmVzcyBMaW5rcyB0YWJsZQoJICoKCSAqIEBzaW5jZSAxLjUuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkbGlua3M7CgoJLyoqCgkgKiBXb3JkUHJlc3MgT3B0aW9ucyB0YWJsZQoJICoKCSAqIEBzaW5jZSAxLjUuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkb3B0aW9uczsKCgkvKioKCSAqIFdvcmRQcmVzcyBQb3N0IE1ldGFkYXRhIHRhYmxlCgkgKgoJICogQHNpbmNlIDEuNS4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRwb3N0bWV0YTsKCgkvKioKCSAqIFdvcmRQcmVzcyBQb3N0cyB0YWJsZQoJICoKCSAqIEBzaW5jZSAxLjUuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkcG9zdHM7CgoJLyoqCgkgKiBXb3JkUHJlc3MgVGVybXMgdGFibGUKCSAqCgkgKiBAc2luY2UgMi4zLjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIHN0cmluZwoJICovCglwdWJsaWMgJHRlcm1zOwoKCS8qKgoJICogV29yZFByZXNzIFRlcm0gUmVsYXRpb25zaGlwcyB0YWJsZQoJICoKCSAqIEBzaW5jZSAyLjMuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkdGVybV9yZWxhdGlvbnNoaXBzOwoKCS8qKgoJICogV29yZFByZXNzIFRlcm0gVGF4b25vbXkgdGFibGUKCSAqCgkgKiBAc2luY2UgMi4zLjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIHN0cmluZwoJICovCglwdWJsaWMgJHRlcm1fdGF4b25vbXk7CgoJLyoqCgkgKiBXb3JkUHJlc3MgVGVybSBNZXRhIHRhYmxlLgoJICoKCSAqIEBzaW5jZSA0LjQuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkdGVybW1ldGE7CgoJLyoKCSAqIEdsb2JhbCBhbmQgTXVsdGlzaXRlIHRhYmxlcwoJICovCgoJLyoqCgkgKiBXb3JkUHJlc3MgVXNlciBNZXRhZGF0YSB0YWJsZQoJICoKCSAqIEBzaW5jZSAyLjMuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkdXNlcm1ldGE7CgoJLyoqCgkgKiBXb3JkUHJlc3MgVXNlcnMgdGFibGUKCSAqCgkgKiBAc2luY2UgMS41LjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIHN0cmluZwoJICovCglwdWJsaWMgJHVzZXJzOwoKCS8qKgoJICogTXVsdGlzaXRlIEJsb2dzIHRhYmxlCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRibG9nczsKCgkvKioKCSAqIE11bHRpc2l0ZSBCbG9nIFZlcnNpb25zIHRhYmxlCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRibG9nX3ZlcnNpb25zOwoKCS8qKgoJICogTXVsdGlzaXRlIFJlZ2lzdHJhdGlvbiBMb2cgdGFibGUKCSAqCgkgKiBAc2luY2UgMy4wLjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIHN0cmluZwoJICovCglwdWJsaWMgJHJlZ2lzdHJhdGlvbl9sb2c7CgoJLyoqCgkgKiBNdWx0aXNpdGUgU2lnbnVwcyB0YWJsZQoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkc2lnbnVwczsKCgkvKioKCSAqIE11bHRpc2l0ZSBTaXRlcyB0YWJsZQoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkc2l0ZTsKCgkvKioKCSAqIE11bHRpc2l0ZSBTaXRld2lkZSBUZXJtcyB0YWJsZQoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkc2l0ZWNhdGVnb3JpZXM7CgoJLyoqCgkgKiBNdWx0aXNpdGUgU2l0ZSBNZXRhZGF0YSB0YWJsZQoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkc2l0ZW1ldGE7CgoJLyoqCgkgKiBGb3JtYXQgc3BlY2lmaWVycyBmb3IgREIgY29sdW1ucy4gQ29sdW1ucyBub3QgbGlzdGVkIGhlcmUgZGVmYXVsdCB0byAlcy4gSW5pdGlhbGl6ZWQgZHVyaW5nIFdQIGxvYWQuCgkgKgoJICogS2V5cyBhcmUgY29sdW1uIG5hbWVzLCB2YWx1ZXMgYXJlIGZvcm1hdCB0eXBlczogJ0lEJyA9PiAnJWQnCgkgKgoJICogQHNpbmNlIDIuOC4wCgkgKiBAc2VlIHdwZGI6OnByZXBhcmUoKQoJICogQHNlZSB3cGRiOjppbnNlcnQoKQoJICogQHNlZSB3cGRiOjp1cGRhdGUoKQoJICogQHNlZSB3cGRiOjpkZWxldGUoKQoJICogQHNlZSB3cF9zZXRfd3BkYl92YXJzKCkKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIGFycmF5CgkgKi8KCXB1YmxpYyAkZmllbGRfdHlwZXMgPSBhcnJheSgpOwoKCS8qKgoJICogRGF0YWJhc2UgdGFibGUgY29sdW1ucyBjaGFyc2V0CgkgKgoJICogQHNpbmNlIDIuMi4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRjaGFyc2V0OwoKCS8qKgoJICogRGF0YWJhc2UgdGFibGUgY29sdW1ucyBjb2xsYXRlCgkgKgoJICogQHNpbmNlIDIuMi4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICogQHZhciBzdHJpbmcKCSAqLwoJcHVibGljICRjb2xsYXRlOwoKCS8qKgoJICogRGF0YWJhc2UgVXNlcm5hbWUKCSAqCgkgKiBAc2luY2UgMi45LjAKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKiBAdmFyIHN0cmluZwoJICovCglwcm90ZWN0ZWQgJGRidXNlcjsKCgkvKioKCSAqIERhdGFiYXNlIFBhc3N3b3JkCgkgKgoJICogQHNpbmNlIDMuMS4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICogQHZhciBzdHJpbmcKCSAqLwoJcHJvdGVjdGVkICRkYnBhc3N3b3JkOwoKCS8qKgoJICogRGF0YWJhc2UgTmFtZQoJICoKCSAqIEBzaW5jZSAzLjEuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXByb3RlY3RlZCAkZGJuYW1lOwoKCS8qKgoJICogRGF0YWJhc2UgSG9zdAoJICoKCSAqIEBzaW5jZSAzLjEuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXByb3RlY3RlZCAkZGJob3N0OwoKCS8qKgoJICogRGF0YWJhc2UgSGFuZGxlCgkgKgoJICogQHNpbmNlIDAuNzEKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKiBAdmFyIHN0cmluZwoJICovCglwcm90ZWN0ZWQgJGRiaDsKCgkvKioKCSAqIEEgdGV4dHVhbCBkZXNjcmlwdGlvbiBvZiB0aGUgbGFzdCBxdWVyeS9nZXRfcm93L2dldF92YXIgY2FsbAoJICoKCSAqIEBzaW5jZSAzLjAuMAoJICogQGFjY2VzcyBwdWJsaWMKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXB1YmxpYyAkZnVuY19jYWxsOwoKCS8qKgoJICogV2hldGhlciBNeVNRTCBpcyB1c2VkIGFzIHRoZSBkYXRhYmFzZSBlbmdpbmUuCgkgKgoJICogU2V0IGluIFdQREI6OmRiX2Nvbm5lY3QoKSB0byB0cnVlLCBieSBkZWZhdWx0LiBUaGlzIGlzIHVzZWQgd2hlbiBjaGVja2luZwoJICogYWdhaW5zdCB0aGUgcmVxdWlyZWQgTXlTUUwgdmVyc2lvbiBmb3IgV29yZFByZXNzLiBOb3JtYWxseSwgYSByZXBsYWNlbWVudAoJICogZGF0YWJhc2UgZHJvcC1pbiAoZGIucGhwKSB3aWxsIHNraXAgdGhlc2UgY2hlY2tzLCBidXQgc2V0dGluZyB0aGlzIHRvIHRydWUKCSAqIHdpbGwgZm9yY2UgdGhlIGNoZWNrcyB0byBvY2N1ci4KCSAqCgkgKiBAc2luY2UgMy4zLjAKCSAqIEBhY2Nlc3MgcHVibGljCgkgKiBAdmFyIGJvb2wKCSAqLwoJcHVibGljICRpc19teXNxbCA9IG51bGw7CgoJLyoqCgkgKiBBIGxpc3Qgb2YgaW5jb21wYXRpYmxlIFNRTCBtb2Rlcy4KCSAqCgkgKiBAc2luY2UgMy45LjAKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKiBAdmFyIGFycmF5CgkgKi8KCXByb3RlY3RlZCAkaW5jb21wYXRpYmxlX21vZGVzID0gYXJyYXkoICdOT19aRVJPX0RBVEUnLCAnT05MWV9GVUxMX0dST1VQX0JZJywKCQknU1RSSUNUX1RSQU5TX1RBQkxFUycsICdTVFJJQ1RfQUxMX1RBQkxFUycsICdUUkFESVRJT05BTCcgKTsKCgkvKioKCSAqIFdoZXRoZXIgdG8gdXNlIG15c3FsaSBvdmVyIG15c3FsLgoJICoKCSAqIEBzaW5jZSAzLjkuMAoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBAdmFyIGJvb2wKCSAqLwoJcHJpdmF0ZSAkdXNlX215c3FsaSA9IGZhbHNlOwoKCS8qKgoJICogV2hldGhlciB3ZSd2ZSBtYW5hZ2VkIHRvIHN1Y2Nlc3NmdWxseSBjb25uZWN0IGF0IHNvbWUgcG9pbnQKCSAqCgkgKiBAc2luY2UgMy45LjAKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogQHZhciBib29sCgkgKi8KCXByaXZhdGUgJGhhc19jb25uZWN0ZWQgPSBmYWxzZTsKCgkvKioKCSAqIENvbm5lY3RzIHRvIHRoZSBkYXRhYmFzZSBzZXJ2ZXIgYW5kIHNlbGVjdHMgYSBkYXRhYmFzZQoJICoKCSAqIFBIUDUgc3R5bGUgY29uc3RydWN0b3IgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBQSFA1LiBEb2VzCgkgKiB0aGUgYWN0dWFsIHNldHRpbmcgdXAgb2YgdGhlIGNsYXNzIHByb3BlcnRpZXMgYW5kIGNvbm5lY3Rpb24KCSAqIHRvIHRoZSBkYXRhYmFzZS4KCSAqCgkgKiBAbGluayBodHRwczovL2NvcmUudHJhYy53b3JkcHJlc3Mub3JnL3RpY2tldC8zMzU0CgkgKiBAc2luY2UgMi4wLjgKCSAqCgkgKiBAZ2xvYmFsIHN0cmluZyAkd3BfdmVyc2lvbgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGRidXNlciAgICAgTXlTUUwgZGF0YWJhc2UgdXNlcgoJICogQHBhcmFtIHN0cmluZyAkZGJwYXNzd29yZCBNeVNRTCBkYXRhYmFzZSBwYXNzd29yZAoJICogQHBhcmFtIHN0cmluZyAkZGJuYW1lICAgICBNeVNRTCBkYXRhYmFzZSBuYW1lCgkgKiBAcGFyYW0gc3RyaW5nICRkYmhvc3QgICAgIE15U1FMIGRhdGFiYXNlIGhvc3QKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCAkZGJ1c2VyLCAkZGJwYXNzd29yZCwgJGRibmFtZSwgJGRiaG9zdCApIHsKCQlyZWdpc3Rlcl9zaHV0ZG93bl9mdW5jdGlvbiggYXJyYXkoICR0aGlzLCAnX19kZXN0cnVjdCcgKSApOwoKCQlpZiAoIFdQX0RFQlVHICYmIFdQX0RFQlVHX0RJU1BMQVkgKQoJCQkkdGhpcy0+c2hvd19lcnJvcnMoKTsKCgkJLyogVXNlIGV4dC9teXNxbGkgaWYgaXQgZXhpc3RzIGFuZDoKCQkgKiAgLSBXUF9VU0VfRVhUX01ZU1FMIGlzIGRlZmluZWQgYXMgZmFsc2UsIG9yCgkJICogIC0gV2UgYXJlIGEgZGV2ZWxvcG1lbnQgdmVyc2lvbiBvZiBXb3JkUHJlc3MsIG9yCgkJICogIC0gV2UgYXJlIHJ1bm5pbmcgUEhQIDUuNSBvciBncmVhdGVyLCBvcgoJCSAqICAtIGV4dC9teXNxbCBpcyBub3QgbG9hZGVkLgoJCSAqLwoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnbXlzcWxpX2Nvbm5lY3QnICkgKSB7CgkJCWlmICggZGVmaW5lZCggJ1dQX1VTRV9FWFRfTVlTUUwnICkgKSB7CgkJCQkkdGhpcy0+dXNlX215c3FsaSA9ICEgV1BfVVNFX0VYVF9NWVNRTDsKCQkJfSBlbHNlaWYgKCB2ZXJzaW9uX2NvbXBhcmUoIHBocHZlcnNpb24oKSwgJzUuNScsICc+PScgKSB8fCAhIGZ1bmN0aW9uX2V4aXN0cyggJ215c3FsX2Nvbm5lY3QnICkgKSB7CgkJCQkkdGhpcy0+dXNlX215c3FsaSA9IHRydWU7CgkJCX0gZWxzZWlmICggZmFsc2UgIT09IHN0cnBvcyggJEdMT0JBTFNbJ3dwX3ZlcnNpb24nXSwgJy0nICkgKSB7CgkJCQkkdGhpcy0+dXNlX215c3FsaSA9IHRydWU7CgkJCX0KCQl9CgoJCSR0aGlzLT5kYnVzZXIgPSAkZGJ1c2VyOwoJCSR0aGlzLT5kYnBhc3N3b3JkID0gJGRicGFzc3dvcmQ7CgkJJHRoaXMtPmRibmFtZSA9ICRkYm5hbWU7CgkJJHRoaXMtPmRiaG9zdCA9ICRkYmhvc3Q7CgoJCS8vIHdwLWNvbmZpZy5waHAgY3JlYXRpb24gd2lsbCBtYW51YWxseSBjb25uZWN0IHdoZW4gcmVhZHkuCgkJaWYgKCBkZWZpbmVkKCAnV1BfU0VUVVBfQ09ORklHJyApICkgewoJCQlyZXR1cm47CgkJfQoKCQkkdGhpcy0+ZGJfY29ubmVjdCgpOwoJfQoKCS8qKgoJICogUEhQNSBzdHlsZSBkZXN0cnVjdG9yIGFuZCB3aWxsIHJ1biB3aGVuIGRhdGFiYXNlIG9iamVjdCBpcyBkZXN0cm95ZWQuCgkgKgoJICogQHNlZSB3cGRiOjpfX2NvbnN0cnVjdCgpCgkgKiBAc2luY2UgMi4wLjgKCSAqIEByZXR1cm4gdHJ1ZQoJICovCglwdWJsaWMgZnVuY3Rpb24gX19kZXN0cnVjdCgpIHsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvKioKCSAqIFBIUDUgc3R5bGUgbWFnaWMgZ2V0dGVyLCB1c2VkIHRvIGxhenktbG9hZCBleHBlbnNpdmUgZGF0YS4KCSAqCgkgKiBAc2luY2UgMy41LjAKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRuYW1lIFRoZSBwcml2YXRlIG1lbWJlciB0byBnZXQsIGFuZCBvcHRpb25hbGx5IHByb2Nlc3MKCSAqIEByZXR1cm4gbWl4ZWQgVGhlIHByaXZhdGUgbWVtYmVyCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2dldCggJG5hbWUgKSB7CgkJaWYgKCAnY29sX2luZm8nID09PSAkbmFtZSApCgkJCSR0aGlzLT5sb2FkX2NvbF9pbmZvKCk7CgoJCXJldHVybiAkdGhpcy0+JG5hbWU7Cgl9CgoJLyoqCgkgKiBNYWdpYyBmdW5jdGlvbiwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgoJICoKCSAqIEBzaW5jZSAzLjUuMAoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgIFRoZSBwcml2YXRlIG1lbWJlciB0byBzZXQKCSAqIEBwYXJhbSBtaXhlZCAgJHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9fc2V0KCAkbmFtZSwgJHZhbHVlICkgewoJCSRwcm90ZWN0ZWRfbWVtYmVycyA9IGFycmF5KAoJCQknY29sX21ldGEnLAoJCQkndGFibGVfY2hhcnNldCcsCgkJCSdjaGVja19jdXJyZW50X3F1ZXJ5JywKCQkpOwoJCWlmICggIGluX2FycmF5KCAkbmFtZSwgJHByb3RlY3RlZF9tZW1iZXJzLCB0cnVlICkgKSB7CgkJCXJldHVybjsKCQl9CgkJJHRoaXMtPiRuYW1lID0gJHZhbHVlOwoJfQoKCS8qKgoJICogTWFnaWMgZnVuY3Rpb24sIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KCSAqCgkgKiBAc2luY2UgMy41LjAKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRuYW1lICBUaGUgcHJpdmF0ZSBtZW1iZXIgdG8gY2hlY2sKCSAqCgkgKiBAcmV0dXJuIGJvb2wgSWYgdGhlIG1lbWJlciBpcyBzZXQgb3Igbm90CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBfX2lzc2V0KCAkbmFtZSApIHsKCQlyZXR1cm4gaXNzZXQoICR0aGlzLT4kbmFtZSApOwoJfQoKCS8qKgoJICogTWFnaWMgZnVuY3Rpb24sIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KCSAqCgkgKiBAc2luY2UgMy41LjAKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRuYW1lICBUaGUgcHJpdmF0ZSBtZW1iZXIgdG8gdW5zZXQKCSAqLwoJcHVibGljIGZ1bmN0aW9uIF9fdW5zZXQoICRuYW1lICkgewoJCXVuc2V0KCAkdGhpcy0+JG5hbWUgKTsKCX0KCgkvKioKCSAqIFNldCAkdGhpcy0+Y2hhcnNldCBhbmQgJHRoaXMtPmNvbGxhdGUKCSAqCgkgKiBAc2luY2UgMy4xLjAKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGluaXRfY2hhcnNldCgpIHsKCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cygnaXNfbXVsdGlzaXRlJykgJiYgaXNfbXVsdGlzaXRlKCkgKSB7CgkJCSR0aGlzLT5jaGFyc2V0ID0gJ3V0ZjgnOwoJCQlpZiAoIGRlZmluZWQoICdEQl9DT0xMQVRFJyApICYmIERCX0NPTExBVEUgKSB7CgkJCQkkdGhpcy0+Y29sbGF0ZSA9IERCX0NPTExBVEU7CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy0+Y29sbGF0ZSA9ICd1dGY4X2dlbmVyYWxfY2knOwoJCQl9CgkJfSBlbHNlaWYgKCBkZWZpbmVkKCAnREJfQ09MTEFURScgKSApIHsKCQkJJHRoaXMtPmNvbGxhdGUgPSBEQl9DT0xMQVRFOwoJCX0KCgkJaWYgKCBkZWZpbmVkKCAnREJfQ0hBUlNFVCcgKSApIHsKCQkJJHRoaXMtPmNoYXJzZXQgPSBEQl9DSEFSU0VUOwoJCX0KCgkJaWYgKCAoICR0aGlzLT51c2VfbXlzcWxpICYmICEgKCAkdGhpcy0+ZGJoIGluc3RhbmNlb2YgbXlzcWxpICkgKSB8fCBlbXB0eSggJHRoaXMtPmRiaCApICkgewoJCQlyZXR1cm47CgkJfQoKCQlpZiAoICd1dGY4JyA9PT0gJHRoaXMtPmNoYXJzZXQgJiYgJHRoaXMtPmhhc19jYXAoICd1dGY4bWI0JyApICkgewoJCQkkdGhpcy0+Y2hhcnNldCA9ICd1dGY4bWI0JzsKCQl9CgoJCWlmICggJ3V0ZjhtYjQnID09PSAkdGhpcy0+Y2hhcnNldCAmJiAoICEgJHRoaXMtPmNvbGxhdGUgfHwgc3RyaXBvcyggJHRoaXMtPmNvbGxhdGUsICd1dGY4XycgKSA9PT0gMCApICkgewoJCQkkdGhpcy0+Y29sbGF0ZSA9ICd1dGY4bWI0X3VuaWNvZGVfY2knOwoJCX0KCX0KCQoJCgkvLyBCYWNrdXBCdWRkeSBtb2RpZmllZCB0byBzdG9yZSBjaGFydHNldCBhbmQgY29sbGF0ZSBpbiBjbGFzcy4KCS8qKgoJICogU2V0cyB0aGUgY29ubmVjdGlvbidzIGNoYXJhY3RlciBzZXQuCgkgKgoJICogQHNpbmNlIDMuMS4wCgkgKgoJICogQHBhcmFtIHJlc291cmNlICRkYmggICAgIFRoZSByZXNvdXJjZSBnaXZlbiBieSBteXNxbF9jb25uZWN0CgkgKiBAcGFyYW0gc3RyaW5nICAgJGNoYXJzZXQgT3B0aW9uYWwuIFRoZSBjaGFyYWN0ZXIgc2V0LiBEZWZhdWx0IG51bGwuCgkgKiBAcGFyYW0gc3RyaW5nICAgJGNvbGxhdGUgT3B0aW9uYWwuIFRoZSBjb2xsYXRpb24uIERlZmF1bHQgbnVsbC4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldF9jaGFyc2V0KCAkZGJoLCAkY2hhcnNldCA9IG51bGwsICRjb2xsYXRlID0gbnVsbCApIHsKCQlpZiAoICEgaXNzZXQoICRjaGFyc2V0ICkgKQoJCQkkY2hhcnNldCA9ICR0aGlzLT5jaGFyc2V0OwoJCWlmICggISBpc3NldCggJGNvbGxhdGUgKSApCgkJCSRjb2xsYXRlID0gJHRoaXMtPmNvbGxhdGU7CgkJaWYgKCAkdGhpcy0+aGFzX2NhcCggJ2NvbGxhdGlvbicgKSAmJiAhIGVtcHR5KCAkY2hhcnNldCApICkgewoJCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdteXNxbGlfc2V0X2NoYXJzZXQnICkgJiYgJHRoaXMtPmhhc19jYXAoICdzZXRfY2hhcnNldCcgKSApIHsKCQkJCQlteXNxbGlfc2V0X2NoYXJzZXQoICRkYmgsICRjaGFyc2V0ICk7CgkJCQl9IGVsc2UgewoJCQkJCSRxdWVyeSA9ICR0aGlzLT5wcmVwYXJlKCAnU0VUIE5BTUVTICVzJywgJGNoYXJzZXQgKTsKCQkJCQlpZiAoICEgZW1wdHkoICRjb2xsYXRlICkgKQoJCQkJCQkkcXVlcnkgLj0gJHRoaXMtPnByZXBhcmUoICcgQ09MTEFURSAlcycsICRjb2xsYXRlICk7CgkJCQkJbXlzcWxpX3F1ZXJ5KCAkZGJoLCAkcXVlcnkgKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnbXlzcWxfc2V0X2NoYXJzZXQnICkgJiYgJHRoaXMtPmhhc19jYXAoICdzZXRfY2hhcnNldCcgKSApIHsKCQkJCQlteXNxbF9zZXRfY2hhcnNldCggJGNoYXJzZXQsICRkYmggKTsKCQkJCX0gZWxzZSB7CgkJCQkJJHF1ZXJ5ID0gJHRoaXMtPnByZXBhcmUoICdTRVQgTkFNRVMgJXMnLCAkY2hhcnNldCApOwoJCQkJCWlmICggISBlbXB0eSggJGNvbGxhdGUgKSApCgkJCQkJCSRxdWVyeSAuPSAkdGhpcy0+cHJlcGFyZSggJyBDT0xMQVRFICVzJywgJGNvbGxhdGUgKTsKCQkJCQlteXNxbF9xdWVyeSggJHF1ZXJ5LCAkZGJoICk7CgkJCQl9CgkJCX0KCQl9CgkJCgkJJHRoaXMtPmNoYXJzZXQgPSAkY2hhcnNldDsKCQkkdGhpcy0+Y29sbGF0ZSA9ICRjb2xsYXRlOwoJfQoKCS8qKgoJICogQ2hhbmdlIHRoZSBjdXJyZW50IFNRTCBtb2RlLCBhbmQgZW5zdXJlIGl0cyBXb3JkUHJlc3MgY29tcGF0aWJpbGl0eS4KCSAqCgkgKiBJZiBubyBtb2RlcyBhcmUgcGFzc2VkLCBpdCB3aWxsIGVuc3VyZSB0aGUgY3VycmVudCBNeVNRTCBzZXJ2ZXIKCSAqIG1vZGVzIGFyZSBjb21wYXRpYmxlLgoJICoKCSAqIEBzaW5jZSAzLjkuMAoJICoKCSAqIEBwYXJhbSBhcnJheSAkbW9kZXMgT3B0aW9uYWwuIEEgbGlzdCBvZiBTUUwgbW9kZXMgdG8gc2V0LgoJICovCglwdWJsaWMgZnVuY3Rpb24gc2V0X3NxbF9tb2RlKCAkbW9kZXMgPSBhcnJheSgpICkgewoJCWlmICggZW1wdHkoICRtb2RlcyApICkgewoJCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkJJHJlcyA9IG15c3FsaV9xdWVyeSggJHRoaXMtPmRiaCwgJ1NFTEVDVCBAQFNFU1NJT04uc3FsX21vZGUnICk7CgkJCX0gZWxzZSB7CgkJCQkkcmVzID0gbXlzcWxfcXVlcnkoICdTRUxFQ1QgQEBTRVNTSU9OLnNxbF9tb2RlJywgJHRoaXMtPmRiaCApOwoJCQl9CgoJCQlpZiAoIGVtcHR5KCAkcmVzICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCQkkbW9kZXNfYXJyYXkgPSBteXNxbGlfZmV0Y2hfYXJyYXkoICRyZXMgKTsKCQkJCWlmICggZW1wdHkoICRtb2Rlc19hcnJheVswXSApICkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJCSRtb2Rlc19zdHIgPSAkbW9kZXNfYXJyYXlbMF07CgkJCX0gZWxzZSB7CgkJCQkkbW9kZXNfc3RyID0gbXlzcWxfcmVzdWx0KCAkcmVzLCAwICk7CgkJCX0KCgkJCWlmICggZW1wdHkoICRtb2Rlc19zdHIgKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJJG1vZGVzID0gZXhwbG9kZSggJywnLCAkbW9kZXNfc3RyICk7CgkJfQoKCQkkbW9kZXMgPSBhcnJheV9jaGFuZ2Vfa2V5X2Nhc2UoICRtb2RlcywgQ0FTRV9VUFBFUiApOwoKCQkvKioKCQkgKiBGaWx0ZXIgdGhlIGxpc3Qgb2YgaW5jb21wYXRpYmxlIFNRTCBtb2RlcyB0byBleGNsdWRlLgoJCSAqCgkJICogQHNpbmNlIDMuOS4wCgkJICoKCQkgKiBAcGFyYW0gYXJyYXkgJGluY29tcGF0aWJsZV9tb2RlcyBBbiBhcnJheSBvZiBpbmNvbXBhdGlibGUgbW9kZXMuCgkJICovCgkJJGluY29tcGF0aWJsZV9tb2RlcyA9IChhcnJheSkgYXBwbHlfZmlsdGVycyggJ2luY29tcGF0aWJsZV9zcWxfbW9kZXMnLCAkdGhpcy0+aW5jb21wYXRpYmxlX21vZGVzICk7CgoJCWZvcmVhY2ggKCAkbW9kZXMgYXMgJGkgPT4gJG1vZGUgKSB7CgkJCWlmICggaW5fYXJyYXkoICRtb2RlLCAkaW5jb21wYXRpYmxlX21vZGVzICkgKSB7CgkJCQl1bnNldCggJG1vZGVzWyAkaSBdICk7CgkJCX0KCQl9CgoJCSRtb2Rlc19zdHIgPSBpbXBsb2RlKCAnLCcsICRtb2RlcyApOwoKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQlteXNxbGlfcXVlcnkoICR0aGlzLT5kYmgsICJTRVQgU0VTU0lPTiBzcWxfbW9kZT0nJG1vZGVzX3N0ciciICk7CgkJfSBlbHNlIHsKCQkJbXlzcWxfcXVlcnkoICJTRVQgU0VTU0lPTiBzcWxfbW9kZT0nJG1vZGVzX3N0ciciLCAkdGhpcy0+ZGJoICk7CgkJfQoJfQoKCS8qKgoJICogU2V0cyB0aGUgdGFibGUgcHJlZml4IGZvciB0aGUgV29yZFByZXNzIHRhYmxlcy4KCSAqCgkgKiBAc2luY2UgMi41LjAKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRwcmVmaXggICAgICAgICAgQWxwaGFudW1lcmljIG5hbWUgZm9yIHRoZSBuZXcgcHJlZml4LgoJICogQHBhcmFtIGJvb2wgICAkc2V0X3RhYmxlX25hbWVzIE9wdGlvbmFsLiBXaGV0aGVyIHRoZSB0YWJsZSBuYW1lcywgZS5nLiB3cGRiOjokcG9zdHMsIHNob3VsZCBiZSB1cGRhdGVkIG9yIG5vdC4KCSAqIEByZXR1cm4gc3RyaW5nfFdQX0Vycm9yIE9sZCBwcmVmaXggb3IgV1BfRXJyb3Igb24gZXJyb3IKCSAqLwoJcHVibGljIGZ1bmN0aW9uIHNldF9wcmVmaXgoICRwcmVmaXgsICRzZXRfdGFibGVfbmFtZXMgPSB0cnVlICkgewoKCQlpZiAoIHByZWdfbWF0Y2goICd8W15hLXowLTlfXXxpJywgJHByZWZpeCApICkKCQkJcmV0dXJuIG5ldyBXUF9FcnJvcignaW52YWxpZF9kYl9wcmVmaXgnLCAnSW52YWxpZCBkYXRhYmFzZSBwcmVmaXgnICk7CgoJCSRvbGRfcHJlZml4ID0gaXNfbXVsdGlzaXRlKCkgPyAnJyA6ICRwcmVmaXg7CgoJCWlmICggaXNzZXQoICR0aGlzLT5iYXNlX3ByZWZpeCApICkKCQkJJG9sZF9wcmVmaXggPSAkdGhpcy0+YmFzZV9wcmVmaXg7CgoJCSR0aGlzLT5iYXNlX3ByZWZpeCA9ICRwcmVmaXg7CgoJCWlmICggJHNldF90YWJsZV9uYW1lcyApIHsKCQkJZm9yZWFjaCAoICR0aGlzLT50YWJsZXMoICdnbG9iYWwnICkgYXMgJHRhYmxlID0+ICRwcmVmaXhlZF90YWJsZSApCgkJCQkkdGhpcy0+JHRhYmxlID0gJHByZWZpeGVkX3RhYmxlOwoKCQkJaWYgKCBpc19tdWx0aXNpdGUoKSAmJiBlbXB0eSggJHRoaXMtPmJsb2dpZCApICkKCQkJCXJldHVybiAkb2xkX3ByZWZpeDsKCgkJCSR0aGlzLT5wcmVmaXggPSAkdGhpcy0+Z2V0X2Jsb2dfcHJlZml4KCk7CgoJCQlmb3JlYWNoICggJHRoaXMtPnRhYmxlcyggJ2Jsb2cnICkgYXMgJHRhYmxlID0+ICRwcmVmaXhlZF90YWJsZSApCgkJCQkkdGhpcy0+JHRhYmxlID0gJHByZWZpeGVkX3RhYmxlOwoKCQkJZm9yZWFjaCAoICR0aGlzLT50YWJsZXMoICdvbGQnICkgYXMgJHRhYmxlID0+ICRwcmVmaXhlZF90YWJsZSApCgkJCQkkdGhpcy0+JHRhYmxlID0gJHByZWZpeGVkX3RhYmxlOwoJCX0KCQlyZXR1cm4gJG9sZF9wcmVmaXg7Cgl9CgoJLyoqCgkgKiBTZXRzIGJsb2cgaWQuCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEBwYXJhbSBpbnQgJGJsb2dfaWQKCSAqIEBwYXJhbSBpbnQgJHNpdGVfaWQgT3B0aW9uYWwuCgkgKiBAcmV0dXJuIGludCBwcmV2aW91cyBibG9nIGlkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZXRfYmxvZ19pZCggJGJsb2dfaWQsICRzaXRlX2lkID0gMCApIHsKCQlpZiAoICEgZW1wdHkoICRzaXRlX2lkICkgKQoJCQkkdGhpcy0+c2l0ZWlkID0gJHNpdGVfaWQ7CgoJCSRvbGRfYmxvZ19pZCAgPSAkdGhpcy0+YmxvZ2lkOwoJCSR0aGlzLT5ibG9naWQgPSAkYmxvZ19pZDsKCgkJJHRoaXMtPnByZWZpeCA9ICR0aGlzLT5nZXRfYmxvZ19wcmVmaXgoKTsKCgkJZm9yZWFjaCAoICR0aGlzLT50YWJsZXMoICdibG9nJyApIGFzICR0YWJsZSA9PiAkcHJlZml4ZWRfdGFibGUgKQoJCQkkdGhpcy0+JHRhYmxlID0gJHByZWZpeGVkX3RhYmxlOwoKCQlmb3JlYWNoICggJHRoaXMtPnRhYmxlcyggJ29sZCcgKSBhcyAkdGFibGUgPT4gJHByZWZpeGVkX3RhYmxlICkKCQkJJHRoaXMtPiR0YWJsZSA9ICRwcmVmaXhlZF90YWJsZTsKCgkJcmV0dXJuICRvbGRfYmxvZ19pZDsKCX0KCgkvKioKCSAqIEdldHMgYmxvZyBwcmVmaXguCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAcGFyYW0gaW50ICRibG9nX2lkIE9wdGlvbmFsLgoJICogQHJldHVybiBzdHJpbmcgQmxvZyBwcmVmaXguCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRfYmxvZ19wcmVmaXgoICRibG9nX2lkID0gbnVsbCApIHsKCQlpZiAoIGlzX211bHRpc2l0ZSgpICkgewoJCQlpZiAoIG51bGwgPT09ICRibG9nX2lkICkKCQkJCSRibG9nX2lkID0gJHRoaXMtPmJsb2dpZDsKCQkJJGJsb2dfaWQgPSAoaW50KSAkYmxvZ19pZDsKCQkJaWYgKCBkZWZpbmVkKCAnTVVMVElTSVRFJyApICYmICggMCA9PSAkYmxvZ19pZCB8fCAxID09ICRibG9nX2lkICkgKQoJCQkJcmV0dXJuICR0aGlzLT5iYXNlX3ByZWZpeDsKCQkJZWxzZQoJCQkJcmV0dXJuICR0aGlzLT5iYXNlX3ByZWZpeCAuICRibG9nX2lkIC4gJ18nOwoJCX0gZWxzZSB7CgkJCXJldHVybiAkdGhpcy0+YmFzZV9wcmVmaXg7CgkJfQoJfQoKCS8qKgoJICogUmV0dXJucyBhbiBhcnJheSBvZiBXb3JkUHJlc3MgdGFibGVzLgoJICoKCSAqIEFsc28gYWxsb3dzIGZvciB0aGUgQ1VTVE9NX1VTRVJfVEFCTEUgYW5kIENVU1RPTV9VU0VSX01FVEFfVEFCTEUgdG8KCSAqIG92ZXJyaWRlIHRoZSBXb3JkUHJlc3MgdXNlcnMgYW5kIHVzZXJtZXRhIHRhYmxlcyB0aGF0IHdvdWxkIG90aGVyd2lzZQoJICogYmUgZGV0ZXJtaW5lZCBieSB0aGUgcHJlZml4LgoJICoKCSAqIFRoZSBzY29wZSBhcmd1bWVudCBjYW4gdGFrZSBvbmUgb2YgdGhlIGZvbGxvd2luZzoKCSAqCgkgKiAnYWxsJyAtIHJldHVybnMgJ2FsbCcgYW5kICdnbG9iYWwnIHRhYmxlcy4gTm8gb2xkIHRhYmxlcyBhcmUgcmV0dXJuZWQuCgkgKiAnYmxvZycgLSByZXR1cm5zIHRoZSBibG9nLWxldmVsIHRhYmxlcyBmb3IgdGhlIHF1ZXJpZWQgYmxvZy4KCSAqICdnbG9iYWwnIC0gcmV0dXJucyB0aGUgZ2xvYmFsIHRhYmxlcyBmb3IgdGhlIGluc3RhbGxhdGlvbiwgcmV0dXJuaW5nIG11bHRpc2l0ZSB0YWJsZXMgb25seSBpZiBydW5uaW5nIG11bHRpc2l0ZS4KCSAqICdtc19nbG9iYWwnIC0gcmV0dXJucyB0aGUgbXVsdGlzaXRlIGdsb2JhbCB0YWJsZXMsIHJlZ2FyZGxlc3MgaWYgY3VycmVudCBpbnN0YWxsYXRpb24gaXMgbXVsdGlzaXRlLgoJICogJ29sZCcgLSByZXR1cm5zIHRhYmxlcyB3aGljaCBhcmUgZGVwcmVjYXRlZC4KCSAqCgkgKiBAc2luY2UgMy4wLjAKCSAqIEB1c2VzIHdwZGI6OiR0YWJsZXMKCSAqIEB1c2VzIHdwZGI6OiRvbGRfdGFibGVzCgkgKiBAdXNlcyB3cGRiOjokZ2xvYmFsX3RhYmxlcwoJICogQHVzZXMgd3BkYjo6JG1zX2dsb2JhbF90YWJsZXMKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRzY29wZSAgIE9wdGlvbmFsLiBDYW4gYmUgYWxsLCBnbG9iYWwsIG1zX2dsb2JhbCwgYmxvZywgb3Igb2xkIHRhYmxlcy4gRGVmYXVsdHMgdG8gYWxsLgoJICogQHBhcmFtIGJvb2wgICAkcHJlZml4ICBPcHRpb25hbC4gV2hldGhlciB0byBpbmNsdWRlIHRhYmxlIHByZWZpeGVzLiBEZWZhdWx0IHRydWUuIElmIGJsb2cKCSAqICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4IGlzIHJlcXVlc3RlZCwgdGhlbiB0aGUgY3VzdG9tIHVzZXJzIGFuZCB1c2VybWV0YSB0YWJsZXMgd2lsbCBiZSBtYXBwZWQuCgkgKiBAcGFyYW0gaW50ICAgICRibG9nX2lkIE9wdGlvbmFsLiBUaGUgYmxvZ19pZCB0byBwcmVmaXguIERlZmF1bHRzIHRvIHdwZGI6OiRibG9naWQuIFVzZWQgb25seSB3aGVuIHByZWZpeCBpcyByZXF1ZXN0ZWQuCgkgKiBAcmV0dXJuIGFycmF5IFRhYmxlIG5hbWVzLiBXaGVuIGEgcHJlZml4IGlzIHJlcXVlc3RlZCwgdGhlIGtleSBpcyB0aGUgdW5wcmVmaXhlZCB0YWJsZSBuYW1lLgoJICovCglwdWJsaWMgZnVuY3Rpb24gdGFibGVzKCAkc2NvcGUgPSAnYWxsJywgJHByZWZpeCA9IHRydWUsICRibG9nX2lkID0gMCApIHsKCQlzd2l0Y2ggKCAkc2NvcGUgKSB7CgkJCWNhc2UgJ2FsbCcgOgoJCQkJJHRhYmxlcyA9IGFycmF5X21lcmdlKCAkdGhpcy0+Z2xvYmFsX3RhYmxlcywgJHRoaXMtPnRhYmxlcyApOwoJCQkJaWYgKCBpc19tdWx0aXNpdGUoKSApCgkJCQkJJHRhYmxlcyA9IGFycmF5X21lcmdlKCAkdGFibGVzLCAkdGhpcy0+bXNfZ2xvYmFsX3RhYmxlcyApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ2Jsb2cnIDoKCQkJCSR0YWJsZXMgPSAkdGhpcy0+dGFibGVzOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ2dsb2JhbCcgOgoJCQkJJHRhYmxlcyA9ICR0aGlzLT5nbG9iYWxfdGFibGVzOwoJCQkJaWYgKCBpc19tdWx0aXNpdGUoKSApCgkJCQkJJHRhYmxlcyA9IGFycmF5X21lcmdlKCAkdGFibGVzLCAkdGhpcy0+bXNfZ2xvYmFsX3RhYmxlcyApOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ21zX2dsb2JhbCcgOgoJCQkJJHRhYmxlcyA9ICR0aGlzLT5tc19nbG9iYWxfdGFibGVzOwoJCQkJYnJlYWs7CgkJCWNhc2UgJ29sZCcgOgoJCQkJJHRhYmxlcyA9ICR0aGlzLT5vbGRfdGFibGVzOwoJCQkJYnJlYWs7CgkJCWRlZmF1bHQgOgoJCQkJcmV0dXJuIGFycmF5KCk7CgkJfQoKCQlpZiAoICRwcmVmaXggKSB7CgkJCWlmICggISAkYmxvZ19pZCApCgkJCQkkYmxvZ19pZCA9ICR0aGlzLT5ibG9naWQ7CgkJCSRibG9nX3ByZWZpeCA9ICR0aGlzLT5nZXRfYmxvZ19wcmVmaXgoICRibG9nX2lkICk7CgkJCSRiYXNlX3ByZWZpeCA9ICR0aGlzLT5iYXNlX3ByZWZpeDsKCQkJJGdsb2JhbF90YWJsZXMgPSBhcnJheV9tZXJnZSggJHRoaXMtPmdsb2JhbF90YWJsZXMsICR0aGlzLT5tc19nbG9iYWxfdGFibGVzICk7CgkJCWZvcmVhY2ggKCAkdGFibGVzIGFzICRrID0+ICR0YWJsZSApIHsKCQkJCWlmICggaW5fYXJyYXkoICR0YWJsZSwgJGdsb2JhbF90YWJsZXMgKSApCgkJCQkJJHRhYmxlc1sgJHRhYmxlIF0gPSAkYmFzZV9wcmVmaXggLiAkdGFibGU7CgkJCQllbHNlCgkJCQkJJHRhYmxlc1sgJHRhYmxlIF0gPSAkYmxvZ19wcmVmaXggLiAkdGFibGU7CgkJCQl1bnNldCggJHRhYmxlc1sgJGsgXSApOwoJCQl9CgoJCQlpZiAoIGlzc2V0KCAkdGFibGVzWyd1c2VycyddICkgJiYgZGVmaW5lZCggJ0NVU1RPTV9VU0VSX1RBQkxFJyApICkKCQkJCSR0YWJsZXNbJ3VzZXJzJ10gPSBDVVNUT01fVVNFUl9UQUJMRTsKCgkJCWlmICggaXNzZXQoICR0YWJsZXNbJ3VzZXJtZXRhJ10gKSAmJiBkZWZpbmVkKCAnQ1VTVE9NX1VTRVJfTUVUQV9UQUJMRScgKSApCgkJCQkkdGFibGVzWyd1c2VybWV0YSddID0gQ1VTVE9NX1VTRVJfTUVUQV9UQUJMRTsKCQl9CgoJCXJldHVybiAkdGFibGVzOwoJfQoKCS8qKgoJICogU2VsZWN0cyBhIGRhdGFiYXNlIHVzaW5nIHRoZSBjdXJyZW50IGRhdGFiYXNlIGNvbm5lY3Rpb24uCgkgKgoJICogVGhlIGRhdGFiYXNlIG5hbWUgd2lsbCBiZSBjaGFuZ2VkIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRhdGFiYXNlCgkgKiBjb25uZWN0aW9uLiBPbiBmYWlsdXJlLCB0aGUgZXhlY3V0aW9uIHdpbGwgYmFpbCBhbmQgZGlzcGxheSBhbiBEQiBlcnJvci4KCSAqCgkgKiBAc2luY2UgMC43MQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgICAgICAgICRkYiAgTXlTUUwgZGF0YWJhc2UgbmFtZQoJICogQHBhcmFtIHJlc291cmNlfG51bGwgJGRiaCBPcHRpb25hbCBsaW5rIGlkZW50aWZpZXIuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzZWxlY3QoICRkYiwgJGRiaCA9IG51bGwgKSB7CgkJaWYgKCBpc19udWxsKCRkYmgpICkKCQkJJGRiaCA9ICR0aGlzLT5kYmg7CgoJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCSRzdWNjZXNzID0gQG15c3FsaV9zZWxlY3RfZGIoICRkYmgsICRkYiApOwoJCX0gZWxzZSB7CgkJCSRzdWNjZXNzID0gQG15c3FsX3NlbGVjdF9kYiggJGRiLCAkZGJoICk7CgkJfQoJCWlmICggISAkc3VjY2VzcyApIHsKCQkJJHRoaXMtPnJlYWR5ID0gZmFsc2U7CgkJCWlmICggISBkaWRfYWN0aW9uKCAndGVtcGxhdGVfcmVkaXJlY3QnICkgKSB7CgkJCQl3cF9sb2FkX3RyYW5zbGF0aW9uc19lYXJseSgpOwoKCQkJCSRtZXNzYWdlID0gJzxoMT4nIC4gX18oICdDYW4mIzgyMTc7dCBzZWxlY3QgZGF0YWJhc2UnICkgLiAiPC9oMT5cbiI7CgoJCQkJJG1lc3NhZ2UgLj0gJzxwPicgLiBzcHJpbnRmKAoJCQkJCS8qIHRyYW5zbGF0b3JzOiAlczogZGF0YWJhc2UgbmFtZSAqLwoJCQkJCV9fKCAnV2Ugd2VyZSBhYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIHNlcnZlciAod2hpY2ggbWVhbnMgeW91ciB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaXMgb2theSkgYnV0IG5vdCBhYmxlIHRvIHNlbGVjdCB0aGUgJXMgZGF0YWJhc2UuJyApLAoJCQkJCSc8Y29kZT4nIC4gaHRtbHNwZWNpYWxjaGFycyggJGRiLCBFTlRfUVVPVEVTICkgLiAnPC9jb2RlPicKCQkJCSkgLiAiPC9wPlxuIjsKCgkJCQkkbWVzc2FnZSAuPSAiPHVsPlxuIjsKCQkJCSRtZXNzYWdlIC49ICc8bGk+JyAuIF9fKCAnQXJlIHlvdSBzdXJlIGl0IGV4aXN0cz8nICkgLiAiPC9saT5cbiI7CgoJCQkJJG1lc3NhZ2UgLj0gJzxsaT4nIC4gc3ByaW50ZigKCQkJCQkvKiB0cmFuc2xhdG9yczogMTogZGF0YWJhc2UgdXNlciwgMjogZGF0YWJhc2UgbmFtZSAqLwoJCQkJCV9fKCAnRG9lcyB0aGUgdXNlciAlMSRzIGhhdmUgcGVybWlzc2lvbiB0byB1c2UgdGhlICUyJHMgZGF0YWJhc2U/JyApLAoJCQkJCSc8Y29kZT4nIC4gaHRtbHNwZWNpYWxjaGFycyggJHRoaXMtPmRidXNlciwgRU5UX1FVT1RFUyApICAuICc8L2NvZGU+JywKCQkJCQknPGNvZGU+JyAuIGh0bWxzcGVjaWFsY2hhcnMoICRkYiwgRU5UX1FVT1RFUyApIC4gJzwvY29kZT4nCgkJCQkpIC4gIjwvbGk+XG4iOwoKCQkJCSRtZXNzYWdlIC49ICc8bGk+JyAuIHNwcmludGYoCgkJCQkJLyogdHJhbnNsYXRvcnM6ICVzOiBkYXRhYmFzZSBuYW1lICovCgkJCQkJX18oICdPbiBzb21lIHN5c3RlbXMgdGhlIG5hbWUgb2YgeW91ciBkYXRhYmFzZSBpcyBwcmVmaXhlZCB3aXRoIHlvdXIgdXNlcm5hbWUsIHNvIGl0IHdvdWxkIGJlIGxpa2UgPGNvZGU+dXNlcm5hbWVfJTEkczwvY29kZT4uIENvdWxkIHRoYXQgYmUgdGhlIHByb2JsZW0/JyApLAoJCQkJCWh0bWxzcGVjaWFsY2hhcnMoICRkYiwgRU5UX1FVT1RFUyApCgkJCQkpLiAiPC9saT5cbiI7CgoJCQkJJG1lc3NhZ2UgLj0gIjwvdWw+XG4iOwoKCQkJCSRtZXNzYWdlIC49ICc8cD4nIC4gc3ByaW50ZigKCQkJCQkvKiB0cmFuc2xhdG9yczogJXM6IHN1cHBvcnQgZm9ydW1zIFVSTCAqLwoJCQkJCV9fKCAnSWYgeW91IGRvbiYjODIxNzt0IGtub3cgaG93IHRvIHNldCB1cCBhIGRhdGFiYXNlIHlvdSBzaG91bGQgPHN0cm9uZz5jb250YWN0IHlvdXIgaG9zdDwvc3Ryb25nPi4gSWYgYWxsIGVsc2UgZmFpbHMgeW91IG1heSBmaW5kIGhlbHAgYXQgdGhlIDxhIGhyZWY9IiVzIj5Xb3JkUHJlc3MgU3VwcG9ydCBGb3J1bXM8L2E+LicgKSwKCQkJCQlfXyggJ2h0dHBzOi8vd29yZHByZXNzLm9yZy9zdXBwb3J0LycgKQoJCQkJKSAuICI8L3A+XG4iOwoKCQkJCSR0aGlzLT5iYWlsKCAkbWVzc2FnZSwgJ2RiX3NlbGVjdF9mYWlsJyApOwoJCQl9CgkJfQoJfQoKCS8qKgoJICogRG8gbm90IHVzZSwgZGVwcmVjYXRlZC4KCSAqCgkgKiBVc2UgZXNjX3NxbCgpIG9yIHdwZGI6OnByZXBhcmUoKSBpbnN0ZWFkLgoJICoKCSAqIEBzaW5jZSAyLjguMAoJICogQGRlcHJlY2F0ZWQgMy42LjAgVXNlIHdwZGI6OnByZXBhcmUoKQoJICogQHNlZSB3cGRiOjpwcmVwYXJlCgkgKiBAc2VlIGVzY19zcWwoKQoJICogQGFjY2VzcyBwcml2YXRlCgkgKgoJICogQHBhcmFtIHN0cmluZyAkc3RyaW5nCgkgKiBAcmV0dXJuIHN0cmluZwoJICovCglmdW5jdGlvbiBfd2Vha19lc2NhcGUoICRzdHJpbmcgKSB7CgkJaWYgKCBmdW5jX251bV9hcmdzKCkgPT09IDEgJiYgZnVuY3Rpb25fZXhpc3RzKCAnX2RlcHJlY2F0ZWRfZnVuY3Rpb24nICkgKQoJCQlfZGVwcmVjYXRlZF9mdW5jdGlvbiggX19NRVRIT0RfXywgJzMuNicsICd3cGRiOjpwcmVwYXJlKCkgb3IgZXNjX3NxbCgpJyApOwoJCXJldHVybiBhZGRzbGFzaGVzKCAkc3RyaW5nICk7Cgl9CgoJLyoqCgkgKiBSZWFsIGVzY2FwZSwgdXNpbmcgbXlzcWxpX3JlYWxfZXNjYXBlX3N0cmluZygpIG9yIG15c3FsX3JlYWxfZXNjYXBlX3N0cmluZygpCgkgKgoJICogQHNlZSBteXNxbGlfcmVhbF9lc2NhcGVfc3RyaW5nKCkKCSAqIEBzZWUgbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCkKCSAqIEBzaW5jZSAyLjguMAoJICogQGFjY2VzcyBwcml2YXRlCgkgKgoJICogQHBhcmFtICBzdHJpbmcgJHN0cmluZyB0byBlc2NhcGUKCSAqIEByZXR1cm4gc3RyaW5nIGVzY2FwZWQKCSAqLwoJZnVuY3Rpb24gX3JlYWxfZXNjYXBlKCAkc3RyaW5nICkgewoJCWlmICggJHRoaXMtPmRiaCApIHsKCQkJaWYgKCAkdGhpcy0+dXNlX215c3FsaSApIHsKCQkJCXJldHVybiBteXNxbGlfcmVhbF9lc2NhcGVfc3RyaW5nKCAkdGhpcy0+ZGJoLCAkc3RyaW5nICk7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCAkc3RyaW5nLCAkdGhpcy0+ZGJoICk7CgkJCX0KCQl9CgoJCSRjbGFzcyA9IGdldF9jbGFzcyggJHRoaXMgKTsKCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cyggJ19fJyApICkgewoJCQkvKiB0cmFuc2xhdG9yczogJXM6IGRhdGFiYXNlIGFjY2VzcyBhYnN0cmFjdGlvbiBjbGFzcywgdXN1YWxseSB3cGRiIG9yIGEgY2xhc3MgZXh0ZW5kaW5nIHdwZGIgKi8KCQkJX2RvaW5nX2l0X3dyb25nKCAkY2xhc3MsIHNwcmludGYoIF9fKCAnJXMgbXVzdCBzZXQgYSBkYXRhYmFzZSBjb25uZWN0aW9uIGZvciB1c2Ugd2l0aCBlc2NhcGluZy4nICksICRjbGFzcyApLCBFX1VTRVJfTk9USUNFICk7CgkJfSBlbHNlIHsKCQkJX2RvaW5nX2l0X3dyb25nKCAkY2xhc3MsIHNwcmludGYoICclcyBtdXN0IHNldCBhIGRhdGFiYXNlIGNvbm5lY3Rpb24gZm9yIHVzZSB3aXRoIGVzY2FwaW5nLicsICRjbGFzcyApLCBFX1VTRVJfTk9USUNFICk7CgkJfQoJCXJldHVybiBhZGRzbGFzaGVzKCAkc3RyaW5nICk7Cgl9CgoJLyoqCgkgKiBFc2NhcGUgZGF0YS4gV29ya3Mgb24gYXJyYXlzLgoJICoKCSAqIEB1c2VzIHdwZGI6Ol9yZWFsX2VzY2FwZSgpCgkgKiBAc2luY2UgIDIuOC4wCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqCgkgKiBAcGFyYW0gIHN0cmluZ3xhcnJheSAkZGF0YQoJICogQHJldHVybiBzdHJpbmd8YXJyYXkgZXNjYXBlZAoJICovCglmdW5jdGlvbiBfZXNjYXBlKCAkZGF0YSApIHsKCQlpZiAoIGlzX2FycmF5KCAkZGF0YSApICkgewoJCQlmb3JlYWNoICggJGRhdGEgYXMgJGsgPT4gJHYgKSB7CgkJCQlpZiAoIGlzX2FycmF5KCR2KSApCgkJCQkJJGRhdGFbJGtdID0gJHRoaXMtPl9lc2NhcGUoICR2ICk7CgkJCQllbHNlCgkJCQkJJGRhdGFbJGtdID0gJHRoaXMtPl9yZWFsX2VzY2FwZSggJHYgKTsKCQkJfQoJCX0gZWxzZSB7CgkJCSRkYXRhID0gJHRoaXMtPl9yZWFsX2VzY2FwZSggJGRhdGEgKTsKCQl9CgoJCXJldHVybiAkZGF0YTsKCX0KCgkvKioKCSAqIERvIG5vdCB1c2UsIGRlcHJlY2F0ZWQuCgkgKgoJICogVXNlIGVzY19zcWwoKSBvciB3cGRiOjpwcmVwYXJlKCkgaW5zdGVhZC4KCSAqCgkgKiBAc2luY2UgMC43MQoJICogQGRlcHJlY2F0ZWQgMy42LjAgVXNlIHdwZGI6OnByZXBhcmUoKQoJICogQHNlZSB3cGRiOjpwcmVwYXJlKCkKCSAqIEBzZWUgZXNjX3NxbCgpCgkgKgoJICogQHBhcmFtIG1peGVkICRkYXRhCgkgKiBAcmV0dXJuIG1peGVkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBlc2NhcGUoICRkYXRhICkgewoJCWlmICggZnVuY19udW1fYXJncygpID09PSAxICYmIGZ1bmN0aW9uX2V4aXN0cyggJ19kZXByZWNhdGVkX2Z1bmN0aW9uJyApICkKCQkJX2RlcHJlY2F0ZWRfZnVuY3Rpb24oIF9fTUVUSE9EX18sICczLjYnLCAnd3BkYjo6cHJlcGFyZSgpIG9yIGVzY19zcWwoKScgKTsKCQlpZiAoIGlzX2FycmF5KCAkZGF0YSApICkgewoJCQlmb3JlYWNoICggJGRhdGEgYXMgJGsgPT4gJHYgKSB7CgkJCQlpZiAoIGlzX2FycmF5KCAkdiApICkKCQkJCQkkZGF0YVska10gPSAkdGhpcy0+ZXNjYXBlKCAkdiwgJ3JlY3Vyc2l2ZScgKTsKCQkJCWVsc2UKCQkJCQkkZGF0YVska10gPSAkdGhpcy0+X3dlYWtfZXNjYXBlKCAkdiwgJ2ludGVybmFsJyApOwoJCQl9CgkJfSBlbHNlIHsKCQkJJGRhdGEgPSAkdGhpcy0+X3dlYWtfZXNjYXBlKCAkZGF0YSwgJ2ludGVybmFsJyApOwoJCX0KCgkJcmV0dXJuICRkYXRhOwoJfQoKCS8qKgoJICogRXNjYXBlcyBjb250ZW50IGJ5IHJlZmVyZW5jZSBmb3IgaW5zZXJ0aW9uIGludG8gdGhlIGRhdGFiYXNlLCBmb3Igc2VjdXJpdHkKCSAqCgkgKiBAdXNlcyB3cGRiOjpfcmVhbF9lc2NhcGUoKQoJICoKCSAqIEBzaW5jZSAyLjMuMAoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHN0cmluZyB0byBlc2NhcGUKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGVzY2FwZV9ieV9yZWYoICYkc3RyaW5nICkgewoJCWlmICggISBpc19mbG9hdCggJHN0cmluZyApICkKCQkJJHN0cmluZyA9ICR0aGlzLT5fcmVhbF9lc2NhcGUoICRzdHJpbmcgKTsKCX0KCgkvKioKCSAqIFByZXBhcmVzIGEgU1FMIHF1ZXJ5IGZvciBzYWZlIGV4ZWN1dGlvbi4gVXNlcyBzcHJpbnRmKCktbGlrZSBzeW50YXguCgkgKgoJICogVGhlIGZvbGxvd2luZyBkaXJlY3RpdmVzIGNhbiBiZSB1c2VkIGluIHRoZSBxdWVyeSBmb3JtYXQgc3RyaW5nOgoJICogICAlZCAoaW50ZWdlcikKCSAqICAgJWYgKGZsb2F0KQoJICogICAlcyAoc3RyaW5nKQoJICogICAlJSAobGl0ZXJhbCBwZXJjZW50YWdlIHNpZ24gLSBubyBhcmd1bWVudCBuZWVkZWQpCgkgKgoJICogQWxsIG9mICVkLCAlZiwgYW5kICVzIGFyZSB0byBiZSBsZWZ0IHVucXVvdGVkIGluIHRoZSBxdWVyeSBzdHJpbmcgYW5kIHRoZXkgbmVlZCBhbiBhcmd1bWVudCBwYXNzZWQgZm9yIHRoZW0uCgkgKiBMaXRlcmFscyAoJSkgYXMgcGFydHMgb2YgdGhlIHF1ZXJ5IG11c3QgYmUgcHJvcGVybHkgd3JpdHRlbiBhcyAlJS4KCSAqCgkgKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgYSBzbWFsbCBzdWJzZXQgb2YgdGhlIHNwcmludGYgc3ludGF4OyBpdCBvbmx5IHN1cHBvcnRzICVkIChpbnRlZ2VyKSwgJWYgKGZsb2F0KSwgYW5kICVzIChzdHJpbmcpLgoJICogRG9lcyBub3Qgc3VwcG9ydCBzaWduLCBwYWRkaW5nLCBhbGlnbm1lbnQsIHdpZHRoIG9yIHByZWNpc2lvbiBzcGVjaWZpZXJzLgoJICogRG9lcyBub3Qgc3VwcG9ydCBhcmd1bWVudCBudW1iZXJpbmcvc3dhcHBpbmcuCgkgKgoJICogTWF5IGJlIGNhbGxlZCBsaWtlIHtAbGluayBodHRwOi8vcGhwLm5ldC9zcHJpbnRmIHNwcmludGYoKX0gb3IgbGlrZSB7QGxpbmsgaHR0cDovL3BocC5uZXQvdnNwcmludGYgdnNwcmludGYoKX0uCgkgKgoJICogQm90aCAlZCBhbmQgJXMgc2hvdWxkIGJlIGxlZnQgdW5xdW90ZWQgaW4gdGhlIHF1ZXJ5IHN0cmluZy4KCSAqCgkgKiAgICAgd3BkYjo6cHJlcGFyZSggIlNFTEVDVCAqIEZST00gYHRhYmxlYCBXSEVSRSBgY29sdW1uYCA9ICVzIEFORCBgZmllbGRgID0gJWQiLCAnZm9vJywgMTMzNyApCgkgKiAgICAgd3BkYjo6cHJlcGFyZSggIlNFTEVDVCBEQVRFX0ZPUk1BVChgZmllbGRgLCAnJSVjJykgRlJPTSBgdGFibGVgIFdIRVJFIGBjb2x1bW5gID0gJXMiLCAnZm9vJyApOwoJICoKCSAqIEBsaW5rIGh0dHA6Ly9waHAubmV0L3NwcmludGYgRGVzY3JpcHRpb24gb2Ygc3ludGF4LgoJICogQHNpbmNlIDIuMy4wCgkgKgoJICogQHBhcmFtIHN0cmluZyAgICAgICRxdWVyeSAgICBRdWVyeSBzdGF0ZW1lbnQgd2l0aCBzcHJpbnRmKCktbGlrZSBwbGFjZWhvbGRlcnMKCSAqIEBwYXJhbSBhcnJheXxtaXhlZCAkYXJncyAgICAgVGhlIGFycmF5IG9mIHZhcmlhYmxlcyB0byBzdWJzdGl0dXRlIGludG8gdGhlIHF1ZXJ5J3MgcGxhY2Vob2xkZXJzIGlmIGJlaW5nIGNhbGxlZCBsaWtlCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBodHRwOi8vcGhwLm5ldC92c3ByaW50ZiB2c3ByaW50ZigpfSwgb3IgdGhlIGZpcnN0IHZhcmlhYmxlIHRvIHN1YnN0aXR1dGUgaW50byB0aGUgcXVlcnkncyBwbGFjZWhvbGRlcnMgaWYKCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgY2FsbGVkIGxpa2Uge0BsaW5rIGh0dHA6Ly9waHAubmV0L3NwcmludGYgc3ByaW50ZigpfS4KCSAqIEBwYXJhbSBtaXhlZCAgICAgICAkYXJncywuLi4gZnVydGhlciB2YXJpYWJsZXMgdG8gc3Vic3RpdHV0ZSBpbnRvIHRoZSBxdWVyeSdzIHBsYWNlaG9sZGVycyBpZiBiZWluZyBjYWxsZWQgbGlrZQoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgaHR0cDovL3BocC5uZXQvc3ByaW50ZiBzcHJpbnRmKCl9LgoJICogQHJldHVybiBzdHJpbmd8dm9pZCBTYW5pdGl6ZWQgcXVlcnkgc3RyaW5nLCBpZiB0aGVyZSBpcyBhIHF1ZXJ5IHRvIHByZXBhcmUuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBwcmVwYXJlKCAkcXVlcnksICRhcmdzICkgewoJCWlmICggaXNfbnVsbCggJHF1ZXJ5ICkgKQoJCQlyZXR1cm47CgoJCS8vIFRoaXMgaXMgbm90IG1lYW50IHRvIGJlIGZvb2xwcm9vZiAtLSBidXQgaXQgd2lsbCBjYXRjaCBvYnZpb3VzbHkgaW5jb3JyZWN0IHVzYWdlLgoJCWlmICggc3RycG9zKCAkcXVlcnksICclJyApID09PSBmYWxzZSApIHsKCQkJX2RvaW5nX2l0X3dyb25nKCAnd3BkYjo6cHJlcGFyZScsIHNwcmludGYoIF9fKCAnVGhlIHF1ZXJ5IGFyZ3VtZW50IG9mICVzIG11c3QgaGF2ZSBhIHBsYWNlaG9sZGVyLicgKSwgJ3dwZGI6OnByZXBhcmUoKScgKSwgJzMuOScgKTsKCQl9CgoJCSRhcmdzID0gZnVuY19nZXRfYXJncygpOwoJCWFycmF5X3NoaWZ0KCAkYXJncyApOwoJCS8vIElmIGFyZ3Mgd2VyZSBwYXNzZWQgYXMgYW4gYXJyYXkgKGFzIGluIHZzcHJpbnRmKSwgbW92ZSB0aGVtIHVwCgkJaWYgKCBpc3NldCggJGFyZ3NbMF0gKSAmJiBpc19hcnJheSgkYXJnc1swXSkgKQoJCQkkYXJncyA9ICRhcmdzWzBdOwoJCSRxdWVyeSA9IHN0cl9yZXBsYWNlKCAiJyVzJyIsICclcycsICRxdWVyeSApOyAvLyBpbiBjYXNlIHNvbWVvbmUgbWlzdGFrZW5seSBhbHJlYWR5IHNpbmdsZXF1b3RlZCBpdAoJCSRxdWVyeSA9IHN0cl9yZXBsYWNlKCAnIiVzIicsICclcycsICRxdWVyeSApOyAvLyBkb3VibGVxdW90ZSB1bnF1b3RpbmcKCQkkcXVlcnkgPSBwcmVnX3JlcGxhY2UoICd8KD88ISUpJWZ8JyAsICclRicsICRxdWVyeSApOyAvLyBGb3JjZSBmbG9hdHMgdG8gYmUgbG9jYWxlIHVuYXdhcmUKCQkkcXVlcnkgPSBwcmVnX3JlcGxhY2UoICd8KD88ISUpJXN8JywgIiclcyciLCAkcXVlcnkgKTsgLy8gcXVvdGUgdGhlIHN0cmluZ3MsIGF2b2lkaW5nIGVzY2FwZWQgc3RyaW5ncyBsaWtlICUlcwoJCWFycmF5X3dhbGsoICRhcmdzLCBhcnJheSggJHRoaXMsICdlc2NhcGVfYnlfcmVmJyApICk7CgkJcmV0dXJuIEB2c3ByaW50ZiggJHF1ZXJ5LCAkYXJncyApOwoJfQoKCS8qKgoJICogRmlyc3QgaGFsZiBvZiBlc2NhcGluZyBmb3IgTElLRSBzcGVjaWFsIGNoYXJhY3RlcnMgJSBhbmQgXyBiZWZvcmUgcHJlcGFyaW5nIGZvciBNeVNRTC4KCSAqCgkgKiBVc2UgdGhpcyBvbmx5IGJlZm9yZSB3cGRiOjpwcmVwYXJlKCkgb3IgZXNjX3NxbCgpLiAgUmV2ZXJzaW5nIHRoZSBvcmRlciBpcyB2ZXJ5IGJhZCBmb3Igc2VjdXJpdHkuCgkgKgoJICogRXhhbXBsZSBQcmVwYXJlZCBTdGF0ZW1lbnQ6CgkgKiAgJHdpbGQgPSAnJSc7CgkgKiAgJGZpbmQgPSAnb25seSA0MyUgb2YgcGxhbmV0cyc7CgkgKiAgJGxpa2UgPSAkd2lsZCAuICR3cGRiLT5lc2NfbGlrZSggJGZpbmQgKSAuICR3aWxkOwoJICogICRzcWwgID0gJHdwZGItPnByZXBhcmUoICJTRUxFQ1QgKiBGUk9NICR3cGRiLT5wb3N0cyBXSEVSRSBwb3N0X2NvbnRlbnQgTElLRSAlcyIsICRsaWtlICk7CgkgKgoJICogRXhhbXBsZSBFc2NhcGUgQ2hhaW46CgkgKiAgJHNxbCAgPSBlc2Nfc3FsKCAkd3BkYi0+ZXNjX2xpa2UoICRpbnB1dCApICk7CgkgKgoJICogQHNpbmNlIDQuMC4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHRleHQgVGhlIHJhdyB0ZXh0IHRvIGJlIGVzY2FwZWQuIFRoZSBpbnB1dCB0eXBlZCBieSB0aGUgdXNlciBzaG91bGQgaGF2ZSBubwoJICogICAgICAgICAgICAgICAgICAgICBleHRyYSBvciBkZWxldGVkIHNsYXNoZXMuCgkgKiBAcmV0dXJuIHN0cmluZyBUZXh0IGluIHRoZSBmb3JtIG9mIGEgTElLRSBwaHJhc2UuIFRoZSBvdXRwdXQgaXMgbm90IFNRTCBzYWZlLiBDYWxsICR3cGRiOjpwcmVwYXJlKCkKCSAqICAgICAgICAgICAgICAgIG9yIHJlYWxfZXNjYXBlIG5leHQuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBlc2NfbGlrZSggJHRleHQgKSB7CgkJcmV0dXJuIGFkZGNzbGFzaGVzKCAkdGV4dCwgJ18lXFwnICk7Cgl9CgoJLyoqCgkgKiBQcmludCBTUUwvREIgZXJyb3IuCgkgKgoJICogQHNpbmNlIDAuNzEKCSAqIEBnbG9iYWwgYXJyYXkgJEVaU1FMX0VSUk9SIFN0b3JlcyBlcnJvciBpbmZvcm1hdGlvbiBvZiBxdWVyeSBhbmQgZXJyb3Igc3RyaW5nCgkgKgoJICogQHBhcmFtIHN0cmluZyAkc3RyIFRoZSBlcnJvciB0byBkaXNwbGF5CgkgKiBAcmV0dXJuIGZhbHNlfHZvaWQgRmFsc2UgaWYgdGhlIHNob3dpbmcgb2YgZXJyb3JzIGlzIGRpc2FibGVkLgoJICovCglwdWJsaWMgZnVuY3Rpb24gcHJpbnRfZXJyb3IoICRzdHIgPSAnJyApIHsKCQlnbG9iYWwgJEVaU1FMX0VSUk9SOwoKCQlpZiAoICEkc3RyICkgewoJCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkJJHN0ciA9IG15c3FsaV9lcnJvciggJHRoaXMtPmRiaCApOwoJCQl9IGVsc2UgewoJCQkJJHN0ciA9IG15c3FsX2Vycm9yKCAkdGhpcy0+ZGJoICk7CgkJCX0KCQl9CgkJJEVaU1FMX0VSUk9SW10gPSBhcnJheSggJ3F1ZXJ5JyA9PiAkdGhpcy0+bGFzdF9xdWVyeSwgJ2Vycm9yX3N0cicgPT4gJHN0ciApOwoKCQlpZiAoICR0aGlzLT5zdXBwcmVzc19lcnJvcnMgKQoJCQlyZXR1cm4gZmFsc2U7CgoJCXdwX2xvYWRfdHJhbnNsYXRpb25zX2Vhcmx5KCk7CgoJCWlmICggJGNhbGxlciA9ICR0aGlzLT5nZXRfY2FsbGVyKCkgKQoJCQkkZXJyb3Jfc3RyID0gc3ByaW50ZiggX18oICdXb3JkUHJlc3MgZGF0YWJhc2UgZXJyb3IgJTEkcyBmb3IgcXVlcnkgJTIkcyBtYWRlIGJ5ICUzJHMnICksICRzdHIsICR0aGlzLT5sYXN0X3F1ZXJ5LCAkY2FsbGVyICk7CgkJZWxzZQoJCQkkZXJyb3Jfc3RyID0gc3ByaW50ZiggX18oICdXb3JkUHJlc3MgZGF0YWJhc2UgZXJyb3IgJTEkcyBmb3IgcXVlcnkgJTIkcycgKSwgJHN0ciwgJHRoaXMtPmxhc3RfcXVlcnkgKTsKCgkJZXJyb3JfbG9nKCAkZXJyb3Jfc3RyICk7CgoJCS8vIEFyZSB3ZSBzaG93aW5nIGVycm9ycz8KCQlpZiAoICEgJHRoaXMtPnNob3dfZXJyb3JzICkKCQkJcmV0dXJuIGZhbHNlOwoKCQkvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciB0aGVuIHRha2Ugbm90ZSBvZiBpdAoJCWlmICggaXNfbXVsdGlzaXRlKCkgKSB7CgkJCSRtc2cgPSBzcHJpbnRmKAoJCQkJIiVzIFslc11cbiVzXG4iLAoJCQkJX18oICdXb3JkUHJlc3MgZGF0YWJhc2UgZXJyb3I6JyApLAoJCQkJJHN0ciwKCQkJCSR0aGlzLT5sYXN0X3F1ZXJ5CgkJCSk7CgoJCQlpZiAoIGRlZmluZWQoICdFUlJPUkxPR0ZJTEUnICkgKSB7CgkJCQllcnJvcl9sb2coICRtc2csIDMsIEVSUk9STE9HRklMRSApOwoJCQl9CgkJCWlmICggZGVmaW5lZCggJ0RJRU9OREJFUlJPUicgKSApIHsKCQkJCXdwX2RpZSggJG1zZyApOwoJCQl9CgkJfSBlbHNlIHsKCQkJJHN0ciAgID0gaHRtbHNwZWNpYWxjaGFycyggJHN0ciwgRU5UX1FVT1RFUyApOwoJCQkkcXVlcnkgPSBodG1sc3BlY2lhbGNoYXJzKCAkdGhpcy0+bGFzdF9xdWVyeSwgRU5UX1FVT1RFUyApOwoKCQkJcHJpbnRmKAoJCQkJJzxkaXYgaWQ9ImVycm9yIj48cCBjbGFzcz0id3BkYmVycm9yIj48c3Ryb25nPiVzPC9zdHJvbmc+IFslc108YnIgLz48Y29kZT4lczwvY29kZT48L3A+PC9kaXY+JywKCQkJCV9fKCAnV29yZFByZXNzIGRhdGFiYXNlIGVycm9yOicgKSwKCQkJCSRzdHIsCgkJCQkkcXVlcnkKCQkJKTsKCQl9Cgl9CgoJLyoqCgkgKiBFbmFibGVzIHNob3dpbmcgb2YgZGF0YWJhc2UgZXJyb3JzLgoJICoKCSAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgb25seSB0byBlbmFibGUgc2hvd2luZyBvZiBlcnJvcnMuCgkgKiB3cGRiOjpoaWRlX2Vycm9ycygpIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgZm9yIGhpZGluZyBvZiBlcnJvcnMuIEhvd2V2ZXIsCgkgKiB0aGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGVuYWJsZSBhbmQgZGlzYWJsZSBzaG93aW5nIG9mIGRhdGFiYXNlCgkgKiBlcnJvcnMuCgkgKgoJICogQHNpbmNlIDAuNzEKCSAqIEBzZWUgd3BkYjo6aGlkZV9lcnJvcnMoKQoJICoKCSAqIEBwYXJhbSBib29sICRzaG93IFdoZXRoZXIgdG8gc2hvdyBvciBoaWRlIGVycm9ycwoJICogQHJldHVybiBib29sIE9sZCB2YWx1ZSBmb3Igc2hvd2luZyBlcnJvcnMuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzaG93X2Vycm9ycyggJHNob3cgPSB0cnVlICkgewoJCSRlcnJvcnMgPSAkdGhpcy0+c2hvd19lcnJvcnM7CgkJJHRoaXMtPnNob3dfZXJyb3JzID0gJHNob3c7CgkJcmV0dXJuICRlcnJvcnM7Cgl9CgoJLyoqCgkgKiBEaXNhYmxlcyBzaG93aW5nIG9mIGRhdGFiYXNlIGVycm9ycy4KCSAqCgkgKiBCeSBkZWZhdWx0IGRhdGFiYXNlIGVycm9ycyBhcmUgbm90IHNob3duLgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKiBAc2VlIHdwZGI6OnNob3dfZXJyb3JzKCkKCSAqCgkgKiBAcmV0dXJuIGJvb2wgV2hldGhlciBzaG93aW5nIG9mIGVycm9ycyB3YXMgYWN0aXZlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBoaWRlX2Vycm9ycygpIHsKCQkkc2hvdyA9ICR0aGlzLT5zaG93X2Vycm9yczsKCQkkdGhpcy0+c2hvd19lcnJvcnMgPSBmYWxzZTsKCQlyZXR1cm4gJHNob3c7Cgl9CgoJLyoqCgkgKiBXaGV0aGVyIHRvIHN1cHByZXNzIGRhdGFiYXNlIGVycm9ycy4KCSAqCgkgKiBCeSBkZWZhdWx0IGRhdGFiYXNlIGVycm9ycyBhcmUgc3VwcHJlc3NlZCwgd2l0aCBhIHNpbXBsZQoJICogY2FsbCB0byB0aGlzIGZ1bmN0aW9uIHRoZXkgY2FuIGJlIGVuYWJsZWQuCgkgKgoJICogQHNpbmNlIDIuNS4wCgkgKiBAc2VlIHdwZGI6OmhpZGVfZXJyb3JzKCkKCSAqIEBwYXJhbSBib29sICRzdXBwcmVzcyBPcHRpb25hbC4gTmV3IHZhbHVlLiBEZWZhdWx0cyB0byB0cnVlLgoJICogQHJldHVybiBib29sIE9sZCB2YWx1ZQoJICovCglwdWJsaWMgZnVuY3Rpb24gc3VwcHJlc3NfZXJyb3JzKCAkc3VwcHJlc3MgPSB0cnVlICkgewoJCSRlcnJvcnMgPSAkdGhpcy0+c3VwcHJlc3NfZXJyb3JzOwoJCSR0aGlzLT5zdXBwcmVzc19lcnJvcnMgPSAoYm9vbCkgJHN1cHByZXNzOwoJCXJldHVybiAkZXJyb3JzOwoJfQoKCS8qKgoJICogS2lsbCBjYWNoZWQgcXVlcnkgcmVzdWx0cy4KCSAqCgkgKiBAc2luY2UgMC43MQoJICovCglwdWJsaWMgZnVuY3Rpb24gZmx1c2goKSB7CgkJJHRoaXMtPmxhc3RfcmVzdWx0ID0gYXJyYXkoKTsKCQkkdGhpcy0+Y29sX2luZm8gICAgPSBudWxsOwoJCSR0aGlzLT5sYXN0X3F1ZXJ5ICA9IG51bGw7CgkJJHRoaXMtPnJvd3NfYWZmZWN0ZWQgPSAkdGhpcy0+bnVtX3Jvd3MgPSAwOwoJCSR0aGlzLT5sYXN0X2Vycm9yICA9ICcnOwoKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICYmICR0aGlzLT5yZXN1bHQgaW5zdGFuY2VvZiBteXNxbGlfcmVzdWx0ICkgewoJCQlteXNxbGlfZnJlZV9yZXN1bHQoICR0aGlzLT5yZXN1bHQgKTsKCQkJJHRoaXMtPnJlc3VsdCA9IG51bGw7CgoJCQkvLyBTYW5pdHkgY2hlY2sgYmVmb3JlIHVzaW5nIHRoZSBoYW5kbGUKCQkJaWYgKCBlbXB0eSggJHRoaXMtPmRiaCApIHx8ICEoICR0aGlzLT5kYmggaW5zdGFuY2VvZiBteXNxbGkgKSApIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJLy8gQ2xlYXIgb3V0IGFueSByZXN1bHRzIGZyb20gYSBtdWx0aS1xdWVyeQoJCQl3aGlsZSAoIG15c3FsaV9tb3JlX3Jlc3VsdHMoICR0aGlzLT5kYmggKSApIHsKCQkJCW15c3FsaV9uZXh0X3Jlc3VsdCggJHRoaXMtPmRiaCApOwoJCQl9CgkJfSBlbHNlaWYgKCBpc19yZXNvdXJjZSggJHRoaXMtPnJlc3VsdCApICkgewoJCQlteXNxbF9mcmVlX3Jlc3VsdCggJHRoaXMtPnJlc3VsdCApOwoJCX0KCX0KCgkvKioKCSAqIENvbm5lY3QgdG8gYW5kIHNlbGVjdCBkYXRhYmFzZS4KCSAqCgkgKiBJZiAkYWxsb3dfYmFpbCBpcyBmYWxzZSwgdGhlIGxhY2sgb2YgZGF0YWJhc2UgY29ubmVjdGlvbiB3aWxsIG5lZWQKCSAqIHRvIGJlIGhhbmRsZWQgbWFudWFsbHkuCgkgKgoJICogQHNpbmNlIDMuMC4wCgkgKiBAc2luY2UgMy45LjAgJGFsbG93X2JhaWwgcGFyYW1ldGVyIGFkZGVkLgoJICoKCSAqIEBwYXJhbSBib29sICRhbGxvd19iYWlsIE9wdGlvbmFsLiBBbGxvd3MgdGhlIGZ1bmN0aW9uIHRvIGJhaWwuIERlZmF1bHQgdHJ1ZS4KCSAqIEByZXR1cm4gYm9vbCBUcnVlIHdpdGggYSBzdWNjZXNzZnVsIGNvbm5lY3Rpb24sIGZhbHNlIG9uIGZhaWx1cmUuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBkYl9jb25uZWN0KCAkYWxsb3dfYmFpbCA9IHRydWUgKSB7CgkJJHRoaXMtPmlzX215c3FsID0gdHJ1ZTsKCgkJLyoKCQkgKiBEZXByZWNhdGVkIGluIDMuOSsgd2hlbiB1c2luZyBNeVNRTGkuIE5vIGVxdWl2YWxlbnQKCQkgKiAkbmV3X2xpbmsgcGFyYW1ldGVyIGV4aXN0cyBmb3IgbXlzcWxpXyogZnVuY3Rpb25zLgoJCSAqLwoJCSRuZXdfbGluayA9IGRlZmluZWQoICdNWVNRTF9ORVdfTElOSycgKSA/IE1ZU1FMX05FV19MSU5LIDogdHJ1ZTsKCQkkY2xpZW50X2ZsYWdzID0gZGVmaW5lZCggJ01ZU1FMX0NMSUVOVF9GTEFHUycgKSA/IE1ZU1FMX0NMSUVOVF9GTEFHUyA6IDA7CgoJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCSR0aGlzLT5kYmggPSBteXNxbGlfaW5pdCgpOwoKCQkJLy8gbXlzcWxpX3JlYWxfY29ubmVjdCBkb2Vzbid0IHN1cHBvcnQgdGhlIGhvc3QgcGFyYW0gaW5jbHVkaW5nIGEgcG9ydCBvciBzb2NrZXQKCQkJLy8gbGlrZSBteXNxbF9jb25uZWN0IGRvZXMuIFRoaXMgZHVwbGljYXRlcyBob3cgbXlzcWxfY29ubmVjdCBkZXRlY3RzIGEgcG9ydCBhbmQvb3Igc29ja2V0IGZpbGUuCgkJCSRwb3J0ID0gbnVsbDsKCQkJJHNvY2tldCA9IG51bGw7CgkJCSRob3N0ID0gJHRoaXMtPmRiaG9zdDsKCQkJJHBvcnRfb3Jfc29ja2V0ID0gc3Ryc3RyKCAkaG9zdCwgJzonICk7CgkJCWlmICggISBlbXB0eSggJHBvcnRfb3Jfc29ja2V0ICkgKSB7CgkJCQkkaG9zdCA9IHN1YnN0ciggJGhvc3QsIDAsIHN0cnBvcyggJGhvc3QsICc6JyApICk7CgkJCQkkcG9ydF9vcl9zb2NrZXQgPSBzdWJzdHIoICRwb3J0X29yX3NvY2tldCwgMSApOwoJCQkJaWYgKCAwICE9PSBzdHJwb3MoICRwb3J0X29yX3NvY2tldCwgJy8nICkgKSB7CgkJCQkJJHBvcnQgPSBpbnR2YWwoICRwb3J0X29yX3NvY2tldCApOwoJCQkJCSRtYXliZV9zb2NrZXQgPSBzdHJzdHIoICRwb3J0X29yX3NvY2tldCwgJzonICk7CgkJCQkJaWYgKCAhIGVtcHR5KCAkbWF5YmVfc29ja2V0ICkgKSB7CgkJCQkJCSRzb2NrZXQgPSBzdWJzdHIoICRtYXliZV9zb2NrZXQsIDEgKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCSRzb2NrZXQgPSAkcG9ydF9vcl9zb2NrZXQ7CgkJCQl9CgkJCX0KCgkJCWlmICggV1BfREVCVUcgKSB7CgkJCQlteXNxbGlfcmVhbF9jb25uZWN0KCAkdGhpcy0+ZGJoLCAkaG9zdCwgJHRoaXMtPmRidXNlciwgJHRoaXMtPmRicGFzc3dvcmQsIG51bGwsICRwb3J0LCAkc29ja2V0LCAkY2xpZW50X2ZsYWdzICk7CgkJCX0gZWxzZSB7CgkJCQlAbXlzcWxpX3JlYWxfY29ubmVjdCggJHRoaXMtPmRiaCwgJGhvc3QsICR0aGlzLT5kYnVzZXIsICR0aGlzLT5kYnBhc3N3b3JkLCBudWxsLCAkcG9ydCwgJHNvY2tldCwgJGNsaWVudF9mbGFncyApOwoJCQl9CgoJCQlpZiAoICR0aGlzLT5kYmgtPmNvbm5lY3RfZXJybm8gKSB7CgkJCQkkdGhpcy0+ZGJoID0gbnVsbDsKCgkJCQkvKiBJdCdzIHBvc3NpYmxlIGV4dC9teXNxbGkgaXMgbWlzY29uZmlndXJlZC4gRmFsbCBiYWNrIHRvIGV4dC9teXNxbCBpZjoKCQkgCQkgKiAgLSBXZSBoYXZlbid0IHByZXZpb3VzbHkgY29ubmVjdGVkLCBhbmQKCQkgCQkgKiAgLSBXUF9VU0VfRVhUX01ZU1FMIGlzbid0IHNldCB0byBmYWxzZSwgYW5kCgkJIAkJICogIC0gZXh0L215c3FsIGlzIGxvYWRlZC4KCQkgCQkgKi8KCQkJCSRhdHRlbXB0X2ZhbGxiYWNrID0gdHJ1ZTsKCgkJCQlpZiAoICR0aGlzLT5oYXNfY29ubmVjdGVkICkgewoJCQkJCSRhdHRlbXB0X2ZhbGxiYWNrID0gZmFsc2U7CgkJCQl9IGVsc2VpZiAoIGRlZmluZWQoICdXUF9VU0VfRVhUX01ZU1FMJyApICYmICEgV1BfVVNFX0VYVF9NWVNRTCApIHsKCQkJCQkkYXR0ZW1wdF9mYWxsYmFjayA9IGZhbHNlOwoJCQkJfSBlbHNlaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ215c3FsX2Nvbm5lY3QnICkgKSB7CgkJCQkJJGF0dGVtcHRfZmFsbGJhY2sgPSBmYWxzZTsKCQkJCX0KCgkJCQlpZiAoICRhdHRlbXB0X2ZhbGxiYWNrICkgewoJCQkJCSR0aGlzLT51c2VfbXlzcWxpID0gZmFsc2U7CgkJCQkJcmV0dXJuICR0aGlzLT5kYl9jb25uZWN0KCAkYWxsb3dfYmFpbCApOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgKCBXUF9ERUJVRyApIHsKCQkJCSR0aGlzLT5kYmggPSBteXNxbF9jb25uZWN0KCAkdGhpcy0+ZGJob3N0LCAkdGhpcy0+ZGJ1c2VyLCAkdGhpcy0+ZGJwYXNzd29yZCwgJG5ld19saW5rLCAkY2xpZW50X2ZsYWdzICk7CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy0+ZGJoID0gQG15c3FsX2Nvbm5lY3QoICR0aGlzLT5kYmhvc3QsICR0aGlzLT5kYnVzZXIsICR0aGlzLT5kYnBhc3N3b3JkLCAkbmV3X2xpbmssICRjbGllbnRfZmxhZ3MgKTsKCQkJfQoJCX0KCgkJaWYgKCAhICR0aGlzLT5kYmggJiYgJGFsbG93X2JhaWwgKSB7CgkJCXdwX2xvYWRfdHJhbnNsYXRpb25zX2Vhcmx5KCk7CgoJCQkvLyBMb2FkIGN1c3RvbSBEQiBlcnJvciB0ZW1wbGF0ZSwgaWYgcHJlc2VudC4KCQkJaWYgKCBmaWxlX2V4aXN0cyggV1BfQ09OVEVOVF9ESVIgLiAnL2RiLWVycm9yLnBocCcgKSApIHsKCQkJCXJlcXVpcmVfb25jZSggV1BfQ09OVEVOVF9ESVIgLiAnL2RiLWVycm9yLnBocCcgKTsKCQkJCWRpZSgpOwoJCQl9CgoJCQkkbWVzc2FnZSA9ICc8aDE+JyAuIF9fKCAnRXJyb3IgZXN0YWJsaXNoaW5nIGEgZGF0YWJhc2UgY29ubmVjdGlvbicgKSAuICI8L2gxPlxuIjsKCgkJCSRtZXNzYWdlIC49ICc8cD4nIC4gc3ByaW50ZigKCQkJCS8qIHRyYW5zbGF0b3JzOiAxOiB3cC1jb25maWcucGhwLiAyOiBkYXRhYmFzZSBob3N0ICovCgkJCQlfXyggJ1RoaXMgZWl0aGVyIG1lYW5zIHRoYXQgdGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBpbmZvcm1hdGlvbiBpbiB5b3VyICUxJHMgZmlsZSBpcyBpbmNvcnJlY3Qgb3Igd2UgY2FuJiM4MjE3O3QgY29udGFjdCB0aGUgZGF0YWJhc2Ugc2VydmVyIGF0ICUyJHMuIFRoaXMgY291bGQgbWVhbiB5b3VyIGhvc3QmIzgyMTc7cyBkYXRhYmFzZSBzZXJ2ZXIgaXMgZG93bi4nICksCgkJCQknPGNvZGU+d3AtY29uZmlnLnBocDwvY29kZT4nLAoJCQkJJzxjb2RlPicgLiBodG1sc3BlY2lhbGNoYXJzKCAkdGhpcy0+ZGJob3N0LCBFTlRfUVVPVEVTICkgLiAnPC9jb2RlPicKCQkJKSAuICI8L3A+XG4iOwoKCQkJJG1lc3NhZ2UgLj0gIjx1bD5cbiI7CgkJCSRtZXNzYWdlIC49ICc8bGk+JyAuIF9fKCAnQXJlIHlvdSBzdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IHVzZXJuYW1lIGFuZCBwYXNzd29yZD8nICkgLiAiPC9saT5cbiI7CgkJCSRtZXNzYWdlIC49ICc8bGk+JyAuIF9fKCAnQXJlIHlvdSBzdXJlIHRoYXQgeW91IGhhdmUgdHlwZWQgdGhlIGNvcnJlY3QgaG9zdG5hbWU/JyApIC4gIjwvbGk+XG4iOwoJCQkkbWVzc2FnZSAuPSAnPGxpPicgLiBfXyggJ0FyZSB5b3Ugc3VyZSB0aGF0IHRoZSBkYXRhYmFzZSBzZXJ2ZXIgaXMgcnVubmluZz8nICkgLiAiPC9saT5cbiI7CgkJCSRtZXNzYWdlIC49ICI8L3VsPlxuIjsKCgkJCSRtZXNzYWdlIC49ICc8cD4nIC4gc3ByaW50ZigKCQkJCS8qIHRyYW5zbGF0b3JzOiAlczogc3VwcG9ydCBmb3J1bXMgVVJMICovCgkJCQlfXyggJ0lmIHlvdSYjODIxNztyZSB1bnN1cmUgd2hhdCB0aGVzZSB0ZXJtcyBtZWFuIHlvdSBzaG91bGQgcHJvYmFibHkgY29udGFjdCB5b3VyIGhvc3QuIElmIHlvdSBzdGlsbCBuZWVkIGhlbHAgeW91IGNhbiBhbHdheXMgdmlzaXQgdGhlIDxhIGhyZWY9IiVzIj5Xb3JkUHJlc3MgU3VwcG9ydCBGb3J1bXM8L2E+LicgKSwKCQkJCV9fKCAnaHR0cHM6Ly93b3JkcHJlc3Mub3JnL3N1cHBvcnQvJyApCgkJCSkgLiAiPC9wPlxuIjsKCgkJCSR0aGlzLT5iYWlsKCAkbWVzc2FnZSwgJ2RiX2Nvbm5lY3RfZmFpbCcgKTsKCgkJCXJldHVybiBmYWxzZTsKCQl9IGVsc2VpZiAoICR0aGlzLT5kYmggKSB7CgkJCWlmICggISAkdGhpcy0+aGFzX2Nvbm5lY3RlZCApIHsKCQkJCSR0aGlzLT5pbml0X2NoYXJzZXQoKTsKCQkJfQoKCQkJJHRoaXMtPmhhc19jb25uZWN0ZWQgPSB0cnVlOwoKCQkJJHRoaXMtPnNldF9jaGFyc2V0KCAkdGhpcy0+ZGJoICk7CgoJCQkkdGhpcy0+cmVhZHkgPSB0cnVlOwoJCQkkdGhpcy0+c2V0X3NxbF9tb2RlKCk7CgkJCSR0aGlzLT5zZWxlY3QoICR0aGlzLT5kYm5hbWUsICR0aGlzLT5kYmggKTsKCgkJCXJldHVybiB0cnVlOwoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfQoKCS8qKgoJICogQ2hlY2sgdGhhdCB0aGUgY29ubmVjdGlvbiB0byB0aGUgZGF0YWJhc2UgaXMgc3RpbGwgdXAuIElmIG5vdCwgdHJ5IHRvIHJlY29ubmVjdC4KCSAqCgkgKiBJZiB0aGlzIGZ1bmN0aW9uIGlzIHVuYWJsZSB0byByZWNvbm5lY3QsIGl0IHdpbGwgZm9yY2libHkgZGllLCBvciBpZiBhZnRlciB0aGUKCSAqIHRoZSB0ZW1wbGF0ZV9yZWRpcmVjdCBob29rIGhhcyBiZWVuIGZpcmVkLCByZXR1cm4gZmFsc2UgaW5zdGVhZC4KCSAqCgkgKiBJZiAkYWxsb3dfYmFpbCBpcyBmYWxzZSwgdGhlIGxhY2sgb2YgZGF0YWJhc2UgY29ubmVjdGlvbiB3aWxsIG5lZWQKCSAqIHRvIGJlIGhhbmRsZWQgbWFudWFsbHkuCgkgKgoJICogQHNpbmNlIDMuOS4wCgkgKgoJICogQHBhcmFtIGJvb2wgJGFsbG93X2JhaWwgT3B0aW9uYWwuIEFsbG93cyB0aGUgZnVuY3Rpb24gdG8gYmFpbC4gRGVmYXVsdCB0cnVlLgoJICogQHJldHVybiBib29sfHZvaWQgVHJ1ZSBpZiB0aGUgY29ubmVjdGlvbiBpcyB1cC4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGNoZWNrX2Nvbm5lY3Rpb24oICRhbGxvd19iYWlsID0gdHJ1ZSApIHsKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQlpZiAoIEBteXNxbGlfcGluZyggJHRoaXMtPmRiaCApICkgewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9IGVsc2UgewoJCQlpZiAoIEBteXNxbF9waW5nKCAkdGhpcy0+ZGJoICkgKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCgkJJGVycm9yX3JlcG9ydGluZyA9IGZhbHNlOwoKCQkvLyBEaXNhYmxlIHdhcm5pbmdzLCBhcyB3ZSBkb24ndCB3YW50IHRvIHNlZSBhIG11bHRpdHVkZSBvZiAidW5hYmxlIHRvIGNvbm5lY3QiIG1lc3NhZ2VzCgkJaWYgKCBXUF9ERUJVRyApIHsKCQkJJGVycm9yX3JlcG9ydGluZyA9IGVycm9yX3JlcG9ydGluZygpOwoJCQllcnJvcl9yZXBvcnRpbmcoICRlcnJvcl9yZXBvcnRpbmcgJiB+RV9XQVJOSU5HICk7CgkJfQoKCQlmb3IgKCAkdHJpZXMgPSAxOyAkdHJpZXMgPD0gJHRoaXMtPnJlY29ubmVjdF9yZXRyaWVzOyAkdHJpZXMrKyApIHsKCQkJLy8gT24gdGhlIGxhc3QgdHJ5LCByZS1lbmFibGUgd2FybmluZ3MuIFdlIHdhbnQgdG8gc2VlIGEgc2luZ2xlIGluc3RhbmNlIG9mIHRoZQoJCQkvLyAidW5hYmxlIHRvIGNvbm5lY3QiIG1lc3NhZ2Ugb24gdGhlIGJhaWwoKSBzY3JlZW4sIGlmIGl0IGFwcGVhcnMuCgkJCWlmICggJHRoaXMtPnJlY29ubmVjdF9yZXRyaWVzID09PSAkdHJpZXMgJiYgV1BfREVCVUcgKSB7CgkJCQllcnJvcl9yZXBvcnRpbmcoICRlcnJvcl9yZXBvcnRpbmcgKTsKCQkJfQoKCQkJaWYgKCAkdGhpcy0+ZGJfY29ubmVjdCggZmFsc2UgKSApIHsKCQkJCWlmICggJGVycm9yX3JlcG9ydGluZyApIHsKCQkJCQllcnJvcl9yZXBvcnRpbmcoICRlcnJvcl9yZXBvcnRpbmcgKTsKCQkJCX0KCgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoKCQkJc2xlZXAoIDEgKTsKCQl9CgoJCS8vIElmIHRlbXBsYXRlX3JlZGlyZWN0IGhhcyBhbHJlYWR5IGhhcHBlbmVkLCBpdCdzIHRvbyBsYXRlIGZvciB3cF9kaWUoKS9kZWFkX2RiKCkuCgkJLy8gTGV0J3MganVzdCByZXR1cm4gYW5kIGhvcGUgZm9yIHRoZSBiZXN0LgoJCWlmICggZGlkX2FjdGlvbiggJ3RlbXBsYXRlX3JlZGlyZWN0JyApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZiAoICEgJGFsbG93X2JhaWwgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXdwX2xvYWRfdHJhbnNsYXRpb25zX2Vhcmx5KCk7CgoJCSRtZXNzYWdlID0gJzxoMT4nIC4gX18oICdFcnJvciByZWNvbm5lY3RpbmcgdG8gdGhlIGRhdGFiYXNlJyApIC4gIjwvaDE+XG4iOwoKCQkkbWVzc2FnZSAuPSAnPHA+JyAuIHNwcmludGYoCgkJCS8qIHRyYW5zbGF0b3JzOiAlczogZGF0YWJhc2UgaG9zdCAqLwoJCQlfXyggJ1RoaXMgbWVhbnMgdGhhdCB3ZSBsb3N0IGNvbnRhY3Qgd2l0aCB0aGUgZGF0YWJhc2Ugc2VydmVyIGF0ICVzLiBUaGlzIGNvdWxkIG1lYW4geW91ciBob3N0JiM4MjE3O3MgZGF0YWJhc2Ugc2VydmVyIGlzIGRvd24uJyApLAoJCQknPGNvZGU+JyAuIGh0bWxzcGVjaWFsY2hhcnMoICR0aGlzLT5kYmhvc3QsIEVOVF9RVU9URVMgKSAuICc8L2NvZGU+JwoJCSkgLiAiPC9wPlxuIjsKCgkJJG1lc3NhZ2UgLj0gIjx1bD5cbiI7CgkJJG1lc3NhZ2UgLj0gJzxsaT4nIC4gX18oICdBcmUgeW91IHN1cmUgdGhhdCB0aGUgZGF0YWJhc2Ugc2VydmVyIGlzIHJ1bm5pbmc/JyApIC4gIjwvbGk+XG4iOwoJCSRtZXNzYWdlIC49ICc8bGk+JyAuIF9fKCAnQXJlIHlvdSBzdXJlIHRoYXQgdGhlIGRhdGFiYXNlIHNlcnZlciBpcyBub3QgdW5kZXIgcGFydGljdWxhcmx5IGhlYXZ5IGxvYWQ/JyApIC4gIjwvbGk+XG4iOwoJCSRtZXNzYWdlIC49ICI8L3VsPlxuIjsKCgkJJG1lc3NhZ2UgLj0gJzxwPicgLiBzcHJpbnRmKAoJCQkvKiB0cmFuc2xhdG9yczogJXM6IHN1cHBvcnQgZm9ydW1zIFVSTCAqLwoJCQlfXyggJ0lmIHlvdSYjODIxNztyZSB1bnN1cmUgd2hhdCB0aGVzZSB0ZXJtcyBtZWFuIHlvdSBzaG91bGQgcHJvYmFibHkgY29udGFjdCB5b3VyIGhvc3QuIElmIHlvdSBzdGlsbCBuZWVkIGhlbHAgeW91IGNhbiBhbHdheXMgdmlzaXQgdGhlIDxhIGhyZWY9IiVzIj5Xb3JkUHJlc3MgU3VwcG9ydCBGb3J1bXM8L2E+LicgKSwKCQkJX18oICdodHRwczovL3dvcmRwcmVzcy5vcmcvc3VwcG9ydC8nICkKCQkpIC4gIjwvcD5cbiI7CgoJCS8vIFdlIHdlcmVuJ3QgYWJsZSB0byByZWNvbm5lY3QsIHNvIHdlIGJldHRlciBiYWlsLgoJCSR0aGlzLT5iYWlsKCAkbWVzc2FnZSwgJ2RiX2Nvbm5lY3RfZmFpbCcgKTsKCgkJLy8gQ2FsbCBkZWFkX2RiKCkgaWYgYmFpbCBkaWRuJ3QgZGllLCBiZWNhdXNlIHRoaXMgZGF0YWJhc2UgaXMgbm8gbW9yZS4gSXQgaGFzIGNlYXNlZCB0byBiZSAoYXQgbGVhc3QgdGVtcG9yYXJpbHkpLgoJCWRlYWRfZGIoKTsKCX0KCgkvKioKCSAqIFBlcmZvcm0gYSBNeVNRTCBkYXRhYmFzZSBxdWVyeSwgdXNpbmcgY3VycmVudCBkYXRhYmFzZSBjb25uZWN0aW9uLgoJICoKCSAqIE1vcmUgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIG9uIHRoZSBjb2RleCBwYWdlLgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZyAkcXVlcnkgRGF0YWJhc2UgcXVlcnkKCSAqIEByZXR1cm4gaW50fGZhbHNlIE51bWJlciBvZiByb3dzIGFmZmVjdGVkL3NlbGVjdGVkIG9yIGZhbHNlIG9uIGVycm9yCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBxdWVyeSggJHF1ZXJ5ICkgewoJCWlmICggISAkdGhpcy0+cmVhZHkgKSB7CgkJCS8vIEJhY2t1cEJ1ZGR5OiBSZW1vdmVkIGZvbGxvd2luZyBsaW5lLgoJCQkvLyR0aGlzLT5jaGVja19jdXJyZW50X3F1ZXJ5ID0gdHJ1ZTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLyoqCgkJICogRmlsdGVyIHRoZSBkYXRhYmFzZSBxdWVyeS4KCQkgKgoJCSAqIFNvbWUgcXVlcmllcyBhcmUgbWFkZSBiZWZvcmUgdGhlIHBsdWdpbnMgaGF2ZSBiZWVuIGxvYWRlZCwKCQkgKiBhbmQgdGh1cyBjYW5ub3QgYmUgZmlsdGVyZWQgd2l0aCB0aGlzIG1ldGhvZC4KCQkgKgoJCSAqIEBzaW5jZSAyLjEuMAoJCSAqCgkJICogQHBhcmFtIHN0cmluZyAkcXVlcnkgRGF0YWJhc2UgcXVlcnkuCgkJICovCgkJJHF1ZXJ5ID0gYXBwbHlfZmlsdGVycyggJ3F1ZXJ5JywgJHF1ZXJ5ICk7CgoJCSR0aGlzLT5mbHVzaCgpOwoKCQkvLyBMb2cgaG93IHRoZSBmdW5jdGlvbiB3YXMgY2FsbGVkCgkJJHRoaXMtPmZ1bmNfY2FsbCA9ICJcJGRiLT5xdWVyeShcIiRxdWVyeVwiKSI7CgoJCS8vIElmIHdlJ3JlIHdyaXRpbmcgdG8gdGhlIGRhdGFiYXNlLCBtYWtlIHN1cmUgdGhlIHF1ZXJ5IHdpbGwgd3JpdGUgc2FmZWx5LgoJCWlmICggJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgJiYgISAkdGhpcy0+Y2hlY2tfYXNjaWkoICRxdWVyeSApICkgewoJCQkkc3RyaXBwZWRfcXVlcnkgPSAkdGhpcy0+c3RyaXBfaW52YWxpZF90ZXh0X2Zyb21fcXVlcnkoICRxdWVyeSApOwoJCQkvLyBzdHJpcF9pbnZhbGlkX3RleHRfZnJvbV9xdWVyeSgpIGNhbiBwZXJmb3JtIHF1ZXJpZXMsIHNvIHdlIG5lZWQKCQkJLy8gdG8gZmx1c2ggYWdhaW4sIGp1c3QgdG8gbWFrZSBzdXJlIGV2ZXJ5dGhpbmcgaXMgY2xlYXIuCgkJCSR0aGlzLT5mbHVzaCgpOwoJCQlpZiAoICRzdHJpcHBlZF9xdWVyeSAhPT0gJHF1ZXJ5ICkgewoJCQkJJHRoaXMtPmluc2VydF9pZCA9IDA7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9CgoJCS8vIEJhY2t1cEJ1ZGR5OiBDaGFuZ2VkIGZvbGxvd2luZyBsaW5lIGZyb20gdHJ1ZSB0byBmYWxzZS4gRG9uJ3QgcnVuIHRoaXMgY2hlY2sgZXZlciBkdXJpbmcgaW1wb3J0LgoJCSR0aGlzLT5jaGVja19jdXJyZW50X3F1ZXJ5ID0gZmFsc2U7IC8vIHdhczogdHJ1ZQoKCQkvLyBLZWVwIHRyYWNrIG9mIHRoZSBsYXN0IHF1ZXJ5IGZvciBkZWJ1Zy4uCgkJJHRoaXMtPmxhc3RfcXVlcnkgPSAkcXVlcnk7CgoJCSR0aGlzLT5fZG9fcXVlcnkoICRxdWVyeSApOwoKCQkvLyBNeVNRTCBzZXJ2ZXIgaGFzIGdvbmUgYXdheSwgdHJ5IHRvIHJlY29ubmVjdAoJCSRteXNxbF9lcnJubyA9IDA7CgkJaWYgKCAhIGVtcHR5KCAkdGhpcy0+ZGJoICkgKSB7CgkJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCQkkbXlzcWxfZXJybm8gPSBteXNxbGlfZXJybm8oICR0aGlzLT5kYmggKTsKCQkJfSBlbHNlIHsKCQkJCSRteXNxbF9lcnJubyA9IG15c3FsX2Vycm5vKCAkdGhpcy0+ZGJoICk7CgkJCX0KCQl9CgoJCWlmICggZW1wdHkoICR0aGlzLT5kYmggKSB8fCAyMDA2ID09ICRteXNxbF9lcnJubyApIHsKCQkJaWYgKCAkdGhpcy0+Y2hlY2tfY29ubmVjdGlvbigpICkgewoJCQkJJHRoaXMtPl9kb19xdWVyeSggJHF1ZXJ5ICk7CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy0+aW5zZXJ0X2lkID0gMDsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCgkJLy8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgdGhlbiB0YWtlIG5vdGUgb2YgaXQuLgoJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCSR0aGlzLT5sYXN0X2Vycm9yID0gbXlzcWxpX2Vycm9yKCAkdGhpcy0+ZGJoICk7CgkJfSBlbHNlIHsKCQkJJHRoaXMtPmxhc3RfZXJyb3IgPSBteXNxbF9lcnJvciggJHRoaXMtPmRiaCApOwoJCX0KCgkJaWYgKCAkdGhpcy0+bGFzdF9lcnJvciApIHsKCQkJLy8gQ2xlYXIgaW5zZXJ0X2lkIG9uIGEgc3Vic2VxdWVudCBmYWlsZWQgaW5zZXJ0LgoJCQlpZiAoICR0aGlzLT5pbnNlcnRfaWQgJiYgcHJlZ19tYXRjaCggJy9eXHMqKGluc2VydHxyZXBsYWNlKVxzL2knLCAkcXVlcnkgKSApCgkJCQkkdGhpcy0+aW5zZXJ0X2lkID0gMDsKCgkJCSR0aGlzLT5wcmludF9lcnJvcigpOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlpZiAoIHByZWdfbWF0Y2goICcvXlxzKihjcmVhdGV8YWx0ZXJ8dHJ1bmNhdGV8ZHJvcClccy9pJywgJHF1ZXJ5ICkgKSB7CgkJCSRyZXR1cm5fdmFsID0gJHRoaXMtPnJlc3VsdDsKCQl9IGVsc2VpZiAoIHByZWdfbWF0Y2goICcvXlxzKihpbnNlcnR8ZGVsZXRlfHVwZGF0ZXxyZXBsYWNlKVxzL2knLCAkcXVlcnkgKSApIHsKCQkJaWYgKCAkdGhpcy0+dXNlX215c3FsaSApIHsKCQkJCSR0aGlzLT5yb3dzX2FmZmVjdGVkID0gbXlzcWxpX2FmZmVjdGVkX3Jvd3MoICR0aGlzLT5kYmggKTsKCQkJfSBlbHNlIHsKCQkJCSR0aGlzLT5yb3dzX2FmZmVjdGVkID0gbXlzcWxfYWZmZWN0ZWRfcm93cyggJHRoaXMtPmRiaCApOwoJCQl9CgkJCS8vIFRha2Ugbm90ZSBvZiB0aGUgaW5zZXJ0X2lkCgkJCWlmICggcHJlZ19tYXRjaCggJy9eXHMqKGluc2VydHxyZXBsYWNlKVxzL2knLCAkcXVlcnkgKSApIHsKCQkJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgKSB7CgkJCQkJJHRoaXMtPmluc2VydF9pZCA9IG15c3FsaV9pbnNlcnRfaWQoICR0aGlzLT5kYmggKTsKCQkJCX0gZWxzZSB7CgkJCQkJJHRoaXMtPmluc2VydF9pZCA9IG15c3FsX2luc2VydF9pZCggJHRoaXMtPmRiaCApOwoJCQkJfQoJCQl9CgkJCS8vIFJldHVybiBudW1iZXIgb2Ygcm93cyBhZmZlY3RlZAoJCQkkcmV0dXJuX3ZhbCA9ICR0aGlzLT5yb3dzX2FmZmVjdGVkOwoJCX0gZWxzZSB7CgkJCSRudW1fcm93cyA9IDA7CgkJCWlmICggJHRoaXMtPnVzZV9teXNxbGkgJiYgJHRoaXMtPnJlc3VsdCBpbnN0YW5jZW9mIG15c3FsaV9yZXN1bHQgKSB7CgkJCQl3aGlsZSAoICRyb3cgPSBAbXlzcWxpX2ZldGNoX29iamVjdCggJHRoaXMtPnJlc3VsdCApICkgewoJCQkJCSR0aGlzLT5sYXN0X3Jlc3VsdFskbnVtX3Jvd3NdID0gJHJvdzsKCQkJCQkkbnVtX3Jvd3MrKzsKCQkJCX0KCQkJfSBlbHNlaWYgKCBpc19yZXNvdXJjZSggJHRoaXMtPnJlc3VsdCApICkgewoJCQkJd2hpbGUgKCAkcm93ID0gQG15c3FsX2ZldGNoX29iamVjdCggJHRoaXMtPnJlc3VsdCApICkgewoJCQkJCSR0aGlzLT5sYXN0X3Jlc3VsdFskbnVtX3Jvd3NdID0gJHJvdzsKCQkJCQkkbnVtX3Jvd3MrKzsKCQkJCX0KCQkJfQoKCQkJLy8gTG9nIG51bWJlciBvZiByb3dzIHRoZSBxdWVyeSByZXR1cm5lZAoJCQkvLyBhbmQgcmV0dXJuIG51bWJlciBvZiByb3dzIHNlbGVjdGVkCgkJCSR0aGlzLT5udW1fcm93cyA9ICRudW1fcm93czsKCQkJJHJldHVybl92YWwgICAgID0gJG51bV9yb3dzOwoJCX0KCgkJcmV0dXJuICRyZXR1cm5fdmFsOwoJfQoKCS8qKgoJICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgbXlzcWxfcXVlcnkoKSBjYWxsLgoJICoKCSAqIEBzaW5jZSAzLjkuMAoJICoKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogQHNlZSB3cGRiOjpxdWVyeSgpCgkgKgoJICogQHBhcmFtIHN0cmluZyAkcXVlcnkgVGhlIHF1ZXJ5IHRvIHJ1bi4KCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBfZG9fcXVlcnkoICRxdWVyeSApIHsKCQlpZiAoIGRlZmluZWQoICdTQVZFUVVFUklFUycgKSAmJiBTQVZFUVVFUklFUyApIHsKCQkJJHRoaXMtPnRpbWVyX3N0YXJ0KCk7CgkJfQoKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkkdGhpcy0+cmVzdWx0ID0gQG15c3FsaV9xdWVyeSggJHRoaXMtPmRiaCwgJHF1ZXJ5ICk7CgkJfSBlbHNlIHsKCQkJJHRoaXMtPnJlc3VsdCA9IEBteXNxbF9xdWVyeSggJHF1ZXJ5LCAkdGhpcy0+ZGJoICk7CgkJfQoJCSR0aGlzLT5udW1fcXVlcmllcysrOwoKCQlpZiAoIGRlZmluZWQoICdTQVZFUVVFUklFUycgKSAmJiBTQVZFUVVFUklFUyApIHsKCQkJJHRoaXMtPnF1ZXJpZXNbXSA9IGFycmF5KCAkcXVlcnksICR0aGlzLT50aW1lcl9zdG9wKCksICR0aGlzLT5nZXRfY2FsbGVyKCkgKTsKCQl9Cgl9CgoJLyoqCgkgKiBJbnNlcnQgYSByb3cgaW50byBhIHRhYmxlLgoJICoKCSAqICAgICB3cGRiOjppbnNlcnQoICd0YWJsZScsIGFycmF5KCAnY29sdW1uJyA9PiAnZm9vJywgJ2ZpZWxkJyA9PiAnYmFyJyApICkKCSAqICAgICB3cGRiOjppbnNlcnQoICd0YWJsZScsIGFycmF5KCAnY29sdW1uJyA9PiAnZm9vJywgJ2ZpZWxkJyA9PiAxMzM3ICksIGFycmF5KCAnJXMnLCAnJWQnICkgKQoJICoKCSAqIEBzaW5jZSAyLjUuMAoJICogQHNlZSB3cGRiOjpwcmVwYXJlKCkKCSAqIEBzZWUgd3BkYjo6JGZpZWxkX3R5cGVzCgkgKiBAc2VlIHdwX3NldF93cGRiX3ZhcnMoKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgICAgICAgJHRhYmxlICBUYWJsZSBuYW1lCgkgKiBAcGFyYW0gYXJyYXkgICAgICAgICRkYXRhICAgRGF0YSB0byBpbnNlcnQgKGluIGNvbHVtbiA9PiB2YWx1ZSBwYWlycykuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQm90aCAkZGF0YSBjb2x1bW5zIGFuZCAkZGF0YSB2YWx1ZXMgc2hvdWxkIGJlICJyYXciIChuZWl0aGVyIHNob3VsZCBiZSBTUUwgZXNjYXBlZCkuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VuZGluZyBhIG51bGwgdmFsdWUgd2lsbCBjYXVzZSB0aGUgY29sdW1uIHRvIGJlIHNldCB0byBOVUxMIC0gdGhlIGNvcnJlc3BvbmRpbmcgZm9ybWF0IGlzIGlnbm9yZWQgaW4gdGhpcyBjYXNlLgoJICogQHBhcmFtIGFycmF5fHN0cmluZyAkZm9ybWF0IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBmb3JtYXRzIHRvIGJlIG1hcHBlZCB0byBlYWNoIG9mIHRoZSB2YWx1ZSBpbiAkZGF0YS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzdHJpbmcsIHRoYXQgZm9ybWF0IHdpbGwgYmUgdXNlZCBmb3IgYWxsIG9mIHRoZSB2YWx1ZXMgaW4gJGRhdGEuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBmb3JtYXQgaXMgb25lIG9mICclZCcsICclZicsICclcycgKGludGVnZXIsIGZsb2F0LCBzdHJpbmcpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG9taXR0ZWQsIGFsbCB2YWx1ZXMgaW4gJGRhdGEgd2lsbCBiZSB0cmVhdGVkIGFzIHN0cmluZ3MgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQgaW4gd3BkYjo6JGZpZWxkX3R5cGVzLgoJICogQHJldHVybiBpbnR8ZmFsc2UgVGhlIG51bWJlciBvZiByb3dzIGluc2VydGVkLCBvciBmYWxzZSBvbiBlcnJvci4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGluc2VydCggJHRhYmxlLCAkZGF0YSwgJGZvcm1hdCA9IG51bGwgKSB7CgkJcmV0dXJuICR0aGlzLT5faW5zZXJ0X3JlcGxhY2VfaGVscGVyKCAkdGFibGUsICRkYXRhLCAkZm9ybWF0LCAnSU5TRVJUJyApOwoJfQoKCS8qKgoJICogUmVwbGFjZSBhIHJvdyBpbnRvIGEgdGFibGUuCgkgKgoJICogICAgIHdwZGI6OnJlcGxhY2UoICd0YWJsZScsIGFycmF5KCAnY29sdW1uJyA9PiAnZm9vJywgJ2ZpZWxkJyA9PiAnYmFyJyApICkKCSAqICAgICB3cGRiOjpyZXBsYWNlKCAndGFibGUnLCBhcnJheSggJ2NvbHVtbicgPT4gJ2ZvbycsICdmaWVsZCcgPT4gMTMzNyApLCBhcnJheSggJyVzJywgJyVkJyApICkKCSAqCgkgKiBAc2luY2UgMy4wLjAKCSAqIEBzZWUgd3BkYjo6cHJlcGFyZSgpCgkgKiBAc2VlIHdwZGI6OiRmaWVsZF90eXBlcwoJICogQHNlZSB3cF9zZXRfd3BkYl92YXJzKCkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICAgICAgICR0YWJsZSAgVGFibGUgbmFtZQoJICogQHBhcmFtIGFycmF5ICAgICAgICAkZGF0YSAgIERhdGEgdG8gaW5zZXJ0IChpbiBjb2x1bW4gPT4gdmFsdWUgcGFpcnMpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJvdGggJGRhdGEgY29sdW1ucyBhbmQgJGRhdGEgdmFsdWVzIHNob3VsZCBiZSAicmF3IiAobmVpdGhlciBzaG91bGQgYmUgU1FMIGVzY2FwZWQpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbmRpbmcgYSBudWxsIHZhbHVlIHdpbGwgY2F1c2UgdGhlIGNvbHVtbiB0byBiZSBzZXQgdG8gTlVMTCAtIHRoZSBjb3JyZXNwb25kaW5nIGZvcm1hdCBpcyBpZ25vcmVkIGluIHRoaXMgY2FzZS4KCSAqIEBwYXJhbSBhcnJheXxzdHJpbmcgJGZvcm1hdCBPcHRpb25hbC4gQW4gYXJyYXkgb2YgZm9ybWF0cyB0byBiZSBtYXBwZWQgdG8gZWFjaCBvZiB0aGUgdmFsdWUgaW4gJGRhdGEuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgc3RyaW5nLCB0aGF0IGZvcm1hdCB3aWxsIGJlIHVzZWQgZm9yIGFsbCBvZiB0aGUgdmFsdWVzIGluICRkYXRhLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgZm9ybWF0IGlzIG9uZSBvZiAnJWQnLCAnJWYnLCAnJXMnIChpbnRlZ2VyLCBmbG9hdCwgc3RyaW5nKS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBvbWl0dGVkLCBhbGwgdmFsdWVzIGluICRkYXRhIHdpbGwgYmUgdHJlYXRlZCBhcyBzdHJpbmdzIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkIGluIHdwZGI6OiRmaWVsZF90eXBlcy4KCSAqIEByZXR1cm4gaW50fGZhbHNlIFRoZSBudW1iZXIgb2Ygcm93cyBhZmZlY3RlZCwgb3IgZmFsc2Ugb24gZXJyb3IuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiByZXBsYWNlKCAkdGFibGUsICRkYXRhLCAkZm9ybWF0ID0gbnVsbCApIHsKCQlyZXR1cm4gJHRoaXMtPl9pbnNlcnRfcmVwbGFjZV9oZWxwZXIoICR0YWJsZSwgJGRhdGEsICRmb3JtYXQsICdSRVBMQUNFJyApOwoJfQoKCS8qKgoJICogSGVscGVyIGZ1bmN0aW9uIGZvciBpbnNlcnQgYW5kIHJlcGxhY2UuCgkgKgoJICogUnVucyBhbiBpbnNlcnQgb3IgcmVwbGFjZSBxdWVyeSBiYXNlZCBvbiAkdHlwZSBhcmd1bWVudC4KCSAqCgkgKiBAYWNjZXNzIHByaXZhdGUKCSAqIEBzaW5jZSAzLjAuMAoJICogQHNlZSB3cGRiOjpwcmVwYXJlKCkKCSAqIEBzZWUgd3BkYjo6JGZpZWxkX3R5cGVzCgkgKiBAc2VlIHdwX3NldF93cGRiX3ZhcnMoKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgICAgICAgJHRhYmxlICBUYWJsZSBuYW1lCgkgKiBAcGFyYW0gYXJyYXkgICAgICAgICRkYXRhICAgRGF0YSB0byBpbnNlcnQgKGluIGNvbHVtbiA9PiB2YWx1ZSBwYWlycykuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQm90aCAkZGF0YSBjb2x1bW5zIGFuZCAkZGF0YSB2YWx1ZXMgc2hvdWxkIGJlICJyYXciIChuZWl0aGVyIHNob3VsZCBiZSBTUUwgZXNjYXBlZCkuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VuZGluZyBhIG51bGwgdmFsdWUgd2lsbCBjYXVzZSB0aGUgY29sdW1uIHRvIGJlIHNldCB0byBOVUxMIC0gdGhlIGNvcnJlc3BvbmRpbmcgZm9ybWF0IGlzIGlnbm9yZWQgaW4gdGhpcyBjYXNlLgoJICogQHBhcmFtIGFycmF5fHN0cmluZyAkZm9ybWF0IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBmb3JtYXRzIHRvIGJlIG1hcHBlZCB0byBlYWNoIG9mIHRoZSB2YWx1ZSBpbiAkZGF0YS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzdHJpbmcsIHRoYXQgZm9ybWF0IHdpbGwgYmUgdXNlZCBmb3IgYWxsIG9mIHRoZSB2YWx1ZXMgaW4gJGRhdGEuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBmb3JtYXQgaXMgb25lIG9mICclZCcsICclZicsICclcycgKGludGVnZXIsIGZsb2F0LCBzdHJpbmcpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG9taXR0ZWQsIGFsbCB2YWx1ZXMgaW4gJGRhdGEgd2lsbCBiZSB0cmVhdGVkIGFzIHN0cmluZ3MgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQgaW4gd3BkYjo6JGZpZWxkX3R5cGVzLgoJICogQHBhcmFtIHN0cmluZyAkdHlwZSAgICAgICAgIE9wdGlvbmFsLiBXaGF0IHR5cGUgb2Ygb3BlcmF0aW9uIGlzIHRoaXM/IElOU0VSVCBvciBSRVBMQUNFLiBEZWZhdWx0cyB0byBJTlNFUlQuCgkgKiBAcmV0dXJuIGludHxmYWxzZSBUaGUgbnVtYmVyIG9mIHJvd3MgYWZmZWN0ZWQsIG9yIGZhbHNlIG9uIGVycm9yLgoJICovCglmdW5jdGlvbiBfaW5zZXJ0X3JlcGxhY2VfaGVscGVyKCAkdGFibGUsICRkYXRhLCAkZm9ybWF0ID0gbnVsbCwgJHR5cGUgPSAnSU5TRVJUJyApIHsKCQkkdGhpcy0+aW5zZXJ0X2lkID0gMDsKCgkJaWYgKCAhIGluX2FycmF5KCBzdHJ0b3VwcGVyKCAkdHlwZSApLCBhcnJheSggJ1JFUExBQ0UnLCAnSU5TRVJUJyApICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRkYXRhID0gJHRoaXMtPnByb2Nlc3NfZmllbGRzKCAkdGFibGUsICRkYXRhLCAkZm9ybWF0ICk7CgkJaWYgKCBmYWxzZSA9PT0gJGRhdGEgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRmb3JtYXRzID0gJHZhbHVlcyA9IGFycmF5KCk7CgkJZm9yZWFjaCAoICRkYXRhIGFzICR2YWx1ZSApIHsKCQkJaWYgKCBpc19udWxsKCAkdmFsdWVbJ3ZhbHVlJ10gKSApIHsKCQkJCSRmb3JtYXRzW10gPSAnTlVMTCc7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJJGZvcm1hdHNbXSA9ICR2YWx1ZVsnZm9ybWF0J107CgkJCSR2YWx1ZXNbXSAgPSAkdmFsdWVbJ3ZhbHVlJ107CgkJfQoKCQkkZmllbGRzICA9ICdgJyAuIGltcGxvZGUoICdgLCBgJywgYXJyYXlfa2V5cyggJGRhdGEgKSApIC4gJ2AnOwoJCSRmb3JtYXRzID0gaW1wbG9kZSggJywgJywgJGZvcm1hdHMgKTsKCgkJJHNxbCA9ICIkdHlwZSBJTlRPIGAkdGFibGVgICgkZmllbGRzKSBWQUxVRVMgKCRmb3JtYXRzKSI7CgoJCSR0aGlzLT5jaGVja19jdXJyZW50X3F1ZXJ5ID0gZmFsc2U7CgkJcmV0dXJuICR0aGlzLT5xdWVyeSggJHRoaXMtPnByZXBhcmUoICRzcWwsICR2YWx1ZXMgKSApOwoJfQoKCS8qKgoJICogVXBkYXRlIGEgcm93IGluIHRoZSB0YWJsZQoJICoKCSAqICAgICB3cGRiOjp1cGRhdGUoICd0YWJsZScsIGFycmF5KCAnY29sdW1uJyA9PiAnZm9vJywgJ2ZpZWxkJyA9PiAnYmFyJyApLCBhcnJheSggJ0lEJyA9PiAxICkgKQoJICogICAgIHdwZGI6OnVwZGF0ZSggJ3RhYmxlJywgYXJyYXkoICdjb2x1bW4nID0+ICdmb28nLCAnZmllbGQnID0+IDEzMzcgKSwgYXJyYXkoICdJRCcgPT4gMSApLCBhcnJheSggJyVzJywgJyVkJyApLCBhcnJheSggJyVkJyApICkKCSAqCgkgKiBAc2luY2UgMi41LjAKCSAqIEBzZWUgd3BkYjo6cHJlcGFyZSgpCgkgKiBAc2VlIHdwZGI6OiRmaWVsZF90eXBlcwoJICogQHNlZSB3cF9zZXRfd3BkYl92YXJzKCkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICAgICAgICR0YWJsZSAgICAgICAgVGFibGUgbmFtZQoJICogQHBhcmFtIGFycmF5ICAgICAgICAkZGF0YSAgICAgICAgIERhdGEgdG8gdXBkYXRlIChpbiBjb2x1bW4gPT4gdmFsdWUgcGFpcnMpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJvdGggJGRhdGEgY29sdW1ucyBhbmQgJGRhdGEgdmFsdWVzIHNob3VsZCBiZSAicmF3IiAobmVpdGhlciBzaG91bGQgYmUgU1FMIGVzY2FwZWQpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbmRpbmcgYSBudWxsIHZhbHVlIHdpbGwgY2F1c2UgdGhlIGNvbHVtbiB0byBiZSBzZXQgdG8gTlVMTCAtIHRoZSBjb3JyZXNwb25kaW5nCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0IGlzIGlnbm9yZWQgaW4gdGhpcyBjYXNlLgoJICogQHBhcmFtIGFycmF5ICAgICAgICAkd2hlcmUgICAgICAgIEEgbmFtZWQgYXJyYXkgb2YgV0hFUkUgY2xhdXNlcyAoaW4gY29sdW1uID0+IHZhbHVlIHBhaXJzKS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNdWx0aXBsZSBjbGF1c2VzIHdpbGwgYmUgam9pbmVkIHdpdGggQU5Ecy4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCb3RoICR3aGVyZSBjb2x1bW5zIGFuZCAkd2hlcmUgdmFsdWVzIHNob3VsZCBiZSAicmF3Ii4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5kaW5nIGEgbnVsbCB2YWx1ZSB3aWxsIGNyZWF0ZSBhbiBJUyBOVUxMIGNvbXBhcmlzb24gLSB0aGUgY29ycmVzcG9uZGluZyBmb3JtYXQgd2lsbCBiZSBpZ25vcmVkIGluIHRoaXMgY2FzZS4KCSAqIEBwYXJhbSBhcnJheXxzdHJpbmcgJGZvcm1hdCAgICAgICBPcHRpb25hbC4gQW4gYXJyYXkgb2YgZm9ybWF0cyB0byBiZSBtYXBwZWQgdG8gZWFjaCBvZiB0aGUgdmFsdWVzIGluICRkYXRhLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHN0cmluZywgdGhhdCBmb3JtYXQgd2lsbCBiZSB1c2VkIGZvciBhbGwgb2YgdGhlIHZhbHVlcyBpbiAkZGF0YS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIGZvcm1hdCBpcyBvbmUgb2YgJyVkJywgJyVmJywgJyVzJyAoaW50ZWdlciwgZmxvYXQsIHN0cmluZykuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgb21pdHRlZCwgYWxsIHZhbHVlcyBpbiAkZGF0YSB3aWxsIGJlIHRyZWF0ZWQgYXMgc3RyaW5ncyB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBpbiB3cGRiOjokZmllbGRfdHlwZXMuCgkgKiBAcGFyYW0gYXJyYXl8c3RyaW5nICR3aGVyZV9mb3JtYXQgT3B0aW9uYWwuIEFuIGFycmF5IG9mIGZvcm1hdHMgdG8gYmUgbWFwcGVkIHRvIGVhY2ggb2YgdGhlIHZhbHVlcyBpbiAkd2hlcmUuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgc3RyaW5nLCB0aGF0IGZvcm1hdCB3aWxsIGJlIHVzZWQgZm9yIGFsbCBvZiB0aGUgaXRlbXMgaW4gJHdoZXJlLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEEgZm9ybWF0IGlzIG9uZSBvZiAnJWQnLCAnJWYnLCAnJXMnIChpbnRlZ2VyLCBmbG9hdCwgc3RyaW5nKS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBvbWl0dGVkLCBhbGwgdmFsdWVzIGluICR3aGVyZSB3aWxsIGJlIHRyZWF0ZWQgYXMgc3RyaW5ncy4KCSAqIEByZXR1cm4gaW50fGZhbHNlIFRoZSBudW1iZXIgb2Ygcm93cyB1cGRhdGVkLCBvciBmYWxzZSBvbiBlcnJvci4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZSggJHRhYmxlLCAkZGF0YSwgJHdoZXJlLCAkZm9ybWF0ID0gbnVsbCwgJHdoZXJlX2Zvcm1hdCA9IG51bGwgKSB7CgkJaWYgKCAhIGlzX2FycmF5KCAkZGF0YSApIHx8ICEgaXNfYXJyYXkoICR3aGVyZSApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkkZGF0YSA9ICR0aGlzLT5wcm9jZXNzX2ZpZWxkcyggJHRhYmxlLCAkZGF0YSwgJGZvcm1hdCApOwoJCWlmICggZmFsc2UgPT09ICRkYXRhICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCSR3aGVyZSA9ICR0aGlzLT5wcm9jZXNzX2ZpZWxkcyggJHRhYmxlLCAkd2hlcmUsICR3aGVyZV9mb3JtYXQgKTsKCQlpZiAoIGZhbHNlID09PSAkd2hlcmUgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRmaWVsZHMgPSAkY29uZGl0aW9ucyA9ICR2YWx1ZXMgPSBhcnJheSgpOwoJCWZvcmVhY2ggKCAkZGF0YSBhcyAkZmllbGQgPT4gJHZhbHVlICkgewoJCQlpZiAoIGlzX251bGwoICR2YWx1ZVsndmFsdWUnXSApICkgewoJCQkJJGZpZWxkc1tdID0gImAkZmllbGRgID0gTlVMTCI7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJJGZpZWxkc1tdID0gImAkZmllbGRgID0gIiAuICR2YWx1ZVsnZm9ybWF0J107CgkJCSR2YWx1ZXNbXSA9ICR2YWx1ZVsndmFsdWUnXTsKCQl9CgkJZm9yZWFjaCAoICR3aGVyZSBhcyAkZmllbGQgPT4gJHZhbHVlICkgewoJCQlpZiAoIGlzX251bGwoICR2YWx1ZVsndmFsdWUnXSApICkgewoJCQkJJGNvbmRpdGlvbnNbXSA9ICJgJGZpZWxkYCBJUyBOVUxMIjsKCQkJCWNvbnRpbnVlOwoJCQl9CgoJCQkkY29uZGl0aW9uc1tdID0gImAkZmllbGRgID0gIiAuICR2YWx1ZVsnZm9ybWF0J107CgkJCSR2YWx1ZXNbXSA9ICR2YWx1ZVsndmFsdWUnXTsKCQl9CgoJCSRmaWVsZHMgPSBpbXBsb2RlKCAnLCAnLCAkZmllbGRzICk7CgkJJGNvbmRpdGlvbnMgPSBpbXBsb2RlKCAnIEFORCAnLCAkY29uZGl0aW9ucyApOwoKCQkkc3FsID0gIlVQREFURSBgJHRhYmxlYCBTRVQgJGZpZWxkcyBXSEVSRSAkY29uZGl0aW9ucyI7CgoJCSR0aGlzLT5jaGVja19jdXJyZW50X3F1ZXJ5ID0gZmFsc2U7CgkJcmV0dXJuICR0aGlzLT5xdWVyeSggJHRoaXMtPnByZXBhcmUoICRzcWwsICR2YWx1ZXMgKSApOwoJfQoKCS8qKgoJICogRGVsZXRlIGEgcm93IGluIHRoZSB0YWJsZQoJICoKCSAqICAgICB3cGRiOjpkZWxldGUoICd0YWJsZScsIGFycmF5KCAnSUQnID0+IDEgKSApCgkgKiAgICAgd3BkYjo6ZGVsZXRlKCAndGFibGUnLCBhcnJheSggJ0lEJyA9PiAxICksIGFycmF5KCAnJWQnICkgKQoJICoKCSAqIEBzaW5jZSAzLjQuMAoJICogQHNlZSB3cGRiOjpwcmVwYXJlKCkKCSAqIEBzZWUgd3BkYjo6JGZpZWxkX3R5cGVzCgkgKiBAc2VlIHdwX3NldF93cGRiX3ZhcnMoKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgICAgICAgJHRhYmxlICAgICAgICBUYWJsZSBuYW1lCgkgKiBAcGFyYW0gYXJyYXkgICAgICAgICR3aGVyZSAgICAgICAgQSBuYW1lZCBhcnJheSBvZiBXSEVSRSBjbGF1c2VzIChpbiBjb2x1bW4gPT4gdmFsdWUgcGFpcnMpLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE11bHRpcGxlIGNsYXVzZXMgd2lsbCBiZSBqb2luZWQgd2l0aCBBTkRzLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJvdGggJHdoZXJlIGNvbHVtbnMgYW5kICR3aGVyZSB2YWx1ZXMgc2hvdWxkIGJlICJyYXciLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbmRpbmcgYSBudWxsIHZhbHVlIHdpbGwgY3JlYXRlIGFuIElTIE5VTEwgY29tcGFyaXNvbiAtIHRoZSBjb3JyZXNwb25kaW5nIGZvcm1hdCB3aWxsIGJlIGlnbm9yZWQgaW4gdGhpcyBjYXNlLgoJICogQHBhcmFtIGFycmF5fHN0cmluZyAkd2hlcmVfZm9ybWF0IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBmb3JtYXRzIHRvIGJlIG1hcHBlZCB0byBlYWNoIG9mIHRoZSB2YWx1ZXMgaW4gJHdoZXJlLgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHN0cmluZywgdGhhdCBmb3JtYXQgd2lsbCBiZSB1c2VkIGZvciBhbGwgb2YgdGhlIGl0ZW1zIGluICR3aGVyZS4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIGZvcm1hdCBpcyBvbmUgb2YgJyVkJywgJyVmJywgJyVzJyAoaW50ZWdlciwgZmxvYXQsIHN0cmluZykuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgb21pdHRlZCwgYWxsIHZhbHVlcyBpbiAkd2hlcmUgd2lsbCBiZSB0cmVhdGVkIGFzIHN0cmluZ3MgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQgaW4gd3BkYjo6JGZpZWxkX3R5cGVzLgoJICogQHJldHVybiBpbnR8ZmFsc2UgVGhlIG51bWJlciBvZiByb3dzIHVwZGF0ZWQsIG9yIGZhbHNlIG9uIGVycm9yLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZGVsZXRlKCAkdGFibGUsICR3aGVyZSwgJHdoZXJlX2Zvcm1hdCA9IG51bGwgKSB7CgkJaWYgKCAhIGlzX2FycmF5KCAkd2hlcmUgKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJJHdoZXJlID0gJHRoaXMtPnByb2Nlc3NfZmllbGRzKCAkdGFibGUsICR3aGVyZSwgJHdoZXJlX2Zvcm1hdCApOwoJCWlmICggZmFsc2UgPT09ICR3aGVyZSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJJGNvbmRpdGlvbnMgPSAkdmFsdWVzID0gYXJyYXkoKTsKCQlmb3JlYWNoICggJHdoZXJlIGFzICRmaWVsZCA9PiAkdmFsdWUgKSB7CgkJCWlmICggaXNfbnVsbCggJHZhbHVlWyd2YWx1ZSddICkgKSB7CgkJCQkkY29uZGl0aW9uc1tdID0gImAkZmllbGRgIElTIE5VTEwiOwoJCQkJY29udGludWU7CgkJCX0KCgkJCSRjb25kaXRpb25zW10gPSAiYCRmaWVsZGAgPSAiIC4gJHZhbHVlWydmb3JtYXQnXTsKCQkJJHZhbHVlc1tdID0gJHZhbHVlWyd2YWx1ZSddOwoJCX0KCgkJJGNvbmRpdGlvbnMgPSBpbXBsb2RlKCAnIEFORCAnLCAkY29uZGl0aW9ucyApOwoKCQkkc3FsID0gIkRFTEVURSBGUk9NIGAkdGFibGVgIFdIRVJFICRjb25kaXRpb25zIjsKCgkJJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgPSBmYWxzZTsKCQlyZXR1cm4gJHRoaXMtPnF1ZXJ5KCAkdGhpcy0+cHJlcGFyZSggJHNxbCwgJHZhbHVlcyApICk7Cgl9CgoJLyoqCgkgKiBQcm9jZXNzZXMgYXJyYXlzIG9mIGZpZWxkL3ZhbHVlIHBhaXJzIGFuZCBmaWVsZCBmb3JtYXRzLgoJICoKCSAqIFRoaXMgaXMgYSBoZWxwZXIgbWV0aG9kIGZvciB3cGRiJ3MgQ1JVRCBtZXRob2RzLCB3aGljaCB0YWtlIGZpZWxkL3ZhbHVlCgkgKiBwYWlycyBmb3IgaW5zZXJ0cywgdXBkYXRlcywgYW5kIHdoZXJlIGNsYXVzZXMuIFRoaXMgbWV0aG9kIGZpcnN0IHBhaXJzCgkgKiBlYWNoIHZhbHVlIHdpdGggYSBmb3JtYXQuIFRoZW4gaXQgZGV0ZXJtaW5lcyB0aGUgY2hhcnNldCBvZiB0aGF0IGZpZWxkLAoJICogdXNpbmcgdGhhdCB0byBkZXRlcm1pbmUgaWYgYW55IGludmFsaWQgdGV4dCB3b3VsZCBiZSBzdHJpcHBlZC4gSWYgdGV4dCBpcwoJICogc3RyaXBwZWQsIHRoZW4gZmllbGQgcHJvY2Vzc2luZyBpcyByZWplY3RlZCBhbmQgdGhlIHF1ZXJ5IGZhaWxzLgoJICoKCSAqIEBzaW5jZSA0LjIuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR0YWJsZSAgVGFibGUgbmFtZS4KCSAqIEBwYXJhbSBhcnJheSAgJGRhdGEgICBGaWVsZC92YWx1ZSBwYWlyLgoJICogQHBhcmFtIG1peGVkICAkZm9ybWF0IEZvcm1hdCBmb3IgZWFjaCBmaWVsZC4KCSAqIEByZXR1cm4gYXJyYXl8ZmFsc2UgUmV0dXJucyBhbiBhcnJheSBvZiBmaWVsZHMgdGhhdCBjb250YWluIHBhaXJlZCB2YWx1ZXMKCSAqICAgICAgICAgICAgICAgICAgICBhbmQgZm9ybWF0cy4gUmV0dXJucyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZXMuCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBwcm9jZXNzX2ZpZWxkcyggJHRhYmxlLCAkZGF0YSwgJGZvcm1hdCApIHsKCQkkZGF0YSA9ICR0aGlzLT5wcm9jZXNzX2ZpZWxkX2Zvcm1hdHMoICRkYXRhLCAkZm9ybWF0ICk7CgkJaWYgKCBmYWxzZSA9PT0gJGRhdGEgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRkYXRhID0gJHRoaXMtPnByb2Nlc3NfZmllbGRfY2hhcnNldHMoICRkYXRhLCAkdGFibGUgKTsKCQlpZiAoIGZhbHNlID09PSAkZGF0YSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJJGRhdGEgPSAkdGhpcy0+cHJvY2Vzc19maWVsZF9sZW5ndGhzKCAkZGF0YSwgJHRhYmxlICk7CgkJaWYgKCBmYWxzZSA9PT0gJGRhdGEgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSRjb252ZXJ0ZWRfZGF0YSA9ICR0aGlzLT5zdHJpcF9pbnZhbGlkX3RleHQoICRkYXRhICk7CgoJCWlmICggJGRhdGEgIT09ICRjb252ZXJ0ZWRfZGF0YSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJcmV0dXJuICRkYXRhOwoJfQoKCS8qKgoJICogUHJlcGFyZXMgYXJyYXlzIG9mIHZhbHVlL2Zvcm1hdCBwYWlycyBhcyBwYXNzZWQgdG8gd3BkYiBDUlVEIG1ldGhvZHMuCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICoKCSAqIEBwYXJhbSBhcnJheSAkZGF0YSAgIEFycmF5IG9mIGZpZWxkcyB0byB2YWx1ZXMuCgkgKiBAcGFyYW0gbWl4ZWQgJGZvcm1hdCBGb3JtYXRzIHRvIGJlIG1hcHBlZCB0byB0aGUgdmFsdWVzIGluICRkYXRhLgoJICogQHJldHVybiBhcnJheSBBcnJheSwga2V5ZWQgYnkgZmllbGQgbmFtZXMgd2l0aCB2YWx1ZXMgYmVpbmcgYW4gYXJyYXkKCSAqICAgICAgICAgICAgICAgb2YgJ3ZhbHVlJyBhbmQgJ2Zvcm1hdCcga2V5cy4KCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIHByb2Nlc3NfZmllbGRfZm9ybWF0cyggJGRhdGEsICRmb3JtYXQgKSB7CgkJJGZvcm1hdHMgPSAkb3JpZ2luYWxfZm9ybWF0cyA9IChhcnJheSkgJGZvcm1hdDsKCgkJZm9yZWFjaCAoICRkYXRhIGFzICRmaWVsZCA9PiAkdmFsdWUgKSB7CgkJCSR2YWx1ZSA9IGFycmF5KAoJCQkJJ3ZhbHVlJyAgPT4gJHZhbHVlLAoJCQkJJ2Zvcm1hdCcgPT4gJyVzJywKCQkJKTsKCgkJCWlmICggISBlbXB0eSggJGZvcm1hdCApICkgewoJCQkJJHZhbHVlWydmb3JtYXQnXSA9IGFycmF5X3NoaWZ0KCAkZm9ybWF0cyApOwoJCQkJaWYgKCAhICR2YWx1ZVsnZm9ybWF0J10gKSB7CgkJCQkJJHZhbHVlWydmb3JtYXQnXSA9IHJlc2V0KCAkb3JpZ2luYWxfZm9ybWF0cyApOwoJCQkJfQoJCQl9IGVsc2VpZiAoIGlzc2V0KCAkdGhpcy0+ZmllbGRfdHlwZXNbICRmaWVsZCBdICkgKSB7CgkJCQkkdmFsdWVbJ2Zvcm1hdCddID0gJHRoaXMtPmZpZWxkX3R5cGVzWyAkZmllbGQgXTsKCQkJfQoKCQkJJGRhdGFbICRmaWVsZCBdID0gJHZhbHVlOwoJCX0KCgkJcmV0dXJuICRkYXRhOwoJfQoKCS8qKgoJICogQWRkcyBmaWVsZCBjaGFyc2V0cyB0byBmaWVsZC92YWx1ZS9mb3JtYXQgYXJyYXlzIGdlbmVyYXRlZCBieQoJICogdGhlIHdwZGI6OnByb2Nlc3NfZmllbGRfZm9ybWF0cygpIG1ldGhvZC4KCSAqCgkgKiBAc2luY2UgNC4yLjAKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKgoJICogQHBhcmFtIGFycmF5ICAkZGF0YSAgQXMgaXQgY29tZXMgZnJvbSB0aGUgd3BkYjo6cHJvY2Vzc19maWVsZF9mb3JtYXRzKCkgbWV0aG9kLgoJICogQHBhcmFtIHN0cmluZyAkdGFibGUgVGFibGUgbmFtZS4KCSAqIEByZXR1cm4gYXJyYXl8ZmFsc2UgVGhlIHNhbWUgYXJyYXkgYXMgJGRhdGEgd2l0aCBhZGRpdGlvbmFsICdjaGFyc2V0JyBrZXlzLgoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gcHJvY2Vzc19maWVsZF9jaGFyc2V0cyggJGRhdGEsICR0YWJsZSApIHsKCQlmb3JlYWNoICggJGRhdGEgYXMgJGZpZWxkID0+ICR2YWx1ZSApIHsKCQkJaWYgKCAnJWQnID09PSAkdmFsdWVbJ2Zvcm1hdCddIHx8ICclZicgPT09ICR2YWx1ZVsnZm9ybWF0J10gKSB7CgkJCQkvKgoJCQkJICogV2UgY2FuIHNraXAgdGhpcyBmaWVsZCBpZiB3ZSBrbm93IGl0IGlzbid0IGEgc3RyaW5nLgoJCQkJICogVGhpcyBjaGVja3MgJWQvJWYgdmVyc3VzICEgJXMgYmVjYXVzZSBpdHMgc3ByaW50ZigpIGNvdWxkIHRha2UgbW9yZS4KCQkJCSAqLwoJCQkJJHZhbHVlWydjaGFyc2V0J10gPSBmYWxzZTsKCQkJfSBlbHNlIHsKCQkJCSR2YWx1ZVsnY2hhcnNldCddID0gJHRoaXMtPmdldF9jb2xfY2hhcnNldCggJHRhYmxlLCAkZmllbGQgKTsKCQkJCWlmICggaXNfd3BfZXJyb3IoICR2YWx1ZVsnY2hhcnNldCddICkgKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQl9CgoJCQkkZGF0YVsgJGZpZWxkIF0gPSAkdmFsdWU7CgkJfQoKCQlyZXR1cm4gJGRhdGE7Cgl9CgoJLyoqCgkgKiBGb3Igc3RyaW5nIGZpZWxkcywgcmVjb3JkIHRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGggdGhhdCBmaWVsZCBjYW4gc2FmZWx5IHNhdmUuCgkgKgoJICogQHNpbmNlIDQuMi4xCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICoKCSAqIEBwYXJhbSBhcnJheSAgJGRhdGEgIEFzIGl0IGNvbWVzIGZyb20gdGhlIHdwZGI6OnByb2Nlc3NfZmllbGRfY2hhcnNldHMoKSBtZXRob2QuCgkgKiBAcGFyYW0gc3RyaW5nICR0YWJsZSBUYWJsZSBuYW1lLgoJICogQHJldHVybiBhcnJheXxmYWxzZSBUaGUgc2FtZSBhcnJheSBhcyAkZGF0YSB3aXRoIGFkZGl0aW9uYWwgJ2xlbmd0aCcga2V5cywgb3IgZmFsc2UgaWYKCSAqICAgICAgICAgICAgICAgICAgICAgYW55IG9mIHRoZSB2YWx1ZXMgd2VyZSB0b28gbG9uZyBmb3IgdGhlaXIgY29ycmVzcG9uZGluZyBmaWVsZC4KCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIHByb2Nlc3NfZmllbGRfbGVuZ3RocyggJGRhdGEsICR0YWJsZSApIHsKCQlmb3JlYWNoICggJGRhdGEgYXMgJGZpZWxkID0+ICR2YWx1ZSApIHsKCQkJaWYgKCAnJWQnID09PSAkdmFsdWVbJ2Zvcm1hdCddIHx8ICclZicgPT09ICR2YWx1ZVsnZm9ybWF0J10gKSB7CgkJCQkvKgoJCQkJICogV2UgY2FuIHNraXAgdGhpcyBmaWVsZCBpZiB3ZSBrbm93IGl0IGlzbid0IGEgc3RyaW5nLgoJCQkJICogVGhpcyBjaGVja3MgJWQvJWYgdmVyc3VzICEgJXMgYmVjYXVzZSBpdHMgc3ByaW50ZigpIGNvdWxkIHRha2UgbW9yZS4KCQkJCSAqLwoJCQkJJHZhbHVlWydsZW5ndGgnXSA9IGZhbHNlOwoJCQl9IGVsc2UgewoJCQkJJHZhbHVlWydsZW5ndGgnXSA9ICR0aGlzLT5nZXRfY29sX2xlbmd0aCggJHRhYmxlLCAkZmllbGQgKTsKCQkJCWlmICggaXNfd3BfZXJyb3IoICR2YWx1ZVsnbGVuZ3RoJ10gKSApIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0KCgkJCSRkYXRhWyAkZmllbGQgXSA9ICR2YWx1ZTsKCQl9CgoJCXJldHVybiAkZGF0YTsKCX0KCgkvKioKCSAqIFJldHJpZXZlIG9uZSB2YXJpYWJsZSBmcm9tIHRoZSBkYXRhYmFzZS4KCSAqCgkgKiBFeGVjdXRlcyBhIFNRTCBxdWVyeSBhbmQgcmV0dXJucyB0aGUgdmFsdWUgZnJvbSB0aGUgU1FMIHJlc3VsdC4KCSAqIElmIHRoZSBTUUwgcmVzdWx0IGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgY29sdW1uIGFuZC9vciBtb3JlIHRoYW4gb25lIHJvdywgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB2YWx1ZSBpbiB0aGUgY29sdW1uIGFuZCByb3cgc3BlY2lmaWVkLgoJICogSWYgJHF1ZXJ5IGlzIG51bGwsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgaW4gdGhlIHNwZWNpZmllZCBjb2x1bW4gYW5kIHJvdyBmcm9tIHRoZSBwcmV2aW91cyBTUUwgcmVzdWx0LgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZ3xudWxsICRxdWVyeSBPcHRpb25hbC4gU1FMIHF1ZXJ5LiBEZWZhdWx0cyB0byBudWxsLCB1c2UgdGhlIHJlc3VsdCBmcm9tIHRoZSBwcmV2aW91cyBxdWVyeS4KCSAqIEBwYXJhbSBpbnQgICAgICAgICAkeCAgICAgT3B0aW9uYWwuIENvbHVtbiBvZiB2YWx1ZSB0byByZXR1cm4uIEluZGV4ZWQgZnJvbSAwLgoJICogQHBhcmFtIGludCAgICAgICAgICR5ICAgICBPcHRpb25hbC4gUm93IG9mIHZhbHVlIHRvIHJldHVybi4gSW5kZXhlZCBmcm9tIDAuCgkgKiBAcmV0dXJuIHN0cmluZ3xudWxsIERhdGFiYXNlIHF1ZXJ5IHJlc3VsdCAoYXMgc3RyaW5nKSwgb3IgbnVsbCBvbiBmYWlsdXJlCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRfdmFyKCAkcXVlcnkgPSBudWxsLCAkeCA9IDAsICR5ID0gMCApIHsKCQkkdGhpcy0+ZnVuY19jYWxsID0gIlwkZGItPmdldF92YXIoXCIkcXVlcnlcIiwgJHgsICR5KSI7CgoJCWlmICggJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgJiYgJHRoaXMtPmNoZWNrX3NhZmVfY29sbGF0aW9uKCAkcXVlcnkgKSApIHsKCQkJJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgPSBmYWxzZTsKCQl9CgoJCWlmICggJHF1ZXJ5ICkgewoJCQkkdGhpcy0+cXVlcnkoICRxdWVyeSApOwoJCX0KCgkJLy8gRXh0cmFjdCB2YXIgb3V0IG9mIGNhY2hlZCByZXN1bHRzIGJhc2VkIHgseSB2YWxzCgkJaWYgKCAhZW1wdHkoICR0aGlzLT5sYXN0X3Jlc3VsdFskeV0gKSApIHsKCQkJJHZhbHVlcyA9IGFycmF5X3ZhbHVlcyggZ2V0X29iamVjdF92YXJzKCAkdGhpcy0+bGFzdF9yZXN1bHRbJHldICkgKTsKCQl9CgoJCS8vIElmIHRoZXJlIGlzIGEgdmFsdWUgcmV0dXJuIGl0IGVsc2UgcmV0dXJuIG51bGwKCQlyZXR1cm4gKCBpc3NldCggJHZhbHVlc1skeF0gKSAmJiAkdmFsdWVzWyR4XSAhPT0gJycgKSA/ICR2YWx1ZXNbJHhdIDogbnVsbDsKCX0KCgkvKioKCSAqIFJldHJpZXZlIG9uZSByb3cgZnJvbSB0aGUgZGF0YWJhc2UuCgkgKgoJICogRXhlY3V0ZXMgYSBTUUwgcXVlcnkgYW5kIHJldHVybnMgdGhlIHJvdyBmcm9tIHRoZSBTUUwgcmVzdWx0LgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZ3xudWxsICRxdWVyeSAgU1FMIHF1ZXJ5LgoJICogQHBhcmFtIHN0cmluZyAgICAgICRvdXRwdXQgT3B0aW9uYWwuIG9uZSBvZiBBUlJBWV9BIHwgQVJSQVlfTiB8IE9CSkVDVCBjb25zdGFudHMuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXR1cm4gYW4gYXNzb2NpYXRpdmUgYXJyYXkgKGNvbHVtbiA9PiB2YWx1ZSwgLi4uKSwKCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgbnVtZXJpY2FsbHkgaW5kZXhlZCBhcnJheSAoMCA9PiB2YWx1ZSwgLi4uKSBvcgoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW4gb2JqZWN0ICggLT5jb2x1bW4gPSB2YWx1ZSApLCByZXNwZWN0aXZlbHkuCgkgKiBAcGFyYW0gaW50ICAgICAgICAgJHkgICAgICBPcHRpb25hbC4gUm93IHRvIHJldHVybi4gSW5kZXhlZCBmcm9tIDAuCgkgKiBAcmV0dXJuIGFycmF5fG9iamVjdHxudWxsfHZvaWQgRGF0YWJhc2UgcXVlcnkgcmVzdWx0IGluIGZvcm1hdCBzcGVjaWZpZWQgYnkgJG91dHB1dCBvciBudWxsIG9uIGZhaWx1cmUKCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9yb3coICRxdWVyeSA9IG51bGwsICRvdXRwdXQgPSBPQkpFQ1QsICR5ID0gMCApIHsKCQkkdGhpcy0+ZnVuY19jYWxsID0gIlwkZGItPmdldF9yb3coXCIkcXVlcnlcIiwkb3V0cHV0LCR5KSI7CgoJCWlmICggJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgJiYgJHRoaXMtPmNoZWNrX3NhZmVfY29sbGF0aW9uKCAkcXVlcnkgKSApIHsKCQkJJHRoaXMtPmNoZWNrX2N1cnJlbnRfcXVlcnkgPSBmYWxzZTsKCQl9CgoJCWlmICggJHF1ZXJ5ICkgewoJCQkkdGhpcy0+cXVlcnkoICRxdWVyeSApOwoJCX0gZWxzZSB7CgkJCXJldHVybiBudWxsOwoJCX0KCgkJaWYgKCAhaXNzZXQoICR0aGlzLT5sYXN0X3Jlc3VsdFskeV0gKSApCgkJCXJldHVybiBudWxsOwoKCQlpZiAoICRvdXRwdXQgPT0gT0JKRUNUICkgewoJCQlyZXR1cm4gJHRoaXMtPmxhc3RfcmVzdWx0WyR5XSA/ICR0aGlzLT5sYXN0X3Jlc3VsdFskeV0gOiBudWxsOwoJCX0gZWxzZWlmICggJG91dHB1dCA9PSBBUlJBWV9BICkgewoJCQlyZXR1cm4gJHRoaXMtPmxhc3RfcmVzdWx0WyR5XSA/IGdldF9vYmplY3RfdmFycyggJHRoaXMtPmxhc3RfcmVzdWx0WyR5XSApIDogbnVsbDsKCQl9IGVsc2VpZiAoICRvdXRwdXQgPT0gQVJSQVlfTiApIHsKCQkJcmV0dXJuICR0aGlzLT5sYXN0X3Jlc3VsdFskeV0gPyBhcnJheV92YWx1ZXMoIGdldF9vYmplY3RfdmFycyggJHRoaXMtPmxhc3RfcmVzdWx0WyR5XSApICkgOiBudWxsOwoJCX0gZWxzZWlmICggc3RydG91cHBlciggJG91dHB1dCApID09PSBPQkpFQ1QgKSB7CgkJCS8vIEJhY2sgY29tcGF0IGZvciBPQkpFQ1QgYmVpbmcgcHJldmlvdXNseSBjYXNlIGluc2Vuc2l0aXZlLgoJCQlyZXR1cm4gJHRoaXMtPmxhc3RfcmVzdWx0WyR5XSA/ICR0aGlzLT5sYXN0X3Jlc3VsdFskeV0gOiBudWxsOwoJCX0gZWxzZSB7CgkJCSR0aGlzLT5wcmludF9lcnJvciggIiBcJGRiLT5nZXRfcm93KHN0cmluZyBxdWVyeSwgb3V0cHV0IHR5cGUsIGludCBvZmZzZXQpIC0tIE91dHB1dCB0eXBlIG11c3QgYmUgb25lIG9mOiBPQkpFQ1QsIEFSUkFZX0EsIEFSUkFZX04iICk7CgkJfQoJfQoKCS8qKgoJICogUmV0cmlldmUgb25lIGNvbHVtbiBmcm9tIHRoZSBkYXRhYmFzZS4KCSAqCgkgKiBFeGVjdXRlcyBhIFNRTCBxdWVyeSBhbmQgcmV0dXJucyB0aGUgY29sdW1uIGZyb20gdGhlIFNRTCByZXN1bHQuCgkgKiBJZiB0aGUgU1FMIHJlc3VsdCBjb250YWlucyBtb3JlIHRoYW4gb25lIGNvbHVtbiwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjb2x1bW4gc3BlY2lmaWVkLgoJICogSWYgJHF1ZXJ5IGlzIG51bGwsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgc3BlY2lmaWVkIGNvbHVtbiBmcm9tIHRoZSBwcmV2aW91cyBTUUwgcmVzdWx0LgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZ3xudWxsICRxdWVyeSBPcHRpb25hbC4gU1FMIHF1ZXJ5LiBEZWZhdWx0cyB0byBwcmV2aW91cyBxdWVyeS4KCSAqIEBwYXJhbSBpbnQgICAgICAgICAkeCAgICAgT3B0aW9uYWwuIENvbHVtbiB0byByZXR1cm4uIEluZGV4ZWQgZnJvbSAwLgoJICogQHJldHVybiBhcnJheSBEYXRhYmFzZSBxdWVyeSByZXN1bHQuIEFycmF5IGluZGV4ZWQgZnJvbSAwIGJ5IFNRTCByZXN1bHQgcm93IG51bWJlci4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9jb2woICRxdWVyeSA9IG51bGwgLCAkeCA9IDAgKSB7CgkJaWYgKCAkdGhpcy0+Y2hlY2tfY3VycmVudF9xdWVyeSAmJiAkdGhpcy0+Y2hlY2tfc2FmZV9jb2xsYXRpb24oICRxdWVyeSApICkgewoJCQkkdGhpcy0+Y2hlY2tfY3VycmVudF9xdWVyeSA9IGZhbHNlOwoJCX0KCgkJaWYgKCAkcXVlcnkgKSB7CgkJCSR0aGlzLT5xdWVyeSggJHF1ZXJ5ICk7CgkJfQoKCQkkbmV3X2FycmF5ID0gYXJyYXkoKTsKCQkvLyBFeHRyYWN0IHRoZSBjb2x1bW4gdmFsdWVzCgkJZm9yICggJGkgPSAwLCAkaiA9IGNvdW50KCAkdGhpcy0+bGFzdF9yZXN1bHQgKTsgJGkgPCAkajsgJGkrKyApIHsKCQkJJG5ld19hcnJheVskaV0gPSAkdGhpcy0+Z2V0X3ZhciggbnVsbCwgJHgsICRpICk7CgkJfQoJCXJldHVybiAkbmV3X2FycmF5OwoJfQoKCS8qKgoJICogUmV0cmlldmUgYW4gZW50aXJlIFNRTCByZXN1bHQgc2V0IGZyb20gdGhlIGRhdGFiYXNlIChpLmUuLCBtYW55IHJvd3MpCgkgKgoJICogRXhlY3V0ZXMgYSBTUUwgcXVlcnkgYW5kIHJldHVybnMgdGhlIGVudGlyZSBTUUwgcmVzdWx0LgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZyAkcXVlcnkgIFNRTCBxdWVyeS4KCSAqIEBwYXJhbSBzdHJpbmcgJG91dHB1dCBPcHRpb25hbC4gQW55IG9mIEFSUkFZX0EgfCBBUlJBWV9OIHwgT0JKRUNUIHwgT0JKRUNUX0sgY29uc3RhbnRzLgoJICogICAgICAgICAgICAgICAgICAgICAgIFdpdGggb25lIG9mIHRoZSBmaXJzdCB0aHJlZSwgcmV0dXJuIGFuIGFycmF5IG9mIHJvd3MgaW5kZXhlZCBmcm9tIDAgYnkgU1FMIHJlc3VsdCByb3cgbnVtYmVyLgoJICogICAgICAgICAgICAgICAgICAgICAgIEVhY2ggcm93IGlzIGFuIGFzc29jaWF0aXZlIGFycmF5IChjb2x1bW4gPT4gdmFsdWUsIC4uLiksIGEgbnVtZXJpY2FsbHkgaW5kZXhlZCBhcnJheSAoMCA9PiB2YWx1ZSwgLi4uKSwgb3IgYW4gb2JqZWN0LiAoIC0+Y29sdW1uID0gdmFsdWUgKSwgcmVzcGVjdGl2ZWx5LgoJICogICAgICAgICAgICAgICAgICAgICAgIFdpdGggT0JKRUNUX0ssIHJldHVybiBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiByb3cgb2JqZWN0cyBrZXllZCBieSB0aGUgdmFsdWUgb2YgZWFjaCByb3cncyBmaXJzdCBjb2x1bW4ncyB2YWx1ZS4KCSAqICAgICAgICAgICAgICAgICAgICAgICBEdXBsaWNhdGUga2V5cyBhcmUgZGlzY2FyZGVkLgoJICogQHJldHVybiBhcnJheXxvYmplY3R8bnVsbCBEYXRhYmFzZSBxdWVyeSByZXN1bHRzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRfcmVzdWx0cyggJHF1ZXJ5ID0gbnVsbCwgJG91dHB1dCA9IE9CSkVDVCApIHsKCQkkdGhpcy0+ZnVuY19jYWxsID0gIlwkZGItPmdldF9yZXN1bHRzKFwiJHF1ZXJ5XCIsICRvdXRwdXQpIjsKCgkJaWYgKCAkdGhpcy0+Y2hlY2tfY3VycmVudF9xdWVyeSAmJiAkdGhpcy0+Y2hlY2tfc2FmZV9jb2xsYXRpb24oICRxdWVyeSApICkgewoJCQkkdGhpcy0+Y2hlY2tfY3VycmVudF9xdWVyeSA9IGZhbHNlOwoJCX0KCgkJaWYgKCAkcXVlcnkgKSB7CgkJCSR0aGlzLT5xdWVyeSggJHF1ZXJ5ICk7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIG51bGw7CgkJfQoKCQkkbmV3X2FycmF5ID0gYXJyYXkoKTsKCQlpZiAoICRvdXRwdXQgPT0gT0JKRUNUICkgewoJCQkvLyBSZXR1cm4gYW4gaW50ZWdlci1rZXllZCBhcnJheSBvZiByb3cgb2JqZWN0cwoJCQlyZXR1cm4gJHRoaXMtPmxhc3RfcmVzdWx0OwoJCX0gZWxzZWlmICggJG91dHB1dCA9PSBPQkpFQ1RfSyApIHsKCQkJLy8gUmV0dXJuIGFuIGFycmF5IG9mIHJvdyBvYmplY3RzIHdpdGgga2V5cyBmcm9tIGNvbHVtbiAxCgkJCS8vIChEdXBsaWNhdGVzIGFyZSBkaXNjYXJkZWQpCgkJCWZvcmVhY2ggKCAkdGhpcy0+bGFzdF9yZXN1bHQgYXMgJHJvdyApIHsKCQkJCSR2YXJfYnlfcmVmID0gZ2V0X29iamVjdF92YXJzKCAkcm93ICk7CgkJCQkka2V5ID0gYXJyYXlfc2hpZnQoICR2YXJfYnlfcmVmICk7CgkJCQlpZiAoICEgaXNzZXQoICRuZXdfYXJyYXlbICRrZXkgXSApICkKCQkJCQkkbmV3X2FycmF5WyAka2V5IF0gPSAkcm93OwoJCQl9CgkJCXJldHVybiAkbmV3X2FycmF5OwoJCX0gZWxzZWlmICggJG91dHB1dCA9PSBBUlJBWV9BIHx8ICRvdXRwdXQgPT0gQVJSQVlfTiApIHsKCQkJLy8gUmV0dXJuIGFuIGludGVnZXIta2V5ZWQgYXJyYXkgb2YuLi4KCQkJaWYgKCAkdGhpcy0+bGFzdF9yZXN1bHQgKSB7CgkJCQlmb3JlYWNoICggKGFycmF5KSAkdGhpcy0+bGFzdF9yZXN1bHQgYXMgJHJvdyApIHsKCQkJCQlpZiAoICRvdXRwdXQgPT0gQVJSQVlfTiApIHsKCQkJCQkJLy8gLi4uaW50ZWdlci1rZXllZCByb3cgYXJyYXlzCgkJCQkJCSRuZXdfYXJyYXlbXSA9IGFycmF5X3ZhbHVlcyggZ2V0X29iamVjdF92YXJzKCAkcm93ICkgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyAuLi5jb2x1bW4gbmFtZS1rZXllZCByb3cgYXJyYXlzCgkJCQkJCSRuZXdfYXJyYXlbXSA9IGdldF9vYmplY3RfdmFycyggJHJvdyApOwoJCQkJCX0KCQkJCX0KCQkJfQoJCQlyZXR1cm4gJG5ld19hcnJheTsKCQl9IGVsc2VpZiAoIHN0cnRvdXBwZXIoICRvdXRwdXQgKSA9PT0gT0JKRUNUICkgewoJCQkvLyBCYWNrIGNvbXBhdCBmb3IgT0JKRUNUIGJlaW5nIHByZXZpb3VzbHkgY2FzZSBpbnNlbnNpdGl2ZS4KCQkJcmV0dXJuICR0aGlzLT5sYXN0X3Jlc3VsdDsKCQl9CgkJcmV0dXJuIG51bGw7Cgl9CgoJLyoqCgkgKiBSZXRyaWV2ZXMgdGhlIGNoYXJhY3RlciBzZXQgZm9yIHRoZSBnaXZlbiB0YWJsZS4KCSAqCgkgKiBAc2luY2UgNC4yLjAKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKgoJICogQHBhcmFtIHN0cmluZyAkdGFibGUgVGFibGUgbmFtZS4KCSAqIEByZXR1cm4gc3RyaW5nfFdQX0Vycm9yIFRhYmxlIGNoYXJhY3RlciBzZXQsIFdQX0Vycm9yIG9iamVjdCBpZiBpdCBjb3VsZG4ndCBiZSBmb3VuZC4KCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF90YWJsZV9jaGFyc2V0KCAkdGFibGUgKSB7CgkJJHRhYmxla2V5ID0gc3RydG9sb3dlciggJHRhYmxlICk7CgoJCS8qKgoJCSAqIEZpbHRlciB0aGUgdGFibGUgY2hhcnNldCB2YWx1ZSBiZWZvcmUgdGhlIERCIGlzIGNoZWNrZWQuCgkJICoKCQkgKiBQYXNzaW5nIGEgbm9uLW51bGwgdmFsdWUgdG8gdGhlIGZpbHRlciB3aWxsIGVmZmVjdGl2ZWx5IHNob3J0LWNpcmN1aXQKCQkgKiBjaGVja2luZyB0aGUgREIgZm9yIHRoZSBjaGFyc2V0LCByZXR1cm5pbmcgdGhhdCB2YWx1ZSBpbnN0ZWFkLgoJCSAqCgkJICogQHNpbmNlIDQuMi4wCgkJICoKCQkgKiBAcGFyYW0gc3RyaW5nICRjaGFyc2V0IFRoZSBjaGFyYWN0ZXIgc2V0IHRvIHVzZS4gRGVmYXVsdCBudWxsLgoJCSAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlICAgVGhlIG5hbWUgb2YgdGhlIHRhYmxlIGJlaW5nIGNoZWNrZWQuCgkJICovCgkJJGNoYXJzZXQgPSBhcHBseV9maWx0ZXJzKCAncHJlX2dldF90YWJsZV9jaGFyc2V0JywgbnVsbCwgJHRhYmxlICk7CgkJaWYgKCBudWxsICE9PSAkY2hhcnNldCApIHsKCQkJcmV0dXJuICRjaGFyc2V0OwoJCX0KCgkJaWYgKCBpc3NldCggJHRoaXMtPnRhYmxlX2NoYXJzZXRbICR0YWJsZWtleSBdICkgKSB7CgkJCXJldHVybiAkdGhpcy0+dGFibGVfY2hhcnNldFsgJHRhYmxla2V5IF07CgkJfQoKCQkkY2hhcnNldHMgPSAkY29sdW1ucyA9IGFycmF5KCk7CgoJCSR0YWJsZV9wYXJ0cyA9IGV4cGxvZGUoICcuJywgJHRhYmxlICk7CgkJJHRhYmxlID0gJ2AnIC4gaW1wbG9kZSggJ2AuYCcsICR0YWJsZV9wYXJ0cyApIC4gJ2AnOwoJCSRyZXN1bHRzID0gJHRoaXMtPmdldF9yZXN1bHRzKCAiU0hPVyBGVUxMIENPTFVNTlMgRlJPTSAkdGFibGUiICk7CgkJaWYgKCAhICRyZXN1bHRzICkgewoJCQlyZXR1cm4gbmV3IFdQX0Vycm9yKCAnd3BkYl9nZXRfdGFibGVfY2hhcnNldF9mYWlsdXJlJyApOwoJCX0KCgkJZm9yZWFjaCAoICRyZXN1bHRzIGFzICRjb2x1bW4gKSB7CgkJCSRjb2x1bW5zWyBzdHJ0b2xvd2VyKCAkY29sdW1uLT5GaWVsZCApIF0gPSAkY29sdW1uOwoJCX0KCgkJJHRoaXMtPmNvbF9tZXRhWyAkdGFibGVrZXkgXSA9ICRjb2x1bW5zOwoKCQlmb3JlYWNoICggJGNvbHVtbnMgYXMgJGNvbHVtbiApIHsKCQkJaWYgKCAhIGVtcHR5KCAkY29sdW1uLT5Db2xsYXRpb24gKSApIHsKCQkJCWxpc3QoICRjaGFyc2V0ICkgPSBleHBsb2RlKCAnXycsICRjb2x1bW4tPkNvbGxhdGlvbiApOwoKCQkJCS8vIElmIHRoZSBjdXJyZW50IGNvbm5lY3Rpb24gY2FuJ3Qgc3VwcG9ydCB1dGY4bWI0IGNoYXJhY3RlcnMsIGxldCdzIG9ubHkgc2VuZCAzLWJ5dGUgdXRmOCBjaGFyYWN0ZXJzLgoJCQkJaWYgKCAndXRmOG1iNCcgPT09ICRjaGFyc2V0ICYmICEgJHRoaXMtPmhhc19jYXAoICd1dGY4bWI0JyApICkgewoJCQkJCSRjaGFyc2V0ID0gJ3V0ZjgnOwoJCQkJfQoKCQkJCSRjaGFyc2V0c1sgc3RydG9sb3dlciggJGNoYXJzZXQgKSBdID0gdHJ1ZTsKCQkJfQoKCQkJbGlzdCggJHR5cGUgKSA9IGV4cGxvZGUoICcoJywgJGNvbHVtbi0+VHlwZSApOwoKCQkJLy8gQSBiaW5hcnkvYmxvYiBtZWFucyB0aGUgd2hvbGUgcXVlcnkgZ2V0cyB0cmVhdGVkIGxpa2UgdGhpcy4KCQkJaWYgKCBpbl9hcnJheSggc3RydG91cHBlciggJHR5cGUgKSwgYXJyYXkoICdCSU5BUlknLCAnVkFSQklOQVJZJywgJ1RJTllCTE9CJywgJ01FRElVTUJMT0InLCAnQkxPQicsICdMT05HQkxPQicgKSApICkgewoJCQkJJHRoaXMtPnRhYmxlX2NoYXJzZXRbICR0YWJsZWtleSBdID0gJ2JpbmFyeSc7CgkJCQlyZXR1cm4gJ2JpbmFyeSc7CgkJCX0KCQl9CgoJCS8vIHV0ZjhtYjMgaXMgYW4gYWxpYXMgZm9yIHV0ZjguCgkJaWYgKCBpc3NldCggJGNoYXJzZXRzWyd1dGY4bWIzJ10gKSApIHsKCQkJJGNoYXJzZXRzWyd1dGY4J10gPSB0cnVlOwoJCQl1bnNldCggJGNoYXJzZXRzWyd1dGY4bWIzJ10gKTsKCQl9CgoJCS8vIENoZWNrIGlmIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSBjaGFyc2V0IGluIHBsYXkuCgkJJGNvdW50ID0gY291bnQoICRjaGFyc2V0cyApOwoJCWlmICggMSA9PT0gJGNvdW50ICkgewoJCQkkY2hhcnNldCA9IGtleSggJGNoYXJzZXRzICk7CgkJfSBlbHNlaWYgKCAwID09PSAkY291bnQgKSB7CgkJCS8vIE5vIGNoYXJzZXRzLCBhc3N1bWUgdGhpcyB0YWJsZSBjYW4gc3RvcmUgd2hhdGV2ZXIuCgkJCSRjaGFyc2V0ID0gZmFsc2U7CgkJfSBlbHNlIHsKCQkJLy8gTW9yZSB0aGFuIG9uZSBjaGFyc2V0LiBSZW1vdmUgbGF0aW4xIGlmIHByZXNlbnQgYW5kIHJlY2FsY3VsYXRlLgoJCQl1bnNldCggJGNoYXJzZXRzWydsYXRpbjEnXSApOwoJCQkkY291bnQgPSBjb3VudCggJGNoYXJzZXRzICk7CgkJCWlmICggMSA9PT0gJGNvdW50ICkgewoJCQkJLy8gT25seSBvbmUgY2hhcnNldCAoYmVzaWRlcyBsYXRpbjEpLgoJCQkJJGNoYXJzZXQgPSBrZXkoICRjaGFyc2V0cyApOwoJCQl9IGVsc2VpZiAoIDIgPT09ICRjb3VudCAmJiBpc3NldCggJGNoYXJzZXRzWyd1dGY4J10sICRjaGFyc2V0c1sndXRmOG1iNCddICkgKSB7CgkJCQkvLyBUd28gY2hhcnNldHMsIGJ1dCB0aGV5J3JlIHV0ZjggYW5kIHV0ZjhtYjQsIHVzZSB1dGY4LgoJCQkJJGNoYXJzZXQgPSAndXRmOCc7CgkJCX0gZWxzZSB7CgkJCQkvLyBUd28gbWl4ZWQgY2hhcmFjdGVyIHNldHMuIGFzY2lpLgoJCQkJJGNoYXJzZXQgPSAnYXNjaWknOwoJCQl9CgkJfQoKCQkkdGhpcy0+dGFibGVfY2hhcnNldFsgJHRhYmxla2V5IF0gPSAkY2hhcnNldDsKCQlyZXR1cm4gJGNoYXJzZXQ7Cgl9CgoJLyoqCgkgKiBSZXRyaWV2ZXMgdGhlIGNoYXJhY3RlciBzZXQgZm9yIHRoZSBnaXZlbiBjb2x1bW4uCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlICBUYWJsZSBuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkY29sdW1uIENvbHVtbiBuYW1lLgoJICogQHJldHVybiBzdHJpbmd8ZmFsc2V8V1BfRXJyb3IgQ29sdW1uIGNoYXJhY3RlciBzZXQgYXMgYSBzdHJpbmcuIEZhbHNlIGlmIHRoZSBjb2x1bW4gaGFzIG5vCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgc2V0LiBXUF9FcnJvciBvYmplY3QgaWYgdGhlcmUgd2FzIGFuIGVycm9yLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0X2NvbF9jaGFyc2V0KCAkdGFibGUsICRjb2x1bW4gKSB7CgkJJHRhYmxla2V5ID0gc3RydG9sb3dlciggJHRhYmxlICk7CgkJJGNvbHVtbmtleSA9IHN0cnRvbG93ZXIoICRjb2x1bW4gKTsKCgkJLyoqCgkJICogRmlsdGVyIHRoZSBjb2x1bW4gY2hhcnNldCB2YWx1ZSBiZWZvcmUgdGhlIERCIGlzIGNoZWNrZWQuCgkJICoKCQkgKiBQYXNzaW5nIGEgbm9uLW51bGwgdmFsdWUgdG8gdGhlIGZpbHRlciB3aWxsIHNob3J0LWNpcmN1aXQKCQkgKiBjaGVja2luZyB0aGUgREIgZm9yIHRoZSBjaGFyc2V0LCByZXR1cm5pbmcgdGhhdCB2YWx1ZSBpbnN0ZWFkLgoJCSAqCgkJICogQHNpbmNlIDQuMi4wCgkJICoKCQkgKiBAcGFyYW0gc3RyaW5nICRjaGFyc2V0IFRoZSBjaGFyYWN0ZXIgc2V0IHRvIHVzZS4gRGVmYXVsdCBudWxsLgoJCSAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlICAgVGhlIG5hbWUgb2YgdGhlIHRhYmxlIGJlaW5nIGNoZWNrZWQuCgkJICogQHBhcmFtIHN0cmluZyAkY29sdW1uICBUaGUgbmFtZSBvZiB0aGUgY29sdW1uIGJlaW5nIGNoZWNrZWQuCgkJICovCgkJJGNoYXJzZXQgPSBhcHBseV9maWx0ZXJzKCAncHJlX2dldF9jb2xfY2hhcnNldCcsIG51bGwsICR0YWJsZSwgJGNvbHVtbiApOwoJCWlmICggbnVsbCAhPT0gJGNoYXJzZXQgKSB7CgkJCXJldHVybiAkY2hhcnNldDsKCQl9CgoJCS8vIFNraXAgdGhpcyBlbnRpcmVseSBpZiB0aGlzIGlzbid0IGEgTXlTUUwgZGF0YWJhc2UuCgkJaWYgKCBlbXB0eSggJHRoaXMtPmlzX215c3FsICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCWlmICggZW1wdHkoICR0aGlzLT50YWJsZV9jaGFyc2V0WyAkdGFibGVrZXkgXSApICkgewoJCQkvLyBUaGlzIHByaW1lcyBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHVzLgoJCQkkdGFibGVfY2hhcnNldCA9ICR0aGlzLT5nZXRfdGFibGVfY2hhcnNldCggJHRhYmxlICk7CgkJCWlmICggaXNfd3BfZXJyb3IoICR0YWJsZV9jaGFyc2V0ICkgKSB7CgkJCQlyZXR1cm4gJHRhYmxlX2NoYXJzZXQ7CgkJCX0KCQl9CgoJCS8vIElmIHN0aWxsIG5vIGNvbHVtbiBpbmZvcm1hdGlvbiwgcmV0dXJuIHRoZSB0YWJsZSBjaGFyc2V0LgoJCWlmICggZW1wdHkoICR0aGlzLT5jb2xfbWV0YVsgJHRhYmxla2V5IF0gKSApIHsKCQkJcmV0dXJuICR0aGlzLT50YWJsZV9jaGFyc2V0WyAkdGFibGVrZXkgXTsKCQl9CgoJCS8vIElmIHRoaXMgY29sdW1uIGRvZXNuJ3QgZXhpc3QsIHJldHVybiB0aGUgdGFibGUgY2hhcnNldC4KCQlpZiAoIGVtcHR5KCAkdGhpcy0+Y29sX21ldGFbICR0YWJsZWtleSBdWyAkY29sdW1ua2V5IF0gKSApIHsKCQkJcmV0dXJuICR0aGlzLT50YWJsZV9jaGFyc2V0WyAkdGFibGVrZXkgXTsKCQl9CgoJCS8vIFJldHVybiBmYWxzZSB3aGVuIGl0J3Mgbm90IGEgc3RyaW5nIGNvbHVtbi4KCQlpZiAoIGVtcHR5KCAkdGhpcy0+Y29sX21ldGFbICR0YWJsZWtleSBdWyAkY29sdW1ua2V5IF0tPkNvbGxhdGlvbiApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlsaXN0KCAkY2hhcnNldCApID0gZXhwbG9kZSggJ18nLCAkdGhpcy0+Y29sX21ldGFbICR0YWJsZWtleSBdWyAkY29sdW1ua2V5IF0tPkNvbGxhdGlvbiApOwoJCXJldHVybiAkY2hhcnNldDsKCX0KCgkvKioKCSAqIFJldHJpZXZlIHRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGggYWxsb3dlZCBpbiBhIGdpdmVuIGNvbHVtbi4KCSAqIFRoZSBsZW5ndGggbWF5IGVpdGhlciBiZSBzcGVjaWZpZWQgYXMgYSBieXRlIGxlbmd0aCBvciBhIGNoYXJhY3RlciBsZW5ndGguCgkgKgoJICogQHNpbmNlIDQuMi4xCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlICBUYWJsZSBuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkY29sdW1uIENvbHVtbiBuYW1lLgoJICogQHJldHVybiBhcnJheXxmYWxzZXxXUF9FcnJvciBhcnJheSggJ2xlbmd0aCcgPT4gKGludCksICd0eXBlJyA9PiAnYnl0ZScgfCAnY2hhcicgKQoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSBpZiB0aGUgY29sdW1uIGhhcyBubyBsZW5ndGggKGZvciBleGFtcGxlLCBudW1lcmljIGNvbHVtbikKCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV1BfRXJyb3Igb2JqZWN0IGlmIHRoZXJlIHdhcyBhbiBlcnJvci4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9jb2xfbGVuZ3RoKCAkdGFibGUsICRjb2x1bW4gKSB7CgkJJHRhYmxla2V5ID0gc3RydG9sb3dlciggJHRhYmxlICk7CgkJJGNvbHVtbmtleSA9IHN0cnRvbG93ZXIoICRjb2x1bW4gKTsKCgkJLy8gU2tpcCB0aGlzIGVudGlyZWx5IGlmIHRoaXMgaXNuJ3QgYSBNeVNRTCBkYXRhYmFzZS4KCQlpZiAoIGVtcHR5KCAkdGhpcy0+aXNfbXlzcWwgKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCBlbXB0eSggJHRoaXMtPmNvbF9tZXRhWyAkdGFibGVrZXkgXSApICkgewoJCQkvLyBUaGlzIHByaW1lcyBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHVzLgoJCQkkdGFibGVfY2hhcnNldCA9ICR0aGlzLT5nZXRfdGFibGVfY2hhcnNldCggJHRhYmxlICk7CgkJCWlmICggaXNfd3BfZXJyb3IoICR0YWJsZV9jaGFyc2V0ICkgKSB7CgkJCQlyZXR1cm4gJHRhYmxlX2NoYXJzZXQ7CgkJCX0KCQl9CgoJCWlmICggZW1wdHkoICR0aGlzLT5jb2xfbWV0YVsgJHRhYmxla2V5IF1bICRjb2x1bW5rZXkgXSApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkkdHlwZWluZm8gPSBleHBsb2RlKCAnKCcsICR0aGlzLT5jb2xfbWV0YVsgJHRhYmxla2V5IF1bICRjb2x1bW5rZXkgXS0+VHlwZSApOwoKCQkkdHlwZSA9IHN0cnRvbG93ZXIoICR0eXBlaW5mb1swXSApOwoJCWlmICggISBlbXB0eSggJHR5cGVpbmZvWzFdICkgKSB7CgkJCSRsZW5ndGggPSB0cmltKCAkdHlwZWluZm9bMV0sICcpJyApOwoJCX0gZWxzZSB7CgkJCSRsZW5ndGggPSBmYWxzZTsKCQl9CgoJCXN3aXRjaCggJHR5cGUgKSB7CgkJCWNhc2UgJ2NoYXInOgoJCQljYXNlICd2YXJjaGFyJzoKCQkJCXJldHVybiBhcnJheSgKCQkJCQkndHlwZScgICA9PiAnY2hhcicsCgkJCQkJJ2xlbmd0aCcgPT4gKGludCkgJGxlbmd0aCwKCQkJCSk7CgoJCQljYXNlICdiaW5hcnknOgoJCQljYXNlICd2YXJiaW5hcnknOgoJCQkJcmV0dXJuIGFycmF5KAoJCQkJCSd0eXBlJyAgID0+ICdieXRlJywKCQkJCQknbGVuZ3RoJyA9PiAoaW50KSAkbGVuZ3RoLAoJCQkJKTsKCgkJCWNhc2UgJ3RpbnlibG9iJzoKCQkJY2FzZSAndGlueXRleHQnOgoJCQkJcmV0dXJuIGFycmF5KAoJCQkJCSd0eXBlJyAgID0+ICdieXRlJywKCQkJCQknbGVuZ3RoJyA9PiAyNTUsICAgICAgICAvLyAyXjggLSAxCgkJCQkpOwoKCQkJY2FzZSAnYmxvYic6CgkJCWNhc2UgJ3RleHQnOgoJCQkJcmV0dXJuIGFycmF5KAoJCQkJCSd0eXBlJyAgID0+ICdieXRlJywKCQkJCQknbGVuZ3RoJyA9PiA2NTUzNSwgICAgICAvLyAyXjE2IC0gMQoJCQkJKTsKCgkJCWNhc2UgJ21lZGl1bWJsb2InOgoJCQljYXNlICdtZWRpdW10ZXh0JzoKCQkJCXJldHVybiBhcnJheSgKCQkJCQkndHlwZScgICA9PiAnYnl0ZScsCgkJCQkJJ2xlbmd0aCcgPT4gMTY3NzcyMTUsICAgLy8gMl4yNCAtIDEKCQkJCSk7CgoJCQljYXNlICdsb25nYmxvYic6CgkJCWNhc2UgJ2xvbmd0ZXh0JzoKCQkJCXJldHVybiBhcnJheSgKCQkJCQkndHlwZScgICA9PiAnYnl0ZScsCgkJCQkJJ2xlbmd0aCcgPT4gNDI5NDk2NzI5NSwgLy8gMl4zMiAtIDEKCQkJCSk7CgoJCQlkZWZhdWx0OgoJCQkJcmV0dXJuIGZhbHNlOwoJCX0KCX0KCgkvKioKCSAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIEFTQ0lJLgoJICoKCSAqIFRoZSBuZWdhdGl2ZSByZWdleCBpcyBmYXN0ZXIgZm9yIG5vbi1BU0NJSSBzdHJpbmdzLCBhcyBpdCBhbGxvd3MKCSAqIHRoZSBzZWFyY2ggdG8gZmluaXNoIGFzIHNvb24gYXMgaXQgZW5jb3VudGVycyBhIG5vbi1BU0NJSSBjaGFyYWN0ZXIuCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHN0cmluZyBTdHJpbmcgdG8gY2hlY2suCgkgKiBAcmV0dXJuIGJvb2wgVHJ1ZSBpZiBBU0NJSSwgZmFsc2UgaWYgbm90LgoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gY2hlY2tfYXNjaWkoICRzdHJpbmcgKSB7CgkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdtYl9jaGVja19lbmNvZGluZycgKSApIHsKCQkJaWYgKCBtYl9jaGVja19lbmNvZGluZyggJHN0cmluZywgJ0FTQ0lJJyApICkgewoJCQkJcmV0dXJuIHRydWU7CgkJCX0KCQl9IGVsc2VpZiAoICEgcHJlZ19tYXRjaCggJy9bXlx4MDAtXHg3Rl0vJywgJHN0cmluZyApICkgewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0KCgkvKioKCSAqIENoZWNrIGlmIHRoZSBxdWVyeSBpcyBhY2Nlc3NpbmcgYSBjb2xsYXRpb24gY29uc2lkZXJlZCBzYWZlIG9uIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgTXlTUUwuCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5IFRoZSBxdWVyeSB0byBjaGVjay4KCSAqIEByZXR1cm4gYm9vbCBUcnVlIGlmIHRoZSBjb2xsYXRpb24gaXMgc2FmZSwgZmFsc2UgaWYgaXQgaXNuJ3QuCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBjaGVja19zYWZlX2NvbGxhdGlvbiggJHF1ZXJ5ICkgewoJCWlmICggJHRoaXMtPmNoZWNraW5nX2NvbGxhdGlvbiApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoKCQkvLyBXZSBkb24ndCBuZWVkIHRvIGNoZWNrIHRoZSBjb2xsYXRpb24gZm9yIHF1ZXJpZXMgdGhhdCBkb24ndCByZWFkIGRhdGEuCgkJJHF1ZXJ5ID0gbHRyaW0oICRxdWVyeSwgIlxyXG5cdCAoIiApOwoJCWlmICggcHJlZ19tYXRjaCggJy9eKD86U0hPV3xERVNDUklCRXxERVNDfEVYUExBSU58Q1JFQVRFKVxzL2knLCAkcXVlcnkgKSApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoKCQkvLyBBbGwtQVNDSUkgcXVlcmllcyBkb24ndCBuZWVkIGV4dHJhIGNoZWNraW5nLgoJCWlmICggJHRoaXMtPmNoZWNrX2FzY2lpKCAkcXVlcnkgKSApIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoKCQkkdGFibGUgPSAkdGhpcy0+Z2V0X3RhYmxlX2Zyb21fcXVlcnkoICRxdWVyeSApOwoJCWlmICggISAkdGFibGUgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCSR0aGlzLT5jaGVja2luZ19jb2xsYXRpb24gPSB0cnVlOwoJCSRjb2xsYXRpb24gPSAkdGhpcy0+Z2V0X3RhYmxlX2NoYXJzZXQoICR0YWJsZSApOwoJCSR0aGlzLT5jaGVja2luZ19jb2xsYXRpb24gPSBmYWxzZTsKCgkJLy8gVGFibGVzIHdpdGggbm8gY29sbGF0aW9uLCBvciBsYXRpbjEgb25seSwgZG9uJ3QgbmVlZCBleHRyYSBjaGVja2luZy4KCQlpZiAoIGZhbHNlID09PSAkY29sbGF0aW9uIHx8ICdsYXRpbjEnID09PSAkY29sbGF0aW9uICkgewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgoJCSR0YWJsZSA9IHN0cnRvbG93ZXIoICR0YWJsZSApOwoJCWlmICggZW1wdHkoICR0aGlzLT5jb2xfbWV0YVsgJHRhYmxlIF0gKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy8gSWYgYW55IG9mIHRoZSBjb2x1bW5zIGRvbid0IGhhdmUgb25lIG9mIHRoZXNlIGNvbGxhdGlvbnMsIGl0IG5lZWRzIG1vcmUgc2FuaXR5IGNoZWNraW5nLgoJCWZvcmVhY2ggKCAkdGhpcy0+Y29sX21ldGFbICR0YWJsZSBdIGFzICRjb2wgKSB7CgkJCWlmICggZW1wdHkoICRjb2wtPkNvbGxhdGlvbiApICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCWlmICggISBpbl9hcnJheSggJGNvbC0+Q29sbGF0aW9uLCBhcnJheSggJ3V0ZjhfZ2VuZXJhbF9jaScsICd1dGY4X2JpbicsICd1dGY4bWI0X2dlbmVyYWxfY2knLCAndXRmOG1iNF9iaW4nICksIHRydWUgKSApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCgkJcmV0dXJuIHRydWU7Cgl9CgoJLyoqCgkgKiBTdHJpcHMgYW55IGludmFsaWQgY2hhcmFjdGVycyBiYXNlZCBvbiB2YWx1ZS9jaGFyc2V0IHBhaXJzLgoJICoKCSAqIEBzaW5jZSA0LjIuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqCgkgKiBAcGFyYW0gYXJyYXkgJGRhdGEgQXJyYXkgb2YgdmFsdWUgYXJyYXlzLiBFYWNoIHZhbHVlIGFycmF5IGhhcyB0aGUga2V5cwoJICogICAgICAgICAgICAgICAgICAgICd2YWx1ZScgYW5kICdjaGFyc2V0Jy4gQW4gb3B0aW9uYWwgJ2FzY2lpJyBrZXkgY2FuIGJlCgkgKiAgICAgICAgICAgICAgICAgICAgc2V0IHRvIGZhbHNlIHRvIGF2b2lkIHJlZHVuZGFudCBBU0NJSSBjaGVja3MuCgkgKiBAcmV0dXJuIGFycmF5fFdQX0Vycm9yIFRoZSAkZGF0YSBwYXJhbWV0ZXIsIHdpdGggaW52YWxpZCBjaGFyYWN0ZXJzIHJlbW92ZWQgZnJvbQoJICogICAgICAgICAgICAgICAgICAgICAgICBlYWNoIHZhbHVlLiBUaGlzIHdvcmtzIGFzIGEgcGFzc3Rocm91Z2g6IGFueSBhZGRpdGlvbmFsIGtleXMKCSAqICAgICAgICAgICAgICAgICAgICAgICAgc3VjaCBhcyAnZmllbGQnIGFyZSByZXRhaW5lZCBpbiBlYWNoIHZhbHVlIGFycmF5LiBJZiB3ZSBjYW5ub3QKCSAqICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlIGludmFsaWQgY2hhcmFjdGVycywgYSBXUF9FcnJvciBvYmplY3QgaXMgcmV0dXJuZWQuCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBzdHJpcF9pbnZhbGlkX3RleHQoICRkYXRhICkgewoJCSRkYl9jaGVja19zdHJpbmcgPSBmYWxzZTsKCgkJZm9yZWFjaCAoICRkYXRhIGFzICYkdmFsdWUgKSB7CgkJCSRjaGFyc2V0ID0gJHZhbHVlWydjaGFyc2V0J107CgoJCQlpZiAoIGlzX2FycmF5KCAkdmFsdWVbJ2xlbmd0aCddICkgKSB7CgkJCQkkbGVuZ3RoID0gJHZhbHVlWydsZW5ndGgnXVsnbGVuZ3RoJ107CgkJCQkkdHJ1bmNhdGVfYnlfYnl0ZV9sZW5ndGggPSAnYnl0ZScgPT09ICR2YWx1ZVsnbGVuZ3RoJ11bJ3R5cGUnXTsKCQkJfSBlbHNlIHsKCQkJCSRsZW5ndGggPSBmYWxzZTsKCQkJCS8vIFNpbmNlIHdlIGhhdmUgbm8gbGVuZ3RoLCB3ZSdsbCBuZXZlciB0cnVuY2F0ZS4KCQkJCS8vIEluaXRpYWxpemUgdGhlIHZhcmlhYmxlIHRvIGZhbHNlLiB0cnVlIHdvdWxkIHRha2UgdXMKCQkJCS8vIHRocm91Z2ggYW4gdW5uZWNlc3NhcnkgKGZvciB0aGlzIGNhc2UpIGNvZGVwYXRoIGJlbG93LgoJCQkJJHRydW5jYXRlX2J5X2J5dGVfbGVuZ3RoID0gZmFsc2U7CgkJCX0KCgkJCS8vIFRoZXJlJ3Mgbm8gY2hhcnNldCB0byB3b3JrIHdpdGguCgkJCWlmICggZmFsc2UgPT09ICRjaGFyc2V0ICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCS8vIENvbHVtbiBpc24ndCBhIHN0cmluZy4KCQkJaWYgKCAhIGlzX3N0cmluZyggJHZhbHVlWyd2YWx1ZSddICkgKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJJG5lZWRzX3ZhbGlkYXRpb24gPSB0cnVlOwoJCQlpZiAoCgkJCQkvLyBsYXRpbjEgY2FuIHN0b3JlIGFueSBieXRlIHNlcXVlbmNlCgkJCQknbGF0aW4xJyA9PT0gJGNoYXJzZXQKCQkJfHwKCQkJCS8vIEFTQ0lJIGlzIGFsd2F5cyBPSy4KCQkJCSggISBpc3NldCggJHZhbHVlWydhc2NpaSddICkgJiYgJHRoaXMtPmNoZWNrX2FzY2lpKCAkdmFsdWVbJ3ZhbHVlJ10gKSApCgkJCSkgewoJCQkJJHRydW5jYXRlX2J5X2J5dGVfbGVuZ3RoID0gdHJ1ZTsKCQkJCSRuZWVkc192YWxpZGF0aW9uID0gZmFsc2U7CgkJCX0KCgkJCWlmICggJHRydW5jYXRlX2J5X2J5dGVfbGVuZ3RoICkgewoJCQkJbWJzdHJpbmdfYmluYXJ5X3NhZmVfZW5jb2RpbmcoKTsKCQkJCWlmICggZmFsc2UgIT09ICRsZW5ndGggJiYgc3RybGVuKCAkdmFsdWVbJ3ZhbHVlJ10gKSA+ICRsZW5ndGggKSB7CgkJCQkJJHZhbHVlWyd2YWx1ZSddID0gc3Vic3RyKCAkdmFsdWVbJ3ZhbHVlJ10sIDAsICRsZW5ndGggKTsKCQkJCX0KCQkJCXJlc2V0X21ic3RyaW5nX2VuY29kaW5nKCk7CgoJCQkJaWYgKCAhICRuZWVkc192YWxpZGF0aW9uICkgewoJCQkJCWNvbnRpbnVlOwoJCQkJfQoJCQl9CgoJCQkvLyB1dGY4IGNhbiBiZSBoYW5kbGVkIGJ5IHJlZ2V4LCB3aGljaCBpcyBhIGJ1bmNoIGZhc3RlciB0aGFuIGEgREIgbG9va3VwLgoJCQlpZiAoICggJ3V0ZjgnID09PSAkY2hhcnNldCB8fCAndXRmOG1iMycgPT09ICRjaGFyc2V0IHx8ICd1dGY4bWI0JyA9PT0gJGNoYXJzZXQgKSAmJiBmdW5jdGlvbl9leGlzdHMoICdtYl9zdHJsZW4nICkgKSB7CgkJCQkkcmVnZXggPSAnLwoJCQkJCSgKCQkJCQkJKD86IFtceDAwLVx4N0ZdICAgICAgICAgICAgICAgICAgIyBzaW5nbGUtYnl0ZSBzZXF1ZW5jZXMgICAweHh4eHh4eAoJCQkJCQl8ICAgW1x4QzItXHhERl1bXHg4MC1ceEJGXSAgICAgICAjIGRvdWJsZS1ieXRlIHNlcXVlbmNlcyAgIDExMHh4eHh4IDEweHh4eHh4CgkJCQkJCXwgICBceEUwW1x4QTAtXHhCRl1bXHg4MC1ceEJGXSAgICMgdHJpcGxlLWJ5dGUgc2VxdWVuY2VzICAgMTExMHh4eHggMTB4eHh4eHggKiAyCgkJCQkJCXwgICBbXHhFMS1ceEVDXVtceDgwLVx4QkZdezJ9CgkJCQkJCXwgICBceEVEW1x4ODAtXHg5Rl1bXHg4MC1ceEJGXQoJCQkJCQl8ICAgW1x4RUUtXHhFRl1bXHg4MC1ceEJGXXsyfSc7CgoJCQkJaWYgKCAndXRmOG1iNCcgPT09ICRjaGFyc2V0ICkgewoJCQkJCSRyZWdleCAuPSAnCgkJCQkJCXwgICAgXHhGMFtceDkwLVx4QkZdW1x4ODAtXHhCRl17Mn0gIyBmb3VyLWJ5dGUgc2VxdWVuY2VzICAgMTExMTB4eHggMTB4eHh4eHggKiAzCgkJCQkJCXwgICAgW1x4RjEtXHhGM11bXHg4MC1ceEJGXXszfQoJCQkJCQl8ICAgIFx4RjRbXHg4MC1ceDhGXVtceDgwLVx4QkZdezJ9CgkJCQkJJzsKCQkJCX0KCgkJCQkkcmVnZXggLj0gJyl7MSw0MH0gICAgICAgICAgICAgICAgICAgICAgICAgICMgLi4ub25lIG9yIG1vcmUgdGltZXMKCQkJCQkpCgkJCQkJfCAuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYW55dGhpbmcgZWxzZQoJCQkJCS94JzsKCQkJCSR2YWx1ZVsndmFsdWUnXSA9IHByZWdfcmVwbGFjZSggJHJlZ2V4LCAnJDEnLCAkdmFsdWVbJ3ZhbHVlJ10gKTsKCgoJCQkJaWYgKCBmYWxzZSAhPT0gJGxlbmd0aCAmJiBtYl9zdHJsZW4oICR2YWx1ZVsndmFsdWUnXSwgJ1VURi04JyApID4gJGxlbmd0aCApIHsKCQkJCQkkdmFsdWVbJ3ZhbHVlJ10gPSBtYl9zdWJzdHIoICR2YWx1ZVsndmFsdWUnXSwgMCwgJGxlbmd0aCwgJ1VURi04JyApOwoJCQkJfQoJCQkJY29udGludWU7CgkJCX0KCgkJCS8vIFdlIGNvdWxkbid0IHVzZSBhbnkgbG9jYWwgY29udmVyc2lvbnMsIHNlbmQgaXQgdG8gdGhlIERCLgoJCQkkdmFsdWVbJ2RiJ10gPSAkZGJfY2hlY2tfc3RyaW5nID0gdHJ1ZTsKCQl9CgkJdW5zZXQoICR2YWx1ZSApOyAvLyBSZW1vdmUgYnkgcmVmZXJlbmNlLgoKCQlpZiAoICRkYl9jaGVja19zdHJpbmcgKSB7CgkJCSRxdWVyaWVzID0gYXJyYXkoKTsKCQkJZm9yZWFjaCAoICRkYXRhIGFzICRjb2wgPT4gJHZhbHVlICkgewoJCQkJaWYgKCAhIGVtcHR5KCAkdmFsdWVbJ2RiJ10gKSApIHsKCQkJCQkvLyBXZSdyZSBnb2luZyB0byBuZWVkIHRvIHRydW5jYXRlIGJ5IGNoYXJhY3RlcnMgb3IgYnl0ZXMsIGRlcGVuZGluZyBvbiB0aGUgbGVuZ3RoIHZhbHVlIHdlIGhhdmUuCgkJCQkJaWYgKCAnYnl0ZScgPT09ICR2YWx1ZVsnbGVuZ3RoJ11bJ3R5cGUnXSApIHsKCQkJCQkJLy8gVXNpbmcgYmluYXJ5IGNhdXNlcyBMRUZUKCkgdG8gdHJ1bmNhdGUgYnkgYnl0ZXMuCgkJCQkJCSRjaGFyc2V0ID0gJ2JpbmFyeSc7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGNoYXJzZXQgPSAkdmFsdWVbJ2NoYXJzZXQnXTsKCQkJCQl9CgoJCQkJCWlmICggaXNfYXJyYXkoICR2YWx1ZVsnbGVuZ3RoJ10gKSApIHsKCQkJCQkJJHF1ZXJpZXNbICRjb2wgXSA9ICR0aGlzLT5wcmVwYXJlKCAiQ09OVkVSVCggTEVGVCggQ09OVkVSVCggJXMgVVNJTkcgJGNoYXJzZXQgKSwgJS4wZiApIFVTSU5HIHskdGhpcy0+Y2hhcnNldH0gKSIsICR2YWx1ZVsndmFsdWUnXSwgJHZhbHVlWydsZW5ndGgnXVsnbGVuZ3RoJ10gKTsKCQkJCQl9IGVsc2UgaWYgKCAnYmluYXJ5JyAhPT0gJGNoYXJzZXQgKSB7CgkJCQkJCS8vIElmIHdlIGRvbid0IGhhdmUgYSBsZW5ndGgsIHRoZXJlJ3Mgbm8gbmVlZCB0byBjb252ZXJ0IGJpbmFyeSAtIGl0IHdpbGwgYWx3YXlzIHJldHVybiB0aGUgc2FtZSByZXN1bHQuCgkJCQkJCSRxdWVyaWVzWyAkY29sIF0gPSAkdGhpcy0+cHJlcGFyZSggIkNPTlZFUlQoIENPTlZFUlQoICVzIFVTSU5HICRjaGFyc2V0ICkgVVNJTkcgeyR0aGlzLT5jaGFyc2V0fSApIiwgJHZhbHVlWyd2YWx1ZSddICk7CgkJCQkJfQoKCQkJCQl1bnNldCggJGRhdGFbICRjb2wgXVsnZGInXSApOwoJCQkJfQoJCQl9CgoJCQkkc3FsID0gYXJyYXkoKTsKCQkJZm9yZWFjaCAoICRxdWVyaWVzIGFzICRjb2x1bW4gPT4gJHF1ZXJ5ICkgewoJCQkJaWYgKCAhICRxdWVyeSApIHsKCQkJCQljb250aW51ZTsKCQkJCX0KCgkJCQkkc3FsW10gPSAkcXVlcnkgLiAiIEFTIHhfJGNvbHVtbiI7CgkJCX0KCgkJCSR0aGlzLT5jaGVja19jdXJyZW50X3F1ZXJ5ID0gZmFsc2U7CgkJCSRyb3cgPSAkdGhpcy0+Z2V0X3JvdyggIlNFTEVDVCAiIC4gaW1wbG9kZSggJywgJywgJHNxbCApLCBBUlJBWV9BICk7CgkJCWlmICggISAkcm93ICkgewoJCQkJcmV0dXJuIG5ldyBXUF9FcnJvciggJ3dwZGJfc3RyaXBfaW52YWxpZF90ZXh0X2ZhaWx1cmUnICk7CgkJCX0KCgkJCWZvcmVhY2ggKCBhcnJheV9rZXlzKCAkZGF0YSApIGFzICRjb2x1bW4gKSB7CgkJCQlpZiAoIGlzc2V0KCAkcm93WyJ4XyRjb2x1bW4iXSApICkgewoJCQkJCSRkYXRhWyAkY29sdW1uIF1bJ3ZhbHVlJ10gPSAkcm93WyJ4XyRjb2x1bW4iXTsKCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuICRkYXRhOwoJfQoKCS8qKgoJICogU3RyaXBzIGFueSBpbnZhbGlkIGNoYXJhY3RlcnMgZnJvbSB0aGUgcXVlcnkuCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHByb3RlY3RlZAoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHF1ZXJ5IFF1ZXJ5IHRvIGNvbnZlcnQuCgkgKiBAcmV0dXJuIHN0cmluZ3xXUF9FcnJvciBUaGUgY29udmVydGVkIHF1ZXJ5LCBvciBhIFdQX0Vycm9yIG9iamVjdCBpZiB0aGUgY29udmVyc2lvbiBmYWlscy4KCSAqLwoJcHJvdGVjdGVkIGZ1bmN0aW9uIHN0cmlwX2ludmFsaWRfdGV4dF9mcm9tX3F1ZXJ5KCAkcXVlcnkgKSB7CgkJLy8gV2UgZG9uJ3QgbmVlZCB0byBjaGVjayB0aGUgY29sbGF0aW9uIGZvciBxdWVyaWVzIHRoYXQgZG9uJ3QgcmVhZCBkYXRhLgoJCSR0cmltbWVkX3F1ZXJ5ID0gbHRyaW0oICRxdWVyeSwgIlxyXG5cdCAoIiApOwoJCWlmICggcHJlZ19tYXRjaCggJy9eKD86U0hPV3xERVNDUklCRXxERVNDfEVYUExBSU58Q1JFQVRFKVxzL2knLCAkdHJpbW1lZF9xdWVyeSApICkgewoJCQlyZXR1cm4gJHF1ZXJ5OwoJCX0KCgkJJHRhYmxlID0gJHRoaXMtPmdldF90YWJsZV9mcm9tX3F1ZXJ5KCAkcXVlcnkgKTsKCQlpZiAoICR0YWJsZSApIHsKCQkJJGNoYXJzZXQgPSAkdGhpcy0+Z2V0X3RhYmxlX2NoYXJzZXQoICR0YWJsZSApOwoJCQlpZiAoIGlzX3dwX2Vycm9yKCAkY2hhcnNldCApICkgewoJCQkJcmV0dXJuICRjaGFyc2V0OwoJCQl9CgoJCQkvLyBXZSBjYW4ndCByZWxpYWJseSBzdHJpcCB0ZXh0IGZyb20gdGFibGVzIGNvbnRhaW5pbmcgYmluYXJ5L2Jsb2IgY29sdW1ucwoJCQlpZiAoICdiaW5hcnknID09PSAkY2hhcnNldCApIHsKCQkJCXJldHVybiAkcXVlcnk7CgkJCX0KCQl9IGVsc2UgewoJCQkkY2hhcnNldCA9ICR0aGlzLT5jaGFyc2V0OwoJCX0KCgkJJGRhdGEgPSBhcnJheSgKCQkJJ3ZhbHVlJyAgID0+ICRxdWVyeSwKCQkJJ2NoYXJzZXQnID0+ICRjaGFyc2V0LAoJCQknYXNjaWknICAgPT4gZmFsc2UsCgkJCSdsZW5ndGgnICA9PiBmYWxzZSwKCQkpOwoKCQkkZGF0YSA9ICR0aGlzLT5zdHJpcF9pbnZhbGlkX3RleHQoIGFycmF5KCAkZGF0YSApICk7CgkJaWYgKCBpc193cF9lcnJvciggJGRhdGEgKSApIHsKCQkJcmV0dXJuICRkYXRhOwoJCX0KCgkJcmV0dXJuICRkYXRhWzBdWyd2YWx1ZSddOwoJfQoKCS8qKgoJICogU3RyaXBzIGFueSBpbnZhbGlkIGNoYXJhY3RlcnMgZnJvbSB0aGUgc3RyaW5nIGZvciBhIGdpdmVuIHRhYmxlIGFuZCBjb2x1bW4uCgkgKgoJICogQHNpbmNlIDQuMi4wCgkgKiBAYWNjZXNzIHB1YmxpYwoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHRhYmxlICBUYWJsZSBuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkY29sdW1uIENvbHVtbiBuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkdmFsdWUgIFRoZSB0ZXh0IHRvIGNoZWNrLgoJICogQHJldHVybiBzdHJpbmd8V1BfRXJyb3IgVGhlIGNvbnZlcnRlZCBzdHJpbmcsIG9yIGEgV1BfRXJyb3Igb2JqZWN0IGlmIHRoZSBjb252ZXJzaW9uIGZhaWxzLgoJICovCglwdWJsaWMgZnVuY3Rpb24gc3RyaXBfaW52YWxpZF90ZXh0X2Zvcl9jb2x1bW4oICR0YWJsZSwgJGNvbHVtbiwgJHZhbHVlICkgewoJCWlmICggISBpc19zdHJpbmcoICR2YWx1ZSApICkgewoJCQlyZXR1cm4gJHZhbHVlOwoJCX0KCgkJJGNoYXJzZXQgPSAkdGhpcy0+Z2V0X2NvbF9jaGFyc2V0KCAkdGFibGUsICRjb2x1bW4gKTsKCQlpZiAoICEgJGNoYXJzZXQgKSB7CgkJCS8vIE5vdCBhIHN0cmluZyBjb2x1bW4uCgkJCXJldHVybiAkdmFsdWU7CgkJfSBlbHNlaWYgKCBpc193cF9lcnJvciggJGNoYXJzZXQgKSApIHsKCQkJLy8gQmFpbCBvbiByZWFsIGVycm9ycy4KCQkJcmV0dXJuICRjaGFyc2V0OwoJCX0KCgkJJGRhdGEgPSBhcnJheSgKCQkJJGNvbHVtbiA9PiBhcnJheSgKCQkJCSd2YWx1ZScgICA9PiAkdmFsdWUsCgkJCQknY2hhcnNldCcgPT4gJGNoYXJzZXQsCgkJCQknbGVuZ3RoJyAgPT4gJHRoaXMtPmdldF9jb2xfbGVuZ3RoKCAkdGFibGUsICRjb2x1bW4gKSwKCQkJKQoJCSk7CgoJCSRkYXRhID0gJHRoaXMtPnN0cmlwX2ludmFsaWRfdGV4dCggJGRhdGEgKTsKCQlpZiAoIGlzX3dwX2Vycm9yKCAkZGF0YSApICkgewoJCQlyZXR1cm4gJGRhdGE7CgkJfQoKCQlyZXR1cm4gJGRhdGFbICRjb2x1bW4gXVsndmFsdWUnXTsKCX0KCgkvKioKCSAqIEZpbmQgdGhlIGZpcnN0IHRhYmxlIG5hbWUgcmVmZXJlbmNlZCBpbiBhIHF1ZXJ5LgoJICoKCSAqIEBzaW5jZSA0LjIuMAoJICogQGFjY2VzcyBwcm90ZWN0ZWQKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRxdWVyeSBUaGUgcXVlcnkgdG8gc2VhcmNoLgoJICogQHJldHVybiBzdHJpbmd8ZmFsc2UgJHRhYmxlIFRoZSB0YWJsZSBuYW1lIGZvdW5kLCBvciBmYWxzZSBpZiBhIHRhYmxlIGNvdWxkbid0IGJlIGZvdW5kLgoJICovCglwcm90ZWN0ZWQgZnVuY3Rpb24gZ2V0X3RhYmxlX2Zyb21fcXVlcnkoICRxdWVyeSApIHsKCQkvLyBSZW1vdmUgY2hhcmFjdGVycyB0aGF0IGNhbiBsZWdhbGx5IHRyYWlsIHRoZSB0YWJsZSBuYW1lLgoJCSRxdWVyeSA9IHJ0cmltKCAkcXVlcnksICc7Ly0jJyApOwoKCQkvLyBBbGxvdyAoc2VsZWN0Li4uKSB1bmlvbiBbLi4uXSBzdHlsZSBxdWVyaWVzLiBVc2UgdGhlIGZpcnN0IHF1ZXJ5J3MgdGFibGUgbmFtZS4KCQkkcXVlcnkgPSBsdHJpbSggJHF1ZXJ5LCAiXHJcblx0ICgiICk7CgoJCS8vIFN0cmlwIGV2ZXJ5dGhpbmcgYmV0d2VlbiBwYXJlbnRoZXNlcyBleGNlcHQgbmVzdGVkIHNlbGVjdHMuCgkJJHF1ZXJ5ID0gcHJlZ19yZXBsYWNlKCAnL1woKD8hXHMqc2VsZWN0KVteKF0qP1wpL2lzJywgJygpJywgJHF1ZXJ5ICk7CgoJCS8vIFF1aWNrbHkgbWF0Y2ggbW9zdCBjb21tb24gcXVlcmllcy4KCQlpZiAoIHByZWdfbWF0Y2goICcvXlxzKig/OicKCQkJCS4gJ1NFTEVDVC4qP1xzK0ZST00nCgkJCQkuICd8SU5TRVJUKD86XHMrTE9XX1BSSU9SSVRZfFxzK0RFTEFZRUR8XHMrSElHSF9QUklPUklUWSk/KD86XHMrSUdOT1JFKT8oPzpccytJTlRPKT8nCgkJCQkuICd8UkVQTEFDRSg/OlxzK0xPV19QUklPUklUWXxccytERUxBWUVEKT8oPzpccytJTlRPKT8nCgkJCQkuICd8VVBEQVRFKD86XHMrTE9XX1BSSU9SSVRZKT8oPzpccytJR05PUkUpPycKCQkJCS4gJ3xERUxFVEUoPzpccytMT1dfUFJJT1JJVFl8XHMrUVVJQ0t8XHMrSUdOT1JFKSooPzpccytGUk9NKT8nCgkJCQkuICcpXHMrKCg/OlswLTlhLXpBLVokXy5gLV18W1x4QzItXHhERl1bXHg4MC1ceEJGXSkrKS9pcycsICRxdWVyeSwgJG1heWJlICkgKSB7CgkJCXJldHVybiBzdHJfcmVwbGFjZSggJ2AnLCAnJywgJG1heWJlWzFdICk7CgkJfQoKCQkvLyBTSE9XIFRBQkxFIFNUQVRVUyBhbmQgU0hPVyBUQUJMRVMKCQlpZiAoIHByZWdfbWF0Y2goICcvXlxzKig/OicKCQkJCS4gJ1NIT1dccytUQUJMRVxzK1NUQVRVUy4rKD86TElLRVxzK3xXSEVSRVxzK05hbWVccyo9XHMqKScKCQkJCS4gJ3xTSE9XXHMrKD86RlVMTFxzKyk/VEFCTEVTLisoPzpMSUtFXHMrfFdIRVJFXHMrTmFtZVxzKj1ccyopJwoJCQkJLiAnKVxXKCg/OlswLTlhLXpBLVokXy5gLV18W1x4QzItXHhERl1bXHg4MC1ceEJGXSkrKVxXL2lzJywgJHF1ZXJ5LCAkbWF5YmUgKSApIHsKCQkJcmV0dXJuIHN0cl9yZXBsYWNlKCAnYCcsICcnLCAkbWF5YmVbMV0gKTsKCQl9CgoJCS8vIEJpZyBwYXR0ZXJuIGZvciB0aGUgcmVzdCBvZiB0aGUgdGFibGUtcmVsYXRlZCBxdWVyaWVzLgoJCWlmICggcHJlZ19tYXRjaCggJy9eXHMqKD86JwoJCQkJLiAnKD86RVhQTEFJTlxzKyg/OkVYVEVOREVEXHMrKT8pP1NFTEVDVC4qP1xzK0ZST00nCgkJCQkuICd8REVTQ1JJQkV8REVTQ3xFWFBMQUlOfEhBTkRMRVInCgkJCQkuICd8KD86TE9DS3xVTkxPQ0spXHMrVEFCTEUoPzpTKT8nCgkJCQkuICd8KD86UkVOQU1FfE9QVElNSVpFfEJBQ0tVUHxSRVNUT1JFfENIRUNLfENIRUNLU1VNfEFOQUxZWkV8UkVQQUlSKS4qXHMrVEFCTEUnCgkJCQkuICd8VFJVTkNBVEUoPzpccytUQUJMRSk/JwoJCQkJLiAnfENSRUFURSg/OlxzK1RFTVBPUkFSWSk/XHMrVEFCTEUoPzpccytJRlxzK05PVFxzK0VYSVNUUyk/JwoJCQkJLiAnfEFMVEVSKD86XHMrSUdOT1JFKT9ccytUQUJMRScKCQkJCS4gJ3xEUk9QXHMrVEFCTEUoPzpccytJRlxzK0VYSVNUUyk/JwoJCQkJLiAnfENSRUFURSg/OlxzK1x3Kyk/XHMrSU5ERVguKlxzK09OJwoJCQkJLiAnfERST1BccytJTkRFWC4qXHMrT04nCgkJCQkuICd8TE9BRFxzK0RBVEEuKklORklMRS4qSU5UT1xzK1RBQkxFJwoJCQkJLiAnfCg/OkdSQU5UfFJFVk9LRSkuKk9OXHMrVEFCTEUnCgkJCQkuICd8U0hPV1xzKyg/Oi4qRlJPTXwuKlRBQkxFKScKCQkJCS4gJylccytcKCpccyooKD86WzAtOWEtekEtWiRfLmAtXXxbXHhDMi1ceERGXVtceDgwLVx4QkZdKSspXHMqXCkqL2lzJywgJHF1ZXJ5LCAkbWF5YmUgKSApIHsKCQkJcmV0dXJuIHN0cl9yZXBsYWNlKCAnYCcsICcnLCAkbWF5YmVbMV0gKTsKCQl9CgoJCXJldHVybiBmYWxzZTsKCX0KCgkvKioKCSAqIExvYWQgdGhlIGNvbHVtbiBtZXRhZGF0YSBmcm9tIHRoZSBsYXN0IHF1ZXJ5LgoJICoKCSAqIEBzaW5jZSAzLjUuMAoJICoKCSAqIEBhY2Nlc3MgcHJvdGVjdGVkCgkgKi8KCXByb3RlY3RlZCBmdW5jdGlvbiBsb2FkX2NvbF9pbmZvKCkgewoJCWlmICggJHRoaXMtPmNvbF9pbmZvICkKCQkJcmV0dXJuOwoKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkkbnVtX2ZpZWxkcyA9IEBteXNxbGlfbnVtX2ZpZWxkcyggJHRoaXMtPnJlc3VsdCApOwoJCQlmb3IgKCAkaSA9IDA7ICRpIDwgJG51bV9maWVsZHM7ICRpKysgKSB7CgkJCQkkdGhpcy0+Y29sX2luZm9bICRpIF0gPSBAbXlzcWxpX2ZldGNoX2ZpZWxkKCAkdGhpcy0+cmVzdWx0ICk7CgkJCX0KCQl9IGVsc2UgewoJCQkkbnVtX2ZpZWxkcyA9IEBteXNxbF9udW1fZmllbGRzKCAkdGhpcy0+cmVzdWx0ICk7CgkJCWZvciAoICRpID0gMDsgJGkgPCAkbnVtX2ZpZWxkczsgJGkrKyApIHsKCQkJCSR0aGlzLT5jb2xfaW5mb1sgJGkgXSA9IEBteXNxbF9mZXRjaF9maWVsZCggJHRoaXMtPnJlc3VsdCwgJGkgKTsKCQkJfQoJCX0KCX0KCgkvKioKCSAqIFJldHJpZXZlIGNvbHVtbiBtZXRhZGF0YSBmcm9tIHRoZSBsYXN0IHF1ZXJ5LgoJICoKCSAqIEBzaW5jZSAwLjcxCgkgKgoJICogQHBhcmFtIHN0cmluZyAkaW5mb190eXBlICBPcHRpb25hbC4gVHlwZSBvbmUgb2YgbmFtZSwgdGFibGUsIGRlZiwgbWF4X2xlbmd0aCwgbm90X251bGwsIHByaW1hcnlfa2V5LCBtdWx0aXBsZV9rZXksIHVuaXF1ZV9rZXksIG51bWVyaWMsIGJsb2IsIHR5cGUsIHVuc2lnbmVkLCB6ZXJvZmlsbAoJICogQHBhcmFtIGludCAgICAkY29sX29mZnNldCBPcHRpb25hbC4gMDogY29sIG5hbWUuIDE6IHdoaWNoIHRhYmxlIHRoZSBjb2wncyBpbi4gMjogY29sJ3MgbWF4IGxlbmd0aC4gMzogaWYgdGhlIGNvbCBpcyBudW1lcmljLiA0OiBjb2wncyB0eXBlCgkgKiBAcmV0dXJuIG1peGVkIENvbHVtbiBSZXN1bHRzCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBnZXRfY29sX2luZm8oICRpbmZvX3R5cGUgPSAnbmFtZScsICRjb2xfb2Zmc2V0ID0gLTEgKSB7CgkJJHRoaXMtPmxvYWRfY29sX2luZm8oKTsKCgkJaWYgKCAkdGhpcy0+Y29sX2luZm8gKSB7CgkJCWlmICggJGNvbF9vZmZzZXQgPT0gLTEgKSB7CgkJCQkkaSA9IDA7CgkJCQkkbmV3X2FycmF5ID0gYXJyYXkoKTsKCQkJCWZvcmVhY2ggKCAoYXJyYXkpICR0aGlzLT5jb2xfaW5mbyBhcyAkY29sICkgewoJCQkJCSRuZXdfYXJyYXlbJGldID0gJGNvbC0+eyRpbmZvX3R5cGV9OwoJCQkJCSRpKys7CgkJCQl9CgkJCQlyZXR1cm4gJG5ld19hcnJheTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiAkdGhpcy0+Y29sX2luZm9bJGNvbF9vZmZzZXRdLT57JGluZm9fdHlwZX07CgkJCX0KCQl9Cgl9CgoJLyoqCgkgKiBTdGFydHMgdGhlIHRpbWVyLCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLgoJICoKCSAqIEBzaW5jZSAxLjUuMAoJICoKCSAqIEByZXR1cm4gdHJ1ZQoJICovCglwdWJsaWMgZnVuY3Rpb24gdGltZXJfc3RhcnQoKSB7CgkJJHRoaXMtPnRpbWVfc3RhcnQgPSBtaWNyb3RpbWUoIHRydWUgKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgkvKioKCSAqIFN0b3BzIHRoZSBkZWJ1Z2dpbmcgdGltZXIuCgkgKgoJICogQHNpbmNlIDEuNS4wCgkgKgoJICogQHJldHVybiBmbG9hdCBUb3RhbCB0aW1lIHNwZW50IG9uIHRoZSBxdWVyeSwgaW4gc2Vjb25kcwoJICovCglwdWJsaWMgZnVuY3Rpb24gdGltZXJfc3RvcCgpIHsKCQlyZXR1cm4gKCBtaWNyb3RpbWUoIHRydWUgKSAtICR0aGlzLT50aW1lX3N0YXJ0ICk7Cgl9CgoJLyoqCgkgKiBXcmFwcyBlcnJvcnMgaW4gYSBuaWNlIGhlYWRlciBhbmQgZm9vdGVyIGFuZCBkaWVzLgoJICoKCSAqIFdpbGwgbm90IGRpZSBpZiB3cGRiOjokc2hvd19lcnJvcnMgaXMgZmFsc2UuCgkgKgoJICogQHNpbmNlIDEuNS4wCgkgKgoJICogQHBhcmFtIHN0cmluZyAkbWVzc2FnZSAgICBUaGUgRXJyb3IgbWVzc2FnZQoJICogQHBhcmFtIHN0cmluZyAkZXJyb3JfY29kZSBPcHRpb25hbC4gQSBDb21wdXRlciByZWFkYWJsZSBzdHJpbmcgdG8gaWRlbnRpZnkgdGhlIGVycm9yLgoJICogQHJldHVybiBmYWxzZXx2b2lkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBiYWlsKCAkbWVzc2FnZSwgJGVycm9yX2NvZGUgPSAnNTAwJyApIHsKCQlpZiAoICEkdGhpcy0+c2hvd19lcnJvcnMgKSB7CgkJCWlmICggY2xhc3NfZXhpc3RzKCAnV1BfRXJyb3InLCBmYWxzZSApICkgewoJCQkJJHRoaXMtPmVycm9yID0gbmV3IFdQX0Vycm9yKCRlcnJvcl9jb2RlLCAkbWVzc2FnZSk7CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy0+ZXJyb3IgPSAkbWVzc2FnZTsKCQkJfQoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCXdwX2RpZSgkbWVzc2FnZSk7Cgl9CgoJLyoqCgkgKiBXaGV0aGVyIE15U1FMIGRhdGFiYXNlIGlzIGF0IGxlYXN0IHRoZSByZXF1aXJlZCBtaW5pbXVtIHZlcnNpb24uCgkgKgoJICogQHNpbmNlIDIuNS4wCgkgKgoJICogQGdsb2JhbCBzdHJpbmcgJHdwX3ZlcnNpb24KCSAqIEBnbG9iYWwgc3RyaW5nICRyZXF1aXJlZF9teXNxbF92ZXJzaW9uCgkgKgoJICogQHJldHVybiBXUF9FcnJvcnx2b2lkCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBjaGVja19kYXRhYmFzZV92ZXJzaW9uKCkgewoJCWdsb2JhbCAkd3BfdmVyc2lvbiwgJHJlcXVpcmVkX215c3FsX3ZlcnNpb247CgkJLy8gTWFrZSBzdXJlIHRoZSBzZXJ2ZXIgaGFzIHRoZSByZXF1aXJlZCBNeVNRTCB2ZXJzaW9uCgkJaWYgKCB2ZXJzaW9uX2NvbXBhcmUoJHRoaXMtPmRiX3ZlcnNpb24oKSwgJHJlcXVpcmVkX215c3FsX3ZlcnNpb24sICc8JykgKQoJCQlyZXR1cm4gbmV3IFdQX0Vycm9yKCdkYXRhYmFzZV92ZXJzaW9uJywgc3ByaW50ZiggX18oICc8c3Ryb25nPkVSUk9SPC9zdHJvbmc+OiBXb3JkUHJlc3MgJTEkcyByZXF1aXJlcyBNeVNRTCAlMiRzIG9yIGhpZ2hlcicgKSwgJHdwX3ZlcnNpb24sICRyZXF1aXJlZF9teXNxbF92ZXJzaW9uICkpOwoJfQoKCS8qKgoJICogV2hldGhlciB0aGUgZGF0YWJhc2Ugc3VwcG9ydHMgY29sbGF0aW9uLgoJICoKCSAqIENhbGxlZCB3aGVuIFdvcmRQcmVzcyBpcyBnZW5lcmF0aW5nIHRoZSB0YWJsZSBzY2hlbWUuCgkgKgoJICogVXNlIGB3cGRiOjpoYXNfY2FwKCAnY29sbGF0aW9uJyApYC4KCSAqCgkgKiBAc2luY2UgMi41LjAKCSAqIEBkZXByZWNhdGVkIDMuNS4wIFVzZSB3cGRiOjpoYXNfY2FwKCkKCSAqCgkgKiBAcmV0dXJuIGJvb2wgVHJ1ZSBpZiBjb2xsYXRpb24gaXMgc3VwcG9ydGVkLCBmYWxzZSBpZiB2ZXJzaW9uIGRvZXMgbm90CgkgKi8KCXB1YmxpYyBmdW5jdGlvbiBzdXBwb3J0c19jb2xsYXRpb24oKSB7CgkJX2RlcHJlY2F0ZWRfZnVuY3Rpb24oIF9fRlVOQ1RJT05fXywgJzMuNScsICd3cGRiOjpoYXNfY2FwKCBcJ2NvbGxhdGlvblwnICknICk7CgkJcmV0dXJuICR0aGlzLT5oYXNfY2FwKCAnY29sbGF0aW9uJyApOwoJfQoKCS8qKgoJICogVGhlIGRhdGFiYXNlIGNoYXJhY3RlciBjb2xsYXRlLgoJICoKCSAqIEBzaW5jZSAzLjUuMAoJICoKCSAqIEByZXR1cm4gc3RyaW5nIFRoZSBkYXRhYmFzZSBjaGFyYWN0ZXIgY29sbGF0ZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGdldF9jaGFyc2V0X2NvbGxhdGUoKSB7CgkJJGNoYXJzZXRfY29sbGF0ZSA9ICcnOwoKCQlpZiAoICEgZW1wdHkoICR0aGlzLT5jaGFyc2V0ICkgKQoJCQkkY2hhcnNldF9jb2xsYXRlID0gIkRFRkFVTFQgQ0hBUkFDVEVSIFNFVCAkdGhpcy0+Y2hhcnNldCI7CgkJaWYgKCAhIGVtcHR5KCAkdGhpcy0+Y29sbGF0ZSApICkKCQkJJGNoYXJzZXRfY29sbGF0ZSAuPSAiIENPTExBVEUgJHRoaXMtPmNvbGxhdGUiOwoKCQlyZXR1cm4gJGNoYXJzZXRfY29sbGF0ZTsKCX0KCgkvKioKCSAqIERldGVybWluZSBpZiBhIGRhdGFiYXNlIHN1cHBvcnRzIGEgcGFydGljdWxhciBmZWF0dXJlLgoJICoKCSAqIEBzaW5jZSAyLjcuMAoJICogQHNpbmNlIDQuMS4wIFN1cHBvcnQgd2FzIGFkZGVkIGZvciB0aGUgJ3V0ZjhtYjQnIGZlYXR1cmUuCgkgKgoJICogQHNlZSB3cGRiOjpkYl92ZXJzaW9uKCkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRkYl9jYXAgVGhlIGZlYXR1cmUgdG8gY2hlY2sgZm9yLiBBY2NlcHRzICdjb2xsYXRpb24nLAoJICogICAgICAgICAgICAgICAgICAgICAgICdncm91cF9jb25jYXQnLCAnc3VicXVlcmllcycsICdzZXRfY2hhcnNldCcsCgkgKiAgICAgICAgICAgICAgICAgICAgICAgb3IgJ3V0ZjhtYjQnLgoJICogQHJldHVybiBpbnR8ZmFsc2UgV2hldGhlciB0aGUgZGF0YWJhc2UgZmVhdHVyZSBpcyBzdXBwb3J0ZWQsIGZhbHNlIG90aGVyd2lzZS4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGhhc19jYXAoICRkYl9jYXAgKSB7CgkJJHZlcnNpb24gPSAkdGhpcy0+ZGJfdmVyc2lvbigpOwoKCQlzd2l0Y2ggKCBzdHJ0b2xvd2VyKCAkZGJfY2FwICkgKSB7CgkJCWNhc2UgJ2NvbGxhdGlvbicgOiAgICAvLyBAc2luY2UgMi41LjAKCQkJY2FzZSAnZ3JvdXBfY29uY2F0JyA6IC8vIEBzaW5jZSAyLjcuMAoJCQljYXNlICdzdWJxdWVyaWVzJyA6ICAgLy8gQHNpbmNlIDIuNy4wCgkJCQlyZXR1cm4gdmVyc2lvbl9jb21wYXJlKCAkdmVyc2lvbiwgJzQuMScsICc+PScgKTsKCQkJY2FzZSAnc2V0X2NoYXJzZXQnIDoKCQkJCXJldHVybiB2ZXJzaW9uX2NvbXBhcmUoICR2ZXJzaW9uLCAnNS4wLjcnLCAnPj0nICk7CgkJCWNhc2UgJ3V0ZjhtYjQnIDogICAgICAvLyBAc2luY2UgNC4xLjAKCQkJCWlmICggdmVyc2lvbl9jb21wYXJlKCAkdmVyc2lvbiwgJzUuNS4zJywgJzwnICkgKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQoJCQkJaWYgKCAkdGhpcy0+dXNlX215c3FsaSApIHsKCQkJCQkkY2xpZW50X3ZlcnNpb24gPSBteXNxbGlfZ2V0X2NsaWVudF9pbmZvKCk7CgkJCQl9IGVsc2UgewoJCQkJCSRjbGllbnRfdmVyc2lvbiA9IG15c3FsX2dldF9jbGllbnRfaW5mbygpOwoJCQkJfQoKCQkJCS8qCgkJCQkgKiBsaWJteXNxbCBoYXMgc3VwcG9ydGVkIHV0ZjhtYjQgc2luY2UgNS41LjMsIHNhbWUgYXMgdGhlIE15U1FMIHNlcnZlci4KCQkJCSAqIG15c3FsbmQgaGFzIHN1cHBvcnRlZCB1dGY4bWI0IHNpbmNlIDUuMC45LgoJCQkJICovCgkJCQlpZiAoIGZhbHNlICE9PSBzdHJwb3MoICRjbGllbnRfdmVyc2lvbiwgJ215c3FsbmQnICkgKSB7CgkJCQkJJGNsaWVudF92ZXJzaW9uID0gcHJlZ19yZXBsYWNlKCAnL15cRCsoW1xkLl0rKS4qLycsICckMScsICRjbGllbnRfdmVyc2lvbiApOwoJCQkJCXJldHVybiB2ZXJzaW9uX2NvbXBhcmUoICRjbGllbnRfdmVyc2lvbiwgJzUuMC45JywgJz49JyApOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gdmVyc2lvbl9jb21wYXJlKCAkY2xpZW50X3ZlcnNpb24sICc1LjUuMycsICc+PScgKTsKCQkJCX0KCQl9CgoJCXJldHVybiBmYWxzZTsKCX0KCgkvKioKCSAqIFJldHJpZXZlIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGNhbGxlZCB3cGRiLgoJICoKCSAqIFNlYXJjaGVzIHVwIHRoZSBsaXN0IG9mIGZ1bmN0aW9ucyB1bnRpbCBpdCByZWFjaGVzCgkgKiB0aGUgb25lIHRoYXQgd291bGQgbW9zdCBsb2dpY2FsbHkgaGFkIGNhbGxlZCB0aGlzIG1ldGhvZC4KCSAqCgkgKiBAc2luY2UgMi41LjAKCSAqCgkgKiBAcmV0dXJuIHN0cmluZ3xhcnJheSBUaGUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbgoJICovCglwdWJsaWMgZnVuY3Rpb24gZ2V0X2NhbGxlcigpIHsKCQlyZXR1cm4gd3BfZGVidWdfYmFja3RyYWNlX3N1bW1hcnkoIF9fQ0xBU1NfXyApOwoJfQoKCS8qKgoJICogVGhlIGRhdGFiYXNlIHZlcnNpb24gbnVtYmVyLgoJICoKCSAqIEBzaW5jZSAyLjcuMAoJICoKCSAqIEByZXR1cm4gbnVsbHxzdHJpbmcgTnVsbCBvbiBmYWlsdXJlLCB2ZXJzaW9uIG51bWJlciBvbiBzdWNjZXNzLgoJICovCglwdWJsaWMgZnVuY3Rpb24gZGJfdmVyc2lvbigpIHsKCQlpZiAoICR0aGlzLT51c2VfbXlzcWxpICkgewoJCQkkc2VydmVyX2luZm8gPSBteXNxbGlfZ2V0X3NlcnZlcl9pbmZvKCAkdGhpcy0+ZGJoICk7CgkJfSBlbHNlIHsKCQkJJHNlcnZlcl9pbmZvID0gbXlzcWxfZ2V0X3NlcnZlcl9pbmZvKCAkdGhpcy0+ZGJoICk7CgkJfQoJCXJldHVybiBwcmVnX3JlcGxhY2UoICcvW14wLTkuXS4qLycsICcnLCAkc2VydmVyX2luZm8gKTsKCX0KfQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
PD9waHAKY2xhc3MgcGJfYmFja3VwYnVkZHlfYWpheCBleHRlbmRzIHBiX2JhY2t1cGJ1ZGR5X2FqYXhjb3JlIHsKfQ==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
LyogTWFrZSBjbGlja3MgcGFzcy10aHJvdWdoICovCiNucHJvZ3Jlc3MgewogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9CgojbnByb2dyZXNzIC5iYXIgewogIGJhY2tncm91bmQ6ICMyOWQ7CgogIHBvc2l0aW9uOiBmaXhlZDsKICB6LWluZGV4OiA3NTsKICB0b3A6IDQ4cHg7CiAgbGVmdDogMDsKCiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiA0cHg7Cn0KCi8qIEZhbmN5IGJsdXIgZWZmZWN0ICovCiNucHJvZ3Jlc3MgLnBlZyB7Cgp9CgovKiBSZW1vdmUgdGhlc2UgdG8gZ2V0IHJpZCBvZiB0aGUgc3Bpbm5lciAqLwojbnByb2dyZXNzIC5zcGlubmVyIHsKICBkaXNwbGF5OiBibG9jazsKICBwb3NpdGlvbjogZml4ZWQ7CiAgei1pbmRleDogMTAzMTsKICB0b3A6IDY1cHg7CiAgcmlnaHQ6IDE1cHg7Cn0KCiNucHJvZ3Jlc3MgLnNwaW5uZXItaWNvbiB7CiAgd2lkdGg6IDQwcHg7CiAgaGVpZ2h0OiA0MHB4OwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CgogIGJvcmRlcjogc29saWQgNHB4IHRyYW5zcGFyZW50OwogIGJvcmRlci10b3AtY29sb3I6ICMyOWQ7CiAgYm9yZGVyLWxlZnQtY29sb3I6ICMyOWQ7CiAgYm9yZGVyLXJhZGl1czogNTAlOwoKICAtd2Via2l0LWFuaW1hdGlvbjogbnByb2dyZXNzLXNwaW5uZXIgNDAwbXMgbGluZWFyIGluZmluaXRlOwogICAgICAgICAgYW5pbWF0aW9uOiBucHJvZ3Jlc3Mtc3Bpbm5lciA0MDBtcyBsaW5lYXIgaW5maW5pdGU7Cn0KCkAtd2Via2l0LWtleWZyYW1lcyBucHJvZ3Jlc3Mtc3Bpbm5lciB7CiAgMCUgICB7IC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH0KICAxMDAlIHsgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9Cn0KCkBrZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXIgewogIDAlICAgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQogIDEwMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9Cn0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css

###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
R0lGODlhBgAHALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAGAAcAAAQVEAFFVUrD0HvF4RfCEYGVFAeFaFUEADs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
R0lGODlhBwAGALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAHAAYAAAQWEKU5kaETqEKHUgcxGZ8SJEL5IccXAQA7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAfCAIAAACgQJBPAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAsSAAALEgHS3X78AAAAIXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyA0LjDqJid1AAAAFnRFWHRDcmVhdGlvbiBUaW1lADEwLzI0LzA4KQ6r+wAAAClJREFUeJxjfPv2LQMSYPn//z8yn4kBFaDzqa0eXZ5U9QMtT6l5tFYPADsXLPcJwrwLAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
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
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAeCAYAAADkftS9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAACF0RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgNC4w6iYndQAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMS8xNy8wONpsdXEAAAAlSURBVHicY/z///9/BjTAhC7AwMDAwIJFIXbBoaJ9qLhz+IUSAIMMOibeSzRBAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCWpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKXsKCQlpZiAoIGpRdWVyeSgnI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmcnKS5pcygnOnZpc2libGUnKSApIHsKCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLnJlcGxhY2VXaXRoKAoJCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfYmxhbmthbGVydCcpLmh0bWwoKS5yZXBsYWNlKCAnI1RJVExFIycsICdQSFAgVGltZW91dCBvciBGYXRhbCBFcnJvciBPY2N1cnJlZCcgKS5yZXBsYWNlKCAnI01FU1NBR0UjJywgJ1RoZSBwYWdlIGRpZCBub3QgZmluaXNoIGxvYWRpbmcgYXMgZXhwZWN0ZWQuICBUaGUgbW9zdCBjb21tb24gY2F1c2UgZm9yIHRoaXMgaXMgdGhlIFBIUCBwcm9jZXNzIHRha2luZyBtb3JlIHRpbWUgdGhhbiBpdCBoYXMgYmVlbiBhbGxvd2VkIGJ5IHlvdXIgaG9zdCAocGhwLmluaSBzZXR0aW5nIDxpPm1heF9leGVjdXRpb25fdGltZTwvaT4pLiBJZiBhIFBIUCBlcnJvciBpcyBkaXNwbGF5ZWQgYWJvdmUgdGhpcyBjYW4gYWxzbyBjYXVzZSB0aGlzIGVycm9yLicgKQoJCQkpOwoJCX0KCX0pOwp9KTsKCmZ1bmN0aW9uIGxvYWRUb29sdGlwcygpIHsKCWpRdWVyeSgnLnBsdWdpbmJ1ZGR5X3RpcCcpLnRvb2x0aXAoewoJCXRyYWNrOiB0cnVlLAoJCWRlbGF5OiAwLAoJCXNob3dVUkw6IGZhbHNlLAoJCXNob3dCb2R5OiAiIC0gIiwKCQlmYWRlOiAyNTAKCX0pOwp9CgpqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJbG9hZFRvb2x0aXBzKCk7CgkKCWpRdWVyeSgnLnRvZ2dsZScpLmNsaWNrKGZ1bmN0aW9uKGUpIHsKCQlqUXVlcnkoICcjdG9nZ2xlLScgKyBqUXVlcnkodGhpcykuYXR0cignaWQnKSApLnNsaWRlVG9nZ2xlKCk7Cgl9KTsKCQoJalF1ZXJ5KCcub3B0aW9uX3RvZ2dsZScpLmNoYW5nZShmdW5jdGlvbihlKSB7CgkJaWYgKGpRdWVyeSh0aGlzKS5hdHRyKCdjaGVja2VkJykpIHsKCQkJalF1ZXJ5KCcuJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICsgJ190b2dnbGUnICkuc2xpZGVUb2dnbGUoKTsKCQl9IGVsc2UgewoJCQlqUXVlcnkoJy4nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKyAnX3RvZ2dsZScgKS5zbGlkZVRvZ2dsZSgpOwoJCX0KCX0pOwoJCgkKfSk7CgpmdW5jdGlvbiBiYWNrdXBidWRkeV9zYXZlTG9nQXNGaWxlKCkgewoJdmFyIHRleHRGaWxlQXNCbG9iID0gbmV3IEJsb2IoWyBqUXVlcnkoICcjYmFja3VwYnVkZHlfbWVzc2FnZXMnICkudGV4dCgpIF0sIHt0eXBlOid0ZXh0L3BsYWluJ30pOwoJdmFyIGZpbGVOYW1lVG9TYXZlQXMgPSAnaW1wb3J0YnVkZHkudHh0JzsKCgl2YXIgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwoJZG93bmxvYWRMaW5rLmRvd25sb2FkID0gZmlsZU5hbWVUb1NhdmVBczsKCWRvd25sb2FkTGluay5pbm5lckhUTUwgPSAiRG93bmxvYWQgRmlsZSI7Cglkb3dubG9hZExpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX25ldycpOyAvLyBTYWZhcmkgbG9hZHMgdGhpcyBsaW5rIGFzIGEgcGFnZSBpbnN0ZWFkIG9mIGRpcmVjdGx5IGRvd25sb2FkaW5nLgoJZG93bmxvYWRMaW5rLmhyZWYgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTCh0ZXh0RmlsZUFzQmxvYik7Cglkb3dubG9hZExpbmsub25jbGljayA9IGJhY2t1cGJ1ZGR5X2Rlc3Ryb3lDbGlja2VkRWxlbWVudDsKCWRvd25sb2FkTGluay5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZExpbmspOwoKCWRvd25sb2FkTGluay5jbGljaygpOwp9CgpmdW5jdGlvbiBiYWNrdXBidWRkeV9kZXN0cm95Q2xpY2tlZEVsZW1lbnQoZXZlbnQpIHsKICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZXZlbnQudGFyZ2V0KTsKfQ==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
Ly8gbGVhbk1vZGFsIHYxLjEuMSBieSBSYXkgU3RvbmUgLSBodHRwOi8vZmluZWx5c2xpY2VkLmNvbS5hdQovLyBNb2RpZmllZCBieSBCcmlhbiBEaUNoaWFyYSwgdXNlZCB0cmFuc2xhdGVYKC01MCUpIHRvIGNlbnRlciBtb2RhbC4KLy8gRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwKCihmdW5jdGlvbigkKXskLmZuLmV4dGVuZCh7bGVhbk1vZGFsOmZ1bmN0aW9uKG9wdGlvbnMpe3ZhciBkZWZhdWx0cz17dG9wOjEwMCxvdmVybGF5OjAuNSxjbG9zZUJ1dHRvbjpudWxsfTt2YXIgb3ZlcmxheT0kKCI8ZGl2IGlkPSdsZWFuX292ZXJsYXknPjwvZGl2PiIpOyQoImJvZHkiKS5hcHBlbmQob3ZlcmxheSk7b3B0aW9ucz0kLmV4dGVuZChkZWZhdWx0cyxvcHRpb25zKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG89b3B0aW9uczskKHRoaXMpLmNsaWNrKGZ1bmN0aW9uKGUpe3ZhciBtb2RhbF9pZD0kKHRoaXMpLmF0dHIoImhyZWYiKTskKCIjbGVhbl9vdmVybGF5IikuY2xpY2soZnVuY3Rpb24oKXtjbG9zZV9tb2RhbChtb2RhbF9pZCl9KTskKG8uY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uKCl7Y2xvc2VfbW9kYWwobW9kYWxfaWQpfSk7dmFyIG1vZGFsX2hlaWdodD0kKG1vZGFsX2lkKS5vdXRlckhlaWdodCgpOwokKCIjbGVhbl9vdmVybGF5IikuY3NzKHsiZGlzcGxheSI6ImJsb2NrIixvcGFjaXR5OjB9KTskKCIjbGVhbl9vdmVybGF5IikuZmFkZVRvKDIwMCxvLm92ZXJsYXkpOyQobW9kYWxfaWQpLmNzcyh7ImRpc3BsYXkiOiJibG9jayIsInBvc2l0aW9uIjoiZml4ZWQiLCJvcGFjaXR5IjowLCJ6LWluZGV4IjoxMTAwMCwibGVmdCI6NTArIiUiLCJ0cmFuc2Zvcm0iOiJ0cmFuc2xhdGVYKC01MCUpIiwidG9wIjpvLnRvcCsicHgifSk7JChtb2RhbF9pZCkuZmFkZVRvKDIwMCwxKTtlLnByZXZlbnREZWZhdWx0KCl9KX0pO2Z1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXskKCIjbGVhbl9vdmVybGF5IikuZmFkZU91dCgyMDApOyQobW9kYWxfaWQpLmNzcyh7ImRpc3BsYXkiOiJub25lIn0pfX19KX0pKGpRdWVyeSk7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
alF1ZXJ5LmZuLnZpc2libGUgPSBmdW5jdGlvbigpIHsKCXJldHVybiB0aGlzLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7Cn07CgpqUXVlcnkuZm4uaW52aXNpYmxlID0gZnVuY3Rpb24oKSB7CglyZXR1cm4gdGhpcy5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7Cn07CgpqUXVlcnkuZm4udmlzaWJpbGl0eVRvZ2dsZSA9IGZ1bmN0aW9uKCkgewoJcmV0dXJuIHRoaXMuY3NzKCd2aXNpYmlsaXR5JywgZnVuY3Rpb24oaSwgdmlzaWJpbGl0eSkgewoJCXJldHVybiAodmlzaWJpbGl0eSA9PSAndmlzaWJsZScpID8gJ2hpZGRlbicgOiAndmlzaWJsZSc7Cgl9KTsKfTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
LyohCiAqIGpRdWVyeSBVSSAxLjguMTIKICoKICogQ29weXJpZ2h0IDIwMTEsIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgb3IgR1BMIFZlcnNpb24gMiBsaWNlbnNlcy4KICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZQogKgogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1VJCiAqLwooZnVuY3Rpb24oYyxqKXtmdW5jdGlvbiBrKGEpe3JldHVybiFjKGEpLnBhcmVudHMoKS5hbmRTZWxmKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGMuY3VyQ1NTKHRoaXMsInZpc2liaWxpdHkiKT09PSJoaWRkZW4ifHxjLmV4cHIuZmlsdGVycy5oaWRkZW4odGhpcyl9KS5sZW5ndGh9Yy51aT1jLnVpfHx7fTtpZighYy51aS52ZXJzaW9uKXtjLmV4dGVuZChjLnVpLHt2ZXJzaW9uOiIxLjguMTIiLGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTU1BTkQ6OTEsQ09NTUFORF9MRUZUOjkxLENPTU1BTkRfUklHSFQ6OTMsQ09OVFJPTDoxNyxERUxFVEU6NDYsRE9XTjo0MCxFTkQ6MzUsRU5URVI6MTMsRVNDQVBFOjI3LEhPTUU6MzYsSU5TRVJUOjQ1LExFRlQ6MzcsTUVOVTo5MyxOVU1QQURfQUREOjEwNyxOVU1QQURfREVDSU1BTDoxMTAsTlVNUEFEX0RJVklERToxMTEsTlVNUEFEX0VOVEVSOjEwOCxOVU1QQURfTVVMVElQTFk6MTA2LApOVU1QQURfU1VCVFJBQ1Q6MTA5LFBBR0VfRE9XTjozNCxQQUdFX1VQOjMzLFBFUklPRDoxOTAsUklHSFQ6MzksU0hJRlQ6MTYsU1BBQ0U6MzIsVEFCOjksVVA6MzgsV0lORE9XUzo5MX19KTtjLmZuLmV4dGVuZCh7X2ZvY3VzOmMuZm4uZm9jdXMsZm9jdXM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdHlwZW9mIGE9PT0ibnVtYmVyIj90aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjKGQpLmZvY3VzKCk7YiYmYi5jYWxsKGQpfSxhKX0pOnRoaXMuX2ZvY3VzLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sc2Nyb2xsUGFyZW50OmZ1bmN0aW9uKCl7dmFyIGE7YT1jLmJyb3dzZXIubXNpZSYmLyhzdGF0aWN8cmVsYXRpdmUpLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKXx8L2Fic29sdXRlLy50ZXN0KHRoaXMuY3NzKCJwb3NpdGlvbiIpKT90aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4vKHJlbGF0aXZlfGFic29sdXRlfGZpeGVkKS8udGVzdChjLmN1ckNTUyh0aGlzLAoicG9zaXRpb24iLDEpKSYmLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApOnRoaXMucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybi8oYXV0b3xzY3JvbGwpLy50ZXN0KGMuY3VyQ1NTKHRoaXMsIm92ZXJmbG93IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy15IiwxKStjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdy14IiwxKSl9KS5lcSgwKTtyZXR1cm4vZml4ZWQvLnRlc3QodGhpcy5jc3MoInBvc2l0aW9uIikpfHwhYS5sZW5ndGg/Yyhkb2N1bWVudCk6YX0sekluZGV4OmZ1bmN0aW9uKGEpe2lmKGEhPT1qKXJldHVybiB0aGlzLmNzcygiekluZGV4IixhKTtpZih0aGlzLmxlbmd0aCl7YT1jKHRoaXNbMF0pO2Zvcih2YXIgYjthLmxlbmd0aCYmYVswXSE9PWRvY3VtZW50Oyl7Yj1hLmNzcygicG9zaXRpb24iKTsKaWYoYj09PSJhYnNvbHV0ZSJ8fGI9PT0icmVsYXRpdmUifHxiPT09ImZpeGVkIil7Yj1wYXJzZUludChhLmNzcygiekluZGV4IiksMTApO2lmKCFpc05hTihiKSYmYiE9PTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJpbmQoKGMuc3VwcG9ydC5zZWxlY3RzdGFydD8ic2VsZWN0c3RhcnQiOiJtb3VzZWRvd24iKSsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKX0pfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bmJpbmQoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7Yy5lYWNoKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGQoZixnLGwsbSl7Yy5lYWNoKGUsZnVuY3Rpb24oKXtnLT1wYXJzZUZsb2F0KGMuY3VyQ1NTKGYsInBhZGRpbmciK3RoaXMsdHJ1ZSkpfHwwO2lmKGwpZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLAoiYm9yZGVyIit0aGlzKyJXaWR0aCIsdHJ1ZSkpfHwwO2lmKG0pZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLCJtYXJnaW4iK3RoaXMsdHJ1ZSkpfHwwfSk7cmV0dXJuIGd9dmFyIGU9Yj09PSJXaWR0aCI/WyJMZWZ0IiwiUmlnaHQiXTpbIlRvcCIsIkJvdHRvbSJdLGg9Yi50b0xvd2VyQ2FzZSgpLGk9e2lubmVyV2lkdGg6Yy5mbi5pbm5lcldpZHRoLGlubmVySGVpZ2h0OmMuZm4uaW5uZXJIZWlnaHQsb3V0ZXJXaWR0aDpjLmZuLm91dGVyV2lkdGgsb3V0ZXJIZWlnaHQ6Yy5mbi5vdXRlckhlaWdodH07Yy5mblsiaW5uZXIiK2JdPWZ1bmN0aW9uKGYpe2lmKGY9PT1qKXJldHVybiBpWyJpbm5lciIrYl0uY2FsbCh0aGlzKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCxkKHRoaXMsZikrInB4Iil9KX07Yy5mblsib3V0ZXIiK2JdPWZ1bmN0aW9uKGYsZyl7aWYodHlwZW9mIGYhPT0ibnVtYmVyIilyZXR1cm4gaVsib3V0ZXIiK2JdLmNhbGwodGhpcyxmKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Yyh0aGlzKS5jc3MoaCwKZCh0aGlzLGYsdHJ1ZSxnKSsicHgiKX0pfX0pO2MuZXh0ZW5kKGMuZXhwclsiOiJdLHtkYXRhOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4hIWMuZGF0YShhLGRbM10pfSxmb2N1c2FibGU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLGQ9Yy5hdHRyKGEsInRhYmluZGV4Iik7aWYoImFyZWEiPT09Yil7Yj1hLnBhcmVudE5vZGU7ZD1iLm5hbWU7aWYoIWEuaHJlZnx8IWR8fGIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSE9PSJtYXAiKXJldHVybiBmYWxzZTthPWMoImltZ1t1c2VtYXA9IyIrZCsiXSIpWzBdO3JldHVybiEhYSYmayhhKX1yZXR1cm4oL2lucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0Ly50ZXN0KGIpPyFhLmRpc2FibGVkOiJhIj09Yj9hLmhyZWZ8fCFpc05hTihkKTohaXNOYU4oZCkpJiZrKGEpfSx0YWJiYWJsZTpmdW5jdGlvbihhKXt2YXIgYj1jLmF0dHIoYSwidGFiaW5kZXgiKTtyZXR1cm4oaXNOYU4oYil8fGI+PTApJiZjKGEpLmlzKCI6Zm9jdXNhYmxlIil9fSk7CmMoZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5ib2R5LGI9YS5hcHBlbmRDaGlsZChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtjLmV4dGVuZChiLnN0eWxlLHttaW5IZWlnaHQ6IjEwMHB4IixoZWlnaHQ6ImF1dG8iLHBhZGRpbmc6MCxib3JkZXJXaWR0aDowfSk7Yy5zdXBwb3J0Lm1pbkhlaWdodD1iLm9mZnNldEhlaWdodD09PTEwMDtjLnN1cHBvcnQuc2VsZWN0c3RhcnQ9Im9uc2VsZWN0c3RhcnQiaW4gYjthLnJlbW92ZUNoaWxkKGIpLnN0eWxlLmRpc3BsYXk9Im5vbmUifSk7Yy5leHRlbmQoYy51aSx7cGx1Z2luOnthZGQ6ZnVuY3Rpb24oYSxiLGQpe2E9Yy51aVthXS5wcm90b3R5cGU7Zm9yKHZhciBlIGluIGQpe2EucGx1Z2luc1tlXT1hLnBsdWdpbnNbZV18fFtdO2EucGx1Z2luc1tlXS5wdXNoKFtiLGRbZV1dKX19LGNhbGw6ZnVuY3Rpb24oYSxiLGQpe2lmKChiPWEucGx1Z2luc1tiXSkmJmEuZWxlbWVudFswXS5wYXJlbnROb2RlKWZvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKWEub3B0aW9uc1tiW2VdWzBdXSYmCmJbZV1bMV0uYXBwbHkoYS5lbGVtZW50LGQpfX0sY29udGFpbnM6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZG9jdW1lbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNjphIT09YiYmYS5jb250YWlucyhiKX0saGFzU2Nyb2xsOmZ1bmN0aW9uKGEsYil7aWYoYyhhKS5jc3MoIm92ZXJmbG93Iik9PT0iaGlkZGVuIilyZXR1cm4gZmFsc2U7Yj1iJiZiPT09ImxlZnQiPyJzY3JvbGxMZWZ0Ijoic2Nyb2xsVG9wIjt2YXIgZD1mYWxzZTtpZihhW2JdPjApcmV0dXJuIHRydWU7YVtiXT0xO2Q9YVtiXT4wO2FbYl09MDtyZXR1cm4gZH0saXNPdmVyQXhpczpmdW5jdGlvbihhLGIsZCl7cmV0dXJuIGE+YiYmYTxiK2R9LGlzT3ZlcjpmdW5jdGlvbihhLGIsZCxlLGgsaSl7cmV0dXJuIGMudWkuaXNPdmVyQXhpcyhhLGQsaCkmJmMudWkuaXNPdmVyQXhpcyhiLGUsaSl9fSl9fSkoalF1ZXJ5KTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
PD9waHAKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdzdHlsZS5jc3MnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnbnByb2dyZXNzLmNzcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhbmltYXRlLmNzcycgKTsKCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2pxdWVyeS5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAndWkuY29yZS5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAndG9vbHRpcC5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnbnByb2dyZXNzLmpzJyApOwpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpbXBvcnRidWRkeS5qcycgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
PD9waHAKaWYgKCAhIGlzX2FkbWluKCkgKSB7IC8vIE5vdCBpbiBXb3JkUHJlc3MgKG9yIG5vdCBsb2dnZWQgaW4pLiBDaGVjayBpZiBpbiBJbXBvcnRCdWRkeS4KCWlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgeyAvLyBOb3QgaW4gSW1wb3J0QnVkZHkuCgkJZGllKCAnPGh0bWw+PC9odG1sPicgKTsKCX0KCS8vIEluIEltcG9ydEJ1ZGR5IHNvIGNoZWNrIGF1dGhlbnRpY2F0aW9uLgoJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KfQoKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhZG1pbi5jc3MnICk7Cmdsb2JhbCAkd3BkYjsKCgplY2hvICc8YSBuYW1lPSJkYXRhYmFzZV9yZXBsYWNlIj48L2E+JzsKZWNobyAnVGhpcyB0b29sIGFsbG93cyB5b3UgdG8gYXV0b21hdGljYWxseSByZXBsYWNlIHRleHQgY29udGFpbmVkIHRocm91Z2hvdXQgeW91ciBXb3JkUHJlc3MgZGF0YWJhc2UuPGJyPic7CmVjaG8gJzxicj48Yj5Ob3RlOjwvYj4gSW1wb3J0QnVkZHkgYXV0b21hdGljYWxseSBoYW5kbGVzIG1pZ3JhdGluZyAmIHJlcGxhY2luZyB5b3VyIHNpdGUgVVJMcyBhbmQgZmlsZSBwYXRocyBkdXJpbmcgcmVzdG9yZS9taWdyYXRpb247IHRoaXMgdG9vbCBpcyBub3QgbmVlZGVkIGZvciBub3JtYWwgYmFja3VwIC8gcmVzdG9yZSBvcGVyYXRpb25zLic7CmVjaG8gJzxwPjxiPlRpcDo8L2I+IFdoZW4gcmVwbGFjaW5nIGEgc2l0ZSBhZGRyZXNzIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIFVSTCBzbyBtdWx0aXBsZSBwYXNzZXMgYXQgcmVwbGFjZW1lbnRzIG1heSBuZWVkIHRvIGJlIG1hZGUuIEllLiBodHRwOi8vc2l0ZS5jb20sIGh0dHA6Ly88Yj53d3cuPC9iPnNpdGUuY29tLCBodHRwPGI+czwvYj46Ly9zaXRlLmNvbSwgZXRjLjwvcD4nOwplY2hvICc8cD48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9idWxsZXRfZXJyb3IucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij4gQ2F1dGlvbjogVGhpcyBpcyBhbiBhZHZhbmNlZCBmZWF0dXJlLiBVc2Ugd2l0aCBjYXJlOyBpbXByb3BlciB1c2UgbWF5IHJlc3VsdCBpbiBkYXRhIGxvc3MuPC9wPic7CmVjaG8gJzxicj4nOwoKCmlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkYXRhYmFzZV9yZXBsYWNlJyApID09ICcxJyApIHsKCQoJZ2xvYmFsICRwYl9iYWNrdXBidWRkeV9qc19zdGF0dXM7CgkkcGJfYmFja3VwYnVkZHlfanNfc3RhdHVzID0gdHJ1ZTsKCQoJCgllY2hvICc8ZGl2IGlkPSJwYl9pbXBvcnRidWRkeV93b3JraW5nIj48aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9sb2FkaW5nX2xhcmdlLmdpZiIgdGl0bGU9IldvcmtpbmcuLi4gUGxlYXNlIHdhaXQgYXMgdGhpcyBtYXkgdGFrZSBhIG1vbWVudC4uLiI+PC9kaXY+JzsKCWVjaG8gJzxzY3JpcHQ+alF1ZXJ5KCIjcGJfYmFja3VwYnVkZHlfc3RhdHVzX3dyYXAiKS5zaG93KCk7PC9zY3JpcHQ+JzsKCXBiX2JhY2t1cGJ1ZGR5OjpmbHVzaCgpOwoJLy9lY2hvICc8ZGl2IGlkPSJwYl9iYWNrdXBidWRkeV9yZXBsYWNlX3dvcmtpbmciPjxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL2xvYWRpbmdfbGFyZ2UuZ2lmIiB0aXRsZT0iV29ya2luZy4uLiBQbGVhc2Ugd2FpdCBhcyB0aGlzIG1heSB0YWtlIGEgbW9tZW50Li4uIj48L2Rpdj4nOwoJCgkvLyBJbnN0YW50aWF0ZSBkYXRhYmFzZSByZXBsYWNlbWVudCBjbGFzcy4KCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9kYnJlcGxhY2UvZGJyZXBsYWNlLnBocCcgKTsKCSRkYnJlcGxhY2UgPSBuZXcgcGx1Z2luYnVkZHlfZGJyZXBsYWNlKCAnJywgMSwgNjAqNjAqMjQgKTsKCQoJLy8gU2V0IHVwIHZhcmlhYmxlcyBieSBnZXR0aW5nIFBPU1QgZGF0YS4KCSRuZWVkbGUgPSBiYWNrdXBidWRkeV9jb3JlOjpkYmVzY2FwZSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbmVlZGxlJyApICk7CglpZiAoICRuZWVkbGUgPT0gJycgKSB7CgkJZWNobyAnPGI+RXJyb3IgIzQ0NTY1ODIuIE1pc3NpbmcgbmVlZGxlLiBZb3UgbXVzdCBlbnRlciB0ZXh0IHRvIHNlYXJjaCBmb3IuJzsKCQllY2hvICc8YnI+PGEgaHJlZj0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpIC4gJyZwYXJlbnRfY29uZmlnPScgLiBodG1sZW50aXRpZXMoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFyZW50X2NvbmZpZycgKSApIC4gJyIgY2xhc3M9ImJ1dHRvbiBzZWNvbmRhcnktYnV0dG9uIj4mbGFycjsgJyAuICBfXyggJ2JhY2snLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2E+JzsKCQlyZXR1cm47Cgl9CgkkcmVwbGFjZW1lbnQgPSBiYWNrdXBidWRkeV9jb3JlOjpkYmVzY2FwZSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncmVwbGFjZW1lbnQnICkgKTsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2luZyBgJyAuICRuZWVkbGUgLiAnYCB3aXRoIGAnIC4gJHJlcGxhY2VtZW50IC4gJ2AuJyApOwoJLyoKCWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbWF5YmVfc2VyaWFsaXplZCcgKSA9PSAndHJ1ZScgKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnQWNjb3VudGluZyBmb3Igc2VyaWFsaXplZCBkYXRhIGJhc2VkIG9uIHNldHRpbmdzLicgKTsKCQkkbWF5YmVfc2VyaWFsaXplZCA9IHRydWU7Cgl9IGVsc2UgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJ05PVCBhY2NvdW50aW5nIGZvciBzZXJpYWxpemVkIGRhdGEgYmFzZWQgb24gc2V0dGluZ3MuIFVzZSB3aXRoIGNhdXRpb24uJyApOwoJCSRtYXliZV9zZXJpYWxpemVkID0gZmFsc2U7Cgl9CgkqLwoJCgkKCS8vIFJlcGxhY2UgYmFzZWQgb24gdGhlIHR5cGUgb2YgdGFibGUgcmVwbGFjZW1lbnQgc2VsZWN0ZWQuCglpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3RhYmxlX3NlbGVjdGlvbicgKSA9PSAnYWxsJyApIHsgLy8gQWxsIHRhYmxlcy4KCQkKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdSZXBsYWNpbmcgaW4gYWxsIHRhYmxlcyBiYXNlZCBvbiBzZXR0aW5ncy4nICk7CgkJCgkJJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTSE9XIFRBQkxFUyIsIEFSUkFZX04gKTsKCQlmb3JlYWNoKCAkcmVzdWx0cyBhcyAkcmVzdWx0ICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdSZXBsYWNpbmcgaW4gdGFibGUgYCcgLiAkcmVzdWx0WzBdIC4gJ2AuJyApOwoJCQkkZGJyZXBsYWNlLT5icnV0ZWZvcmNlX3RhYmxlKCAkcmVzdWx0WzBdLCBhcnJheSggJG5lZWRsZSApLCBhcnJheSggJHJlcGxhY2VtZW50ICkgKTsKCQl9CgkJCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnUmVwbGFjZW1lbnQgZmluaXNoZWQuJyApOwoJCQoJfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICd0YWJsZV9zZWxlY3Rpb24nICkgPT0gJ3NpbmdsZV90YWJsZScgKSB7CgkJCgkJJHRhYmxlID0gYmFja3VwYnVkZHlfY29yZTo6ZGJlc2NhcGUoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3RhYmxlJyApICk7IC8vIFNpbmdsZSBzcGVjaWZpZWQgdGFibGUuCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnUmVwbGFjaW5nIGluIHNpbmdsZSB0YWJsZSBgJyAuICR0YWJsZSAuICdgIGJhc2VkIG9uIHNldHRpbmdzLicgKTsKCQkkZGJyZXBsYWNlLT5icnV0ZWZvcmNlX3RhYmxlKCAkdGFibGUsIGFycmF5KCAkbmVlZGxlICksIGFycmF5KCAkcmVwbGFjZW1lbnQgKSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2VtZW50IGZpbmlzaGVkLicgKTsKCQkKCX0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAndGFibGVfc2VsZWN0aW9uJyApID09ICdwcmVmaXgnICkgeyAvLyBNYXRjaGluZyB0YWJsZSBwcmVmaXguCgkJCgkJJHByZWZpeCA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmRiZXNjYXBlKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICd0YWJsZV9wcmVmaXgnICkgKTsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdSZXBsYWNpbmcgaW4gYWxsIHRhYmxlcyBtYXRjaGluZyBwcmVmaXggYCcgLiAkcHJlZml4IC4gJ2AuJyApOwoJCQoJCSRlc2NhcGVkX3ByZWZpeCA9IHN0cl9yZXBsYWNlKCAnXycsICdcXycsICRwcmVmaXggKTsKCQkkcmVzdWx0cyA9ICR3cGRiLT5nZXRfcmVzdWx0cyggIlNIT1cgVEFCTEVTIExJS0UgJ3skZXNjYXBlZF9wcmVmaXh9JSciLCBBUlJBWV9OICk7CgkJZm9yZWFjaCggJHJlc3VsdHMgYXMgJHJlc3VsdCApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnUmVwbGFjaW5nIGluIHRhYmxlIGAnIC4gJHJlc3VsdFswXSAuICdgLicgKTsKCQkJJGRicmVwbGFjZS0+YnJ1dGVmb3JjZV90YWJsZSggJHJlc3VsdFswXSwgYXJyYXkoICRuZWVkbGUgKSwgYXJyYXkoICRyZXBsYWNlbWVudCApICk7CgkJfQoJCQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1JlcGxhY2VtZW50IGZpbmlzaGVkLicgKTsKCQkKCX0gZWxzZSB7CgkJZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPmpRdWVyeSgiI3BiX2ltcG9ydGJ1ZGR5X3dvcmtpbmciKS5oaWRlKCk7PC9zY3JpcHQ+JzsKCQlkaWUoICdFcnJvciAjNDQ1Njg5MzQ4OTM0OTgzNC4gVW5rbm93biBtZXRob2QuJyApOwoJfQoJCgllY2hvICc8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+alF1ZXJ5KCIjcGJfaW1wb3J0YnVkZHlfd29ya2luZyIpLmhpZGUoKTs8L3NjcmlwdD4nOwoJZWNobyAnPGJyPjxhIGhyZWY9IicgLiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICcmcGFyZW50X2NvbmZpZz0nIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgKSAuICciIGNsYXNzPSJidXR0b24gc2Vjb25kYXJ5LWJ1dHRvbiI+JmxhcnI7ICcgLiAgX18oICdiYWNrJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9hPic7CgkKCSRwYl9iYWNrdXBidWRkeV9qc19zdGF0dXMgPSBmYWxzZTsKCXJldHVybjsKfQoKCiR0YWJsZXMgPSBhcnJheSgpOwokcHJlZml4ZXMgPSBhcnJheSgpOwoKLy8gTWFrZSBzdXJlIHRoaXMgV1AncyBwcmVmaXggaXMgaW4gdGhlcmUgZm9yIHN1cmUgKHVzZWZ1bCBpZiBzb21lb25lIHVzZXMgYSBwcmVmaXggdGhhdCBoYXMgYW4gdW5kZXJzY29yZSBpbiBpdDsgdGhleSBzaG91bGRudCBidXQgdGhleSBkbykuCmdsb2JhbCAkdGFibGVfcHJlZml4OwokcHJlZml4ZXNbXSA9ICR0YWJsZV9wcmVmaXg7CgovLyBDYWxjdWxhdGUgcHJlZml4ZXMgZm91bmQgaW4gdGhpcyBkYXRhYmFzZS4gRG9lcyBub3QgaGFuZGxlIG11bHRpcGxlLXVuZGVyc2NvcmUKJHJlc3VsdHMgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTSE9XIFRBQkxFUyIsIEFSUkFZX04gKTsKZm9yZWFjaCggJHJlc3VsdHMgYXMgJHJlc3VsdCApIHsKCSR0YWJsZXNbXSA9ICRyZXN1bHRbMF07CglpZiAoIHByZWdfbWF0Y2goICcvW2EtekEtWjAtOV0qXyhbMC05XStfKSovaScsICRyZXN1bHRbMF0sICRtYXRjaGVzICkgKSB7CgkJJHByZWZpeGVzW10gPSAkbWF0Y2hlc1swXTsKCX0KfQoKJHByZWZpeGVzID0gYXJyYXlfdW5pcXVlKCAkcHJlZml4ZXMgKTsKbmF0c29ydCggJHByZWZpeGVzICk7CgoKPz4KCgo8ZGl2PgoJPGZvcm0gYWN0aW9uPSI8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpOz8+JmRhdGFiYXNlX3JlcGxhY2U9MSZwYXJlbnRfY29uZmlnPTw/cGhwIGVjaG8gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgKTsgPz4iIG1ldGhvZD0icG9zdCI+CgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0icmVwbGFjZSI+CgkJCgkJPGg0PlJlcGxhY2UgPD9waHAgcGJfYmFja3VwYnVkZHk6OnRpcCggJ1RleHQgeW91IHdhbnQgdG8gYmUgc2VhcmNoZWQgZm9yIGFuZCByZXBsYWNlZC4gRXZlcnl0aGluZyBpbiB0aGUgYm94IGlzIGNvbnNpZGVyZWQgb25lIG1hdGNoIGFuZCBtYXkgc3BhbiBtdWx0aXBsZSBsaW5lcy4nICk7ID8+PC9oND4KCQk8dGV4dGFyZWEgbmFtZT0ibmVlZGxlIiBzdHlsZT0id2lkdGg6IDEwMCU7Ij48L3RleHRhcmVhPgoJCTxicj4KCQkKCQk8aDQ+V2l0aCA8P3BocCBwYl9iYWNrdXBidWRkeTo6dGlwKCAnVGV4dCB5b3Ugd2FudCB0byByZXBsYWNlIHdpdGguIEFueSB0ZXh0IGZvdW5kIG1hdGNoaW5nIHRoZSBib3ggYWJvdmUgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoaXMgdGV4dC4gRXZlcnl0aGluZyBpbiB0aGUgYm94IGlzIGNvbnNpZGVyZWQgb25lIG1hdGNoIGFuZCBtYXkgc3BhbiBtdWx0aXBsZSBsaW5lcy4nICk7ID8+PC9oND4KCQk8dGV4dGFyZWEgbmFtZT0icmVwbGFjZW1lbnQiIHN0eWxlPSJ3aWR0aDogMTAwJTsiPjwvdGV4dGFyZWE+CgkJCgkJPGg0PkluIHRhYmxlKHMpPC9oND4KCQk8bGFiZWwgc3R5bGU9ImZsb2F0OiBub25lOyIgZm9yPSJ0YWJsZV9zZWxlY3Rpb25fYWxsIj48aW5wdXQgaWQ9InRhYmxlX3NlbGVjdGlvbl9hbGwiICBjaGVja2VkPSdjaGVja2VkJyB0eXBlPSJyYWRpbyIgbmFtZT0idGFibGVfc2VsZWN0aW9uIiB2YWx1ZT0iYWxsIj4gYWxsIHRhYmxlczwvbGFiZWw+CgkJPGxhYmVsIHN0eWxlPSJmbG9hdDogbm9uZTsiIGZvcj0idGFibGVfc2VsZWN0aW9uX3ByZWZpeCI+PGlucHV0IGlkPSJ0YWJsZV9zZWxlY3Rpb25fcHJlZml4IiB0eXBlPSJyYWRpbyIgbmFtZT0idGFibGVfc2VsZWN0aW9uIiB2YWx1ZT0icHJlZml4Ij4gd2l0aCBwcmVmaXg6PC9sYWJlbD4KCQk8c2VsZWN0IG5hbWU9InRhYmxlX3ByZWZpeCIgaWQ9InRhYmxlX3NlbGVjdGlvbl9wcmVmaXgiIG9uY2xpY2s9ImpRdWVyeSgnI3RhYmxlX3NlbGVjdGlvbl9wcmVmaXgnKS5jbGljaygpOyI+CgkJCTw/cGhwCgkJCWZvcmVhY2goICRwcmVmaXhlcyBhcyAkcHJlZml4ICkgewoJCQkJZWNobyAnPG9wdGlvbiB2YWx1ZT0iJyAuICRwcmVmaXggLiAnIj4nIC4gJHByZWZpeCAuICc8L29wdGlvbj4nOwoJCQl9CgkJCT8+CgkJPC9zZWxlY3Q+CgkJPGxhYmVsIHN0eWxlPSJmbG9hdDogbm9uZTsiIGZvcj0idGFibGVfc2VsZWN0aW9uX3RhYmxlIj48aW5wdXQgaWQ9InRhYmxlX3NlbGVjdGlvbl90YWJsZSIgdHlwZT0icmFkaW8iIG5hbWU9InRhYmxlX3NlbGVjdGlvbiIgdmFsdWU9InNpbmdsZV90YWJsZSI+IHNpbmdsZTo8L2xhYmVsPgoJCTxzZWxlY3QgbmFtZT0idGFibGUiIGlkPSJ0YWJsZV9zZWxlY3Rpb25fdGFibGUiIG9uY2xpY2s9ImpRdWVyeSgnI3RhYmxlX3NlbGVjdGlvbl90YWJsZScpLmNsaWNrKCk7Ij4KCQkJPD9waHAKCQkJZm9yZWFjaCggJHRhYmxlcyBhcyAkdGFibGUgKSB7CgkJCQllY2hvICc8b3B0aW9uIHZhbHVlPSInIC4gJHRhYmxlIC4gJyI+JyAuICR0YWJsZSAuICc8L29wdGlvbj4nOwoJCQl9CgkJCT8+CgkJPC9zZWxlY3Q+CgkJPGg0PkluIGRhdGFiYXNlPC9oND4KCQkiPD9waHAgZWNobyAkZGF0YWJhc2VTZXR0aW5nc1snbmFtZSddOyA/PiIgb24gaG9zdCAiPD9waHAgZWNobyAkZGF0YWJhc2VTZXR0aW5nc1snaG9zdCddOyA/PiIgd2l0aCB1c2VybmFtZSAiPD9waHAgZWNobyAkZGF0YWJhc2VTZXR0aW5nc1sndXNlcm5hbWUnXTsgPz4iLgoJCTw/cGhwCgkJaWYgKCBzdWJzdHJfY291bnQoICR0YWJsZV9wcmVmaXgsICdfJyApID4gMSApIHsKCQkJZWNobyAnPHNwYW4gY2xhc3M9InBiX2xhYmVsIHBiX2xhYmVsLXdhcm5pbmciPldhcm5pbmc8L3NwYW4+ICc7CgkJCV9lKCAiU2l0ZSB0YWJsZSBwcmVmaXggY29udGFpbnMgbXVsdGlwbGUgdW5kZXJzY29yZXMuIFByZWZpeCBsaXN0IG1heSBiZSBpbmFjY3VyYXRlIGlmIHRoZXNlIGFyZSBub3QgTXVsdGlzaXRlIHN1YnNpdGVzLiIsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCX0KCQkvKgoJCTxoND5XaXRoIGFkdmFuY2VkIG9wdGlvbnM8L2g0PgoJCTxsYWJlbCBmb3I9Im1heWJlX3NlcmlhbGl6ZWQiPjxpbnB1dCBpZD0ibWF5YmVfc2VyaWFsaXplZCIgdHlwZT0iY2hlY2tib3giIG5hbWU9Im1heWJlX3NlcmlhbGl6ZWQiIHZhbHVlPSJ0cnVlIiBjaGVja2VkPSJjaGVja2VkIj4gVHJlYXQgZmllbGRzIGFzIHBvc3NpYmx5IGNvbnRhaW5pbmcgc2VyaWFsaXplZCBkYXRhICh1bmNoZWNrIHdpdGggY2F1dGlvbjsgc2xvd2VyKS48L2xhYmVsPgoJCSovCgkJPz48YnI+PGJyPgoJCgkJPHA+CgkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkJlZ2luIFJlcGxhY2VtZW50IiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiAvPiA8c3BhbiBjbGFzcz0iZGVzY3JpcHRpb24iPkNhdXRpb247IHRoaXMgY2Fubm90IGJlIHVuZG9uZS4gU2VyaWFsaXplZCBkYXRhIGlzIGhhbmRsZWQgYnkgdGhpcyByZXBsYWNlbWVudC48L3NwYW4+CgkJPC9wPgoJPC9mb3JtPgo8L2Rpdj4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9Cj8+Cgo8L2Rpdj4KPC9kaXY+CgoKPC9ib2R5Pgo8L2h0bWw+Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php
PD9waHAKLyoqCiAqIEhUTUwgMSBTdGFzaCBWaWV3CiAqCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqLwoKZ2xvYmFsICR3cF92ZXJzaW9uOwokd3BfdmVyc2lvbiA9IDE7CgovKioKICogU3Rhc2ggQVBJIEZ1bmN0aW9uCiAqCiAqIEBwYXJhbSBhcnJheSAgJHNldHRpbmdzICAgICAgICAgICBTZXR0aW5ncyBhcnJheS4KICogQHBhcmFtIHN0cmluZyAkYWN0aW9uICAgICAgICAgICAgIEFQSSBBY3Rpb24gY2FsbC4KICogQHBhcmFtIGFycmF5ICAkYWRkaXRpb25hbF9wYXJhbXMgIEFycmF5IG9mIGFkZGl0aW9uYWwgcGFyYW1ldGVycy4KICoKICogQHJldHVybiBzdHJpbmd8YXJyYXkgIEVycm9yIHN0cmluZyBvciBKU09OIHJlc3BvbnNlIGFycmF5LgogKi8KZnVuY3Rpb24gc3Rhc2hBUEkoICRzZXR0aW5ncywgJGFjdGlvbiwgJGFkZGl0aW9uYWxfcGFyYW1zID0gYXJyYXkoKSApIHsKCSRhcGlfdXJsID0gJ2h0dHBzOi8vc3Rhc2gtYXBpLTIuaXRoZW1lcy5jb20nOwoKCWdsb2JhbCAkd3BfdmVyc2lvbjsKCSR1cmxfcGFyYW1zID0gYXJyYXkoCgkJJ2FjdGlvbicgICAgPT4gJGFjdGlvbiwKCQkndXNlcicgICAgICA9PiAkc2V0dGluZ3NbJ2l0eGFwaV91c2VybmFtZSddLAoJCSd3cCcgICAgICAgID0+ICR3cF92ZXJzaW9uLAoJCSdiYicgICAgICAgID0+IDAsCgkJJ2liJyAgICAgICAgPT4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10sCgkJJ3NpdGUnICAgICAgPT4gJ2ltcG9ydGJ1ZGR5JywKCQkndGltZXN0YW1wJyA9PiB0aW1lKCksCgkpOwoKCWlmICggaXNzZXQoICRzZXR0aW5nc1snaXR4YXBpX3Bhc3N3b3JkJ10gKSApIHsgLy8gVXNlZCBvbiBpbml0aXRhbCBjb25uZWN0aW9uIHRvCgkJJHBhcmFtcyA9IGFycmF5KCAnYXV0aF90b2tlbicgPT4gJHNldHRpbmdzWydpdHhhcGlfcGFzc3dvcmQnXSApOyAvLyBpdHhhcGlfcGFzc3dvcmQgaXMgYSBIQVNIIG9mIHVzZXIncyBwYXNzd29yZC4KCX0gZWxzZWlmICggaXNzZXQoICRzZXR0aW5nc1snaXR4YXBpX3Rva2VuJ10gKSApIHsgLy8gVXNlZCBvbiBpbml0aXRhbCBjb25uZWN0aW9uIHRvCgkJJHBhcmFtcyA9IGFycmF5KCAndG9rZW4nID0+ICRzZXR0aW5nc1snaXR4YXBpX3Rva2VuJ10gKTsgLy8gaXR4YXBpX3Bhc3N3b3JkIGlzIGEgSEFTSCBvZiB1c2VyJ3MgcGFzc3dvcmQuCgl9IGVsc2UgewoJCSRlcnJvciA9ICdCYWNrdXBCdWRkeSBFcnJvciAjNzkzNzQ5NDM2OiBObyB2YWxpZCB0b2tlbiAoaXR4YXBpX3Rva2VuKSBvciBoYXNoZWQgcGFzc3dvcmQgKGl0eGFwaV9wYXNzd29yZCkgc3BlY2lmaWVkLiBUaGlzIHNob3VsZCBub3QgaGFwcGVuLic7CgkJdHJpZ2dlcl9lcnJvciggJGVycm9yLCBFX1VTRVJfTk9USUNFICk7CgkJcmV0dXJuICRlcnJvcjsKCX0KCgkkcGFyYW1zID0gYXJyYXlfbWVyZ2UoICRwYXJhbXMsICRhZGRpdGlvbmFsX3BhcmFtcyApOwoJJGJvZHkgICA9IGFycmF5KCAncmVxdWVzdCcgPT4ganNvbl9lbmNvZGUoICRwYXJhbXMgKSApOwoKCSRwb3N0X3VybCA9ICRhcGlfdXJsIC4gJy8/JyAuIGh0dHBfYnVpbGRfcXVlcnkoICR1cmxfcGFyYW1zLCBudWxsLCAnJicgKTsKCgkkcmVxdWVzdCA9IG5ldyBSZXF1ZXN0Q29yZSggJHBvc3RfdXJsICk7CgkkcmVxdWVzdC0+c2V0X21ldGhvZCggJ1BPU1QnICk7CgkkcmVxdWVzdC0+c2V0X2JvZHkoICRib2R5ICk7CgkkcmVzcG9uc2UgPSAkcmVxdWVzdC0+c2VuZF9yZXF1ZXN0KCB0cnVlICk7CgoJaWYgKCAhICRyZXNwb25zZS0+aXNPSygpICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdTdGFzaCByZXF1ZXN0IGZvciBmaWxlcyBmYWlsZWQuJyApOwoJCXJldHVybiAkcmVzcG9uc2UtPmJvZHk7Cgl9IGVsc2UgewoJCS8vIFNlZSBpZiB3ZSBnb3QgYSBqc29uIHJlc3BvbnNlLgoJCSRyZXNwb25zZV9kZWNvZGVkID0ganNvbl9kZWNvZGUoICRyZXNwb25zZS0+Ym9keSwgdHJ1ZSApOwoJCWlmICggISAkcmVzcG9uc2VfZGVjb2RlZCApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ1N0YXNoIGRpZCBub3QgZ2V0IHZhbGlkIGpzb24gcmVzcG9uc2UuJyApOwoJCX0KCgkJLy8gRmluYWxseSBzZWUgaWYgdGhlIEFQSSByZXR1cm5lZCBhbiBlcnJvci4KCQlpZiAoIGlzc2V0KCAkcmVzcG9uc2VfZGVjb2RlZFsnZXJyb3InXSApICkgewoJCQlpZiAoIGlzc2V0KCAkcmVzcG9uc2VfZGVjb2RlZFsnZXJyb3InXVsnbWVzc2FnZSddICkgKSB7CgkJCQkkZXJyb3IgPSAnRXJyb3IgIzM5NzUyODkzYS4gU2VydmVyIHJlcG9ydGVkIGFuIGVycm9yIHBlcmZvcm1pbmcgYWN0aW9uIGAnIC4gJGFjdGlvbiAuICdgIHdpdGggYWRkaXRpb25hbCBwYXJhbXM6IGAnIC4gcHJpbnRfciggJGFkZGl0aW9uYWxfcGFyYW1zLCB0cnVlICkgLiAnYC4gRGV0YWlsczogYCcgLiBwcmludF9yKCAkcmVzcG9uc2VfZGVjb2RlZFsnZXJyb3InXSwgdHJ1ZSApIC4gJ2AuJzsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJGVycm9yICk7CgkJCQlyZXR1cm4gJHJlc3BvbnNlX2RlY29kZWRbJ2Vycm9yJ11bJ21lc3NhZ2UnXTsKCQkJfSBlbHNlIHsKCQkJCSRlcnJvciA9ICdFcnJvciAjMzgyMzk3My4gUmVjZWl2ZWQgU3Rhc2ggQVBJIGVycm9yIGJ1dCBubyBtZXNzYWdlIGZvdW5kLiBEZXRhaWxzOiBgJyAuIHByaW50X3IoICRyZXNwb25zZV9kZWNvZGVkLCB0cnVlICkgLiAnYC4nOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ3dhcm5pbmcnLCAkZXJyb3IgKTsKCQkJCXJldHVybiAkZXJyb3I7CgkJCX0KCQl9IGVsc2UgeyAvLyBOTyBFUlJPUlMuCgkJCXJldHVybiAkcmVzcG9uc2VfZGVjb2RlZDsKCQl9Cgl9Cn0KPz4KCjxzdHlsZT4KLndpZGVmYXQgdGQgewoJcGFkZGluZzogMjBweCA3cHg7Cglmb250LXNpemU6IDE0cHg7Cn0KLndpZGVmYXQgdGQgYTpob3ZlciB7Cgl0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KLndpZGVmYXQgdGQgZm9ybSB7CgltYXJnaW4tdG9wOiAtMTJweDsKCWZvbnQtc2l6ZTogMTJweDsKfQouc3Rhc2hfYmFja3VwX2ZpbGUgewoJZm9udC1zaXplOiAxLjJlbTsKfQo8L3N0eWxlPgo8P3BocAokSVRYQVBJX0tFWSA9ICdpeGhvN2RrMHAyNDRuMG9iJzsgLy8gTW92ZSB0byBhIGNvbnN0YW50PwokSVRYQVBJX1VSTCA9ICdodHRwOi8vYXBpLml0aGVtZXMuY29tJzsgLy8gTW92ZSB0byBhIGNvbnN0YW50PwoKJGNyZWRlbnRpYWxzX2Zvcm0gPSBuZXcgcGJfYmFja3VwYnVkZHlfc2V0dGluZ3MoICdwcmVfc2V0dGluZ3MnLCBmYWxzZSwgJ3VwbG9hZD1zdGFzaCNwbHVnaW5idWRkeS10YWJzLXN0YXNoJyApOyAvLyBuYW1lLCBzYXZlcG9pbnR8ZmFsc2UsIGFkZGl0aW9uYWwgcXVlcnlzdHJpbmcuCgokY3JlZGVudGlhbHNfZm9ybS0+YWRkX3NldHRpbmcoCglhcnJheSgKCQkndHlwZScgID0+ICd0ZXh0JywKCQknbmFtZScgID0+ICdpdHhhcGlfdXNlcm5hbWUnLAoJCSd0aXRsZScgPT4gX18oICdpVGhlbWVzIHVzZXJuYW1lJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJJ3J1bGVzJyA9PiAncmVxdWlyZWR8c3RyaW5nWzEtNDVdJywKCSkKKTsKJGNyZWRlbnRpYWxzX2Zvcm0tPmFkZF9zZXR0aW5nKAoJYXJyYXkoCgkJJ3R5cGUnICA9PiAncGFzc3dvcmQnLAoJCSduYW1lJyAgPT4gJ2l0eGFwaV9wYXNzd29yZF9yYXcnLAoJCSd0aXRsZScgPT4gX18oICdpVGhlbWVzIHBhc3N3b3JkJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJJ3J1bGVzJyA9PiAncmVxdWlyZWR8c3RyaW5nWzEtNDVdJywKCSkKKTsKCiRzZXR0aW5nc19yZXN1bHQgPSAkY3JlZGVudGlhbHNfZm9ybS0+cHJvY2VzcygpOwokbG9naW5fd2VsY29tZSAgID0gJzxjZW50ZXI+JyAuIF9fKCAnTG9nIGluIHRvIFN0YXNoIHdpdGggeW91ciBpVGhlbWVzLmNvbSBtZW1iZXIgYWNjb3VudC4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8YnI+PGJyPic7CgppZiAoIGNvdW50KCAkc2V0dGluZ3NfcmVzdWx0ICkgPT09IDAgKSB7IC8vIE5vIGZvcm0gc3VibWl0dGVkLgoKCWVjaG8gJGxvZ2luX3dlbGNvbWU7CgkkY3JlZGVudGlhbHNfZm9ybS0+ZGlzcGxheV9zZXR0aW5ncyggJ0Nvbm5lY3QgdG8gU3Rhc2gnICk7Cgp9IGVsc2UgeyAvLyBGb3JtIHN1Ym1pdHRlZC4KCWlmICggY291bnQoICRzZXR0aW5nc19yZXN1bHRbJ2Vycm9ycyddICkgPiAwICkgeyAvLyBGb3JtIGVycm9ycy4KCQllY2hvICRsb2dpbl93ZWxjb21lOwoKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoIGltcGxvZGUoICc8YnI+JywgJHNldHRpbmdzX3Jlc3VsdFsnZXJyb3JzJ10gKSApOwoJCSRjcmVkZW50aWFsc19mb3JtLT5kaXNwbGF5X3NldHRpbmdzKCAnQ29ubmVjdCB0byBTdGFzaCcgKTsKCgl9IGVsc2UgeyAvLyBObyBmb3JtIGVycm9yczsgcHJvY2VzcyEKCgkJcmVxdWlyZV9vbmNlIGRpcm5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKSAuICcvbGliL3JlcXVlc3Rjb3JlL3JlcXVlc3Rjb3JlLmNsYXNzLnBocCc7CgkJcmVxdWlyZV9vbmNlIGRpcm5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKSAuICcvbGliL3N0YXNoMi9jbGFzcy5pdHhfaGVscGVyMi5waHAnOwoKCQlnbG9iYWwgJHdwX3ZlcnNpb247CgkJJGl0eGFwaV91c2VybmFtZSA9IHN0cnRvbG93ZXIoICRzZXR0aW5nc19yZXN1bHRbJ2RhdGEnXVsnaXR4YXBpX3VzZXJuYW1lJ10gKTsKCQkkcGFzc3dvcmRfaGFzaCAgID0gaVRoZW1lc19DcmVkZW50aWFsczo6Z2V0X3Bhc3N3b3JkX2hhc2goICRpdHhhcGlfdXNlcm5hbWUsICRzZXR0aW5nc19yZXN1bHRbJ2RhdGEnXVsnaXR4YXBpX3Bhc3N3b3JkX3JhdyddICk7CgkJJGFjY2Vzc190b2tlbiAgICA9IElUWEFQSV9IZWxwZXIyOjpnZXRfYWNjZXNzX3Rva2VuKCAkaXR4YXBpX3VzZXJuYW1lLCAkcGFzc3dvcmRfaGFzaCwgJ2ltcG9ydGJ1ZGR5JywgJHdwX3ZlcnNpb24gKTsKCgkJJHNldHRpbmdzID0gYXJyYXkoCgkJCSdpdHhhcGlfdXNlcm5hbWUnID0+ICRpdHhhcGlfdXNlcm5hbWUsCgkJCSdpdHhhcGlfcGFzc3dvcmQnID0+ICRhY2Nlc3NfdG9rZW4sCgkJKTsKCQkkcmVzcG9uc2UgPSBzdGFzaEFQSSggJHNldHRpbmdzLCAnY29ubmVjdCcgKTsKCgkJJGxvZ2dlZF9pbiA9IGZhbHNlOwoJCWlmICggISBpc19hcnJheSggJHJlc3BvbnNlICkgKSB7IC8vIEVycm9yIG1lc3NhZ2UuCgkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yICMzOTgzNzk0IGZyb20gc2VydmVyOiBgJyAuIHByaW50X3IoICRyZXNwb25zZSwgdHJ1ZSApIC4gJ2AuJyApOwoJCQkkY3JlZGVudGlhbHNfZm9ybS0+ZGlzcGxheV9zZXR0aW5ncyggJ1N1Ym1pdCcgKTsKCQl9IGVsc2UgewoJCQlpZiAoIGlzc2V0KCAkcmVzcG9uc2VbJ2Vycm9yJ10gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiAnIC4gJHJlc3BvbnNlWydlcnJvciddWydtZXNzYWdlJ10gKTsKCQkJCSRjcmVkZW50aWFsc19mb3JtLT5kaXNwbGF5X3NldHRpbmdzKCAnU3VibWl0JyApOwoJCQl9IGVsc2UgewoJCQkJaWYgKCBpc3NldCggJHJlc3BvbnNlWyd0b2tlbiddICkgKSB7CgkJCQkJJHNldHRpbmdzWydpdHhhcGlfdG9rZW4nXSA9ICRyZXNwb25zZVsndG9rZW4nXTsKCQkJCQkkaXR4YXBpX3Rva2VuICAgICAgICAgICAgID0gJHNldHRpbmdzWydpdHhhcGlfdG9rZW4nXTsKCQkJCQl1bnNldCggJHNldHRpbmdzWydpdHhhcGlfcGFzc3dvcmQnXSApOyAvLyBObyBsb25nZXJuIGVlZGVkIHNpbmNlIHdlIGhhdmUgdG9rZW4gbm93LgoJCQkJCSRsb2dnZWRfaW4gPSB0cnVlOwoJCQkJfSBlbHNlIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdFcnJvciAjMzQ5NzQ3MzQzMjM6IFVuZXhwZWN0ZWQgc2VydmVyIHJlc3BvbnNlLiBUb2tlbiBtaXNzaW5nLiBDaGVjayB5b3VyIGxvZ2luIGFuZCB0cnkgYWdhaW4uIERldGFpbGVkIHJlc3BvbnNlOiBgJyAuIHByaW50X3IoICRyZXNwb25zZSwgdHJ1ZSApIC4gJ2AuJyApOwoJCQkJCSRjcmVkZW50aWFsc19mb3JtLT5kaXNwbGF5X3NldHRpbmdzKCAnU3VibWl0JyApOwoJCQkJfQoJCQl9CgkJfQoKCQlpZiAoIHRydWUgPT09ICRsb2dnZWRfaW4gKSB7CgkJCS8vIEdldCBmaWxlcy4KCQkJJHN0YXNoX2ZpbGVzID0gc3Rhc2hBUEkoICRzZXR0aW5ncywgJ2ZpbGVzJyApOwoKCQkJLy8gRmluYWxseSBzZWUgaWYgdGhlIEFQSSByZXR1cm5lZCBhbiBlcnJvci4KCQkJaWYgKCAhIGlzX2FycmF5KCAkc3Rhc2hfZmlsZXMgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ1N0YXNoIEVycm9yOiAnIC4gJHN0YXNoX2ZpbGVzICk7CgkJCQkkY3JlZGVudGlhbHNfZm9ybS0+ZGlzcGxheV9zZXR0aW5ncyggJ1N1Ym1pdCcgKTsKCQkJfSBlbHNlIHsgLy8gTk8gRVJST1JTLgoKCgkJCQkvLyBTb3J0IGluIG9yZGVyICYgZXhjbHVkZSB1bndhbnRlZCBiYWNrdXAgdHlwZXMuCgkJCQkkYmFja3VwX2xpc3RfdGVtcCA9IGFycmF5KCk7CgkJCQlmb3JlYWNoICggKGFycmF5KSAkc3Rhc2hfZmlsZXMgYXMgJGkgPT4gJHN0YXNoX2ZpbGUgKSB7CgkJCQkJJGZpbGUgICAgID0gJHN0YXNoX2ZpbGVbJ2ZpbGVuYW1lJ107CgkJCQkJJHVybCAgICAgID0gJHN0YXNoX2ZpbGVbJ3VybCddOwoJCQkJCSRzaXplICAgICA9ICRzdGFzaF9maWxlWydzaXplJ107CgkJCQkJJG1vZGlmaWVkID0gJHN0YXNoX2ZpbGVbJ3VwbG9hZGVkX3RpbWVzdGFtcCddOwoKCQkJCQkvLyBBdm9pZCBjb2xsaW9uIGZvciBzb3J0aW5nLgoJCQkJCXdoaWxlICggaXNzZXQoICRiYWNrdXBfbGlzdF90ZW1wWyAkbW9kaWZpZWQgXSApICkgewoJCQkJCQkkbW9kaWZpZWQgKz0gMC4xOwoJCQkJCX0KCgkJCQkJaWYgKCAnZGInID09ICRzdGFzaF9maWxlWydiYWNrdXBfdHlwZSddICkgewoJCQkJCQkkYmFja3VwX3R5cGUgPSAnRGF0YWJhc2UnOwoJCQkJCX0gZWxzZWlmICggJ2Z1bGwnID09ICRzdGFzaF9maWxlWydiYWNrdXBfdHlwZSddICkgewoJCQkJCQkkYmFja3VwX3R5cGUgPSAnRnVsbCc7CgkJCQkJfSBlbHNlaWYgKCAndGhlbWVzJyA9PSAkc3Rhc2hfZmlsZVsnYmFja3VwX3R5cGUnXSApIHsgLy8gT21pdCBmcm9tIGxpc3QuCgkJCQkJCXVuc2V0KCAkc3Rhc2hfZmlsZXNbICRpIF0gKTsKCQkJCQkJY29udGludWU7CgkJCQkJfSBlbHNlaWYgKCAncGx1Z2lucycgPT0gJHN0YXNoX2ZpbGVbJ2JhY2t1cF90eXBlJ10gKSB7IC8vIE9taXQgZnJvbSBsaXN0LgoJCQkJCQl1bnNldCggJHN0YXNoX2ZpbGVzWyAkaSBdICk7CgkJCQkJCWNvbnRpbnVlOwoJCQkJCX0gZWxzZWlmICggJ21lZGlhJyA9PSAkc3Rhc2hfZmlsZVsnYmFja3VwX3R5cGUnXSApIHsgLy8gT21pdCBmcm9tIGxpc3QuCgkJCQkJCXVuc2V0KCAkc3Rhc2hfZmlsZXNbICRpIF0gKTsKCQkJCQkJY29udGludWU7CgkJCQkJfSBlbHNlaWYgKCAnZmlsZXMnID09ICRzdGFzaF9maWxlWydiYWNrdXBfdHlwZSddICkgewoJCQkJCQkkYmFja3VwX3R5cGUgPSAnRmlsZXMnOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRiYWNrdXBfdHlwZSA9ICdVbmtub3duJzsKCQkJCQkJY29udGludWU7CgkJCQkJfQoJCQkJCSRzdGFzaF9maWxlWydiYWNrdXBfdHlwZV9wcmV0dHknXSA9ICRiYWNrdXBfdHlwZTsKCgkJCQkJJGJhY2t1cF9saXN0X3RlbXBbICRtb2RpZmllZCBdID0gJHN0YXNoX2ZpbGU7CgkJCQl9CgkJCQlrcnNvcnQoICRiYWNrdXBfbGlzdF90ZW1wICk7CgkJCQkkc3Rhc2hfZmlsZXMgPSAkYmFja3VwX2xpc3RfdGVtcDsKCQkJCXVuc2V0KCAkYmFja3VwX2xpc3RfdGVtcCApOwoKCgkJCQkvLyBTcGxpdCB1cCBpbnRvIHNpdGVzLgoJCQkJJGJhY2t1cF9saXN0cyA9IGFycmF5KCk7CgkJCQlmb3JlYWNoICggJHN0YXNoX2ZpbGVzIGFzICRzdGFzaF9maWxlICkgewoJCQkJCSRiYWNrdXBfbGlzdHNbICRzdGFzaF9maWxlWydzaXRlJ10gXVtdID0gJHN0YXNoX2ZpbGU7CgkJCQl9CgkJCQl1bnNldCggJHN0YXNoX2ZpbGVzICk7CgoKCQkJCS8vIFJlbmRlciB0YWJsZSBsaXN0aW5nIGZpbGVzLgoJCQkJaWYgKCBjb3VudCggJGJhY2t1cF9saXN0cyApID09IDAgKSB7CgkJCQkJZWNobyAnPGI+JzsKCQkJCQllc2NfaHRtbF9lKCAnWW91IGhhdmUgbm90IHNlbnQgYW55IGJhY2t1cHMgdG8gU3Rhc2ggeWV0IChvciBmaWxlcyBhcmUgc3RpbGwgdHJhbnNmZXJyaW5nKS4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCQllY2hvICc8L2I+JzsKCQkJCX0gZWxzZSB7CgoJCQkJCS8vIExvb3AgdGhyb3VnaCBlYWNoIHNpdGUuCgkJCQkJZm9yZWFjaCAoICRiYWNrdXBfbGlzdHMgYXMgJHN0YXNoX2ZpbGVzICkgeyAvLyBFYWNoIHNpdGUuCgoJCQkJCQkvLyBMb29wIHRocm91Z2ggZWFjaCBmaWxlIHdpdGhpbiB0aGlzIHNpdGUuCgkJCQkJCSRkaXNwbGF5X2xpc3QgPSBhcnJheSgpOwoJCQkJCQlmb3JlYWNoICggJHN0YXNoX2ZpbGVzIGFzICRzdGFzaF9maWxlICkgeyAvLyBFYWNoIGJhY2t1cCBpbiBzaXRlLgoJCQkJCQkJJHNpdGUgPSAkc3Rhc2hfZmlsZVsnc2l0ZSddOwoKCQkJCQkJCSRkaXNwbGF5X2xpc3RbXSA9IGFycmF5KAoJCQkJCQkJCSRzdGFzaF9maWxlWydiYWNrdXBfdHlwZV9wcmV0dHknXSwKCQkJCQkJCQknPHNwYW4gY2xhc3M9InN0YXNoX2JhY2t1cF9maWxlIj4nIC4gcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPmRhdGUoIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5sb2NhbGl6ZV90aW1lKCAkc3Rhc2hfZmlsZVsndXBsb2FkZWRfdGltZXN0YW1wJ10gKSwgJ2wsIEYgaiwgWSAtIGc6aSBBJyApIC4gJzwvc3Bhbj4gPHNwYW4gY2xhc3M9ImRlc2NyaXB0aW9uIj4oJyAuIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT50aW1lX2FnbyggJHN0YXNoX2ZpbGVbJ3VwbG9hZGVkX3RpbWVzdGFtcCddICkgLiAnIGFnbyk8L3NwYW4+PC9hPjxicj48YSBocmVmPSInIC4gJHN0YXNoX2ZpbGVbJ3VybCddIC4gJyI+JyAuICRzdGFzaF9maWxlWydiYXNlbmFtZSddIC4gJzwvYT4nLAoJCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5maWxlX3NpemUoICRzdGFzaF9maWxlWydzaXplJ10gKSwKCQkJCQkJCQknPGZvcm0gYWN0aW9uPSI/I3BsdWdpbmJ1ZGR5LXRhYnMtc2VydmVyIiBtZXRob2Q9IlBPU1QiPgoJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwYXNzX2hhc2giIHZhbHVlPSInIC4gUEJfUEFTU1dPUkQgLiAnIj4KCQkJCQkJCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idXBsb2FkIiB2YWx1ZT0ic3Rhc2giPgoJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJvcHRpb25zIiB2YWx1ZT0iJyAuIGh0bWxzcGVjaWFsY2hhcnMoIHNlcmlhbGl6ZSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zICkgKSAuICciPgoJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsaW5rIiB2YWx1ZT0iJyAuICRzdGFzaF9maWxlWyd1cmwnXSAuICciPgoJCQkJCQkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJSZXN0b3JlIiBjbGFzcz0iYnV0dG9uLXByaW1hcnkiPgoJCQkJCQkJCTwvZm9ybT4nLAoKCQkJCQkJCSk7CgkJCQkJCX0KCgkJCQkJCWVjaG8gJzxoMz5TaXRlOiAnIC4gZXNjX2h0bWwoICRzaXRlICkgLiAnPC9oMz4nOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6JHVpLT5saXN0X3RhYmxlKAoJCQkJCQkJJGRpc3BsYXlfbGlzdCwKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSdjb2x1bW5zJyA9PiBhcnJheSggJ1R5cGUnLCAnVXBsb2FkZWQ8aW1nIHNyYz0iJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9zb3J0X2Rvd24ucG5nIiBzdHlsZT0idmVydGljYWwtYWxpZ246IDBweDsiIHRpdGxlPSJTb3J0ZWQgbW9zdCByZWNlbnQgZmlyc3QiPjxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+KENsaWNrIHRvIGRvd25sb2FkKTwvc3Bhbj4nLCAnRmlsZSBTaXplJywgJ0FjdGlvbicgKSwKCQkJCQkJCQknY3NzJyAgICAgPT4gJ3dpZHRoOiAxMDAlOycsCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJCWVjaG8gJzxicj48YnI+JzsKCgkJCQkJfQoJCQkJfQoJCQl9IC8vIGVuZCBubyBlcnJvcnMgZ2V0dGluZyBmaWxlIGluZm8gZnJvbSBBUEkuCgkJfSBlbHNlIHsgLy8gZW5kIGxvZ2dlZCBpbi4KCQkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnU3Rhc2ggTG9naW4gRXJyb3IuJyApOwoJCQkkY3JlZGVudGlhbHNfZm9ybS0+ZGlzcGxheV9zZXR0aW5ncyggJ1N1Ym1pdCcgKTsKCQl9Cgl9Cn0gLy8gZW5kIGZvcm0gc3VibWl0dGVkLgoKPz4KCjxicj48aHI+CjxjZW50ZXI+Cgk8YSBocmVmPSJodHRwczovL3N5bmMuaXRoZW1lcy5jb20vc3Rhc2giIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1zZWNvbmRhcnkiPk1hbmFnZSB5b3VyIFN0YXNoIGZpbGVzIHZpYSBpVGhlbWVzIFN5bmM8L2E+CjwvY2VudGVyPgo8YnI+Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
CTxzY3JpcHQ+Ly9iYl9hY3Rpb24oICdpZnJhbWVMb2FkZWQnICk7PC9zY3JpcHQ+CjwvaHRtbD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
PGh0bWw+Cjw/cGhwCnJlcXVpcmUoICdfYXNzZXRzLnBocCcgKTsKCgoKaWYgKCAndHJ1ZScgIT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7IC8vIE5PUk1BTCwgTk9UIERFUExPWU1FTlQuCj8+Cgk8c2NyaXB0PgoJCXZhciB3aW4gPSB3aW5kb3cuZGlhbG9nQXJndW1lbnRzIHx8IG9wZW5lciB8fCBwYXJlbnQgfHwgdG9wOwoJCXdpbi53aW5kb3cuc2Nyb2xsVG8oMCwwKTsKCQkKCQlmdW5jdGlvbiBwYl9zdGF0dXNfYXBwZW5kKCBzdGF0dXNfc3RyaW5nICkgewoJCQkvL3ZhciB3aW4gPSB3aW5kb3cuZGlhbG9nQXJndW1lbnRzIHx8IG9wZW5lciB8fCBwYXJlbnQgfHwgdG9wOwoJCQl3aW4ucGJfc3RhdHVzX2FwcGVuZCggc3RhdHVzX3N0cmluZyApOwoJCX0KCQlmdW5jdGlvbiBwYl9zdGF0dXNfdW5kb3VybCggdW5kb191cmwgKSB7CgkJCS8vdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7CgkJCXdpbi5wYl9zdGF0dXNfdW5kb3VybCggdW5kb191cmwgKTsKCQl9CgkJCgkJCgkJCgkJZnVuY3Rpb24gcGFnZVRpdGxlKCB0aXRsZSApIHsKCQkJCgkJCXdpbi5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoIHRpdGxlICk7CgkJfQoJCQoJCWZ1bmN0aW9uIGJiX2FjdGlvbiggYWN0aW9uLCBub3RlICkgewoJCQl3aW4uYmJfYWN0aW9uKCBhY3Rpb24sIG5vdGUgKTsKCQl9CgkJCgkJZnVuY3Rpb24gYmJfcmVzdG9yZURhdGEoIGRhdGEgKSB7CgkJCXdpbi5iYl9yZXN0b3JlRGF0YSggZGF0YSApOwoJCX0KCQkKCQlmdW5jdGlvbiBiYl9zaG93U3RlcCggc3RlcCwgZGF0YSApIHsKCQkJd2luLmJiX3Nob3dTdGVwKCBzdGVwLCBkYXRhICk7CgkJfQoJCQoJPC9zY3JpcHQ+Cjw/cGhwIH0gZWxzZSB7IC8vIERFUExPWU1FTlQgPz4KCTxzY3JpcHQ+CgkJZnVuY3Rpb24gcGJfc3RhdHVzX2FwcGVuZCgpIHsKCQl9CgkJCgkJZnVuY3Rpb24gcGJfc3RhdHVzX3VuZG91cmwoIHVuZG9fdXJsICkgewoJCX0KCQkKCQlmdW5jdGlvbiBwYWdlVGl0bGUoIHRpdGxlICkgewoJCX0KCQkKCQlmdW5jdGlvbiBiYl9hY3Rpb24oIGFjdGlvbiwgbm90ZSApIHsKCQl9CgkJCgkJZnVuY3Rpb24gYmJfcmVzdG9yZURhdGEoIGRhdGEgKSB7CgkJfQoJCQoJCWZ1bmN0aW9uIGJiX3Nob3dTdGVwKCBzdGVwLCBkYXRhICkgewoJCX0KCTwvc2NyaXB0Pgo8P3BocCB9ID8+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
PCUgaWYgKCBwb3RlbnRpYWxQcm9ibGVtcy5sZW5ndGggPiAwICkgeyAlPgoJPGRpdiBjbGFzcz0ibWFpbl9ib3hfaGVhZCB3YXJuaW5nX2FsZXJ0X2JveCI+CgkJPHNwYW4gY2xhc3M9ImVycm9yX3dhcm5pbmdfdGl0bGUiPk9uZSBvciBtb3JlIHBvdGVudGlhbCBwcm9ibGVtcyBtYXkgaGF2ZSBiZWVuIGZvdW5kOjwvc3Bhbj4KCQk8dWwgY2xhc3M9ImJhY2t1cGJ1ZGR5X3dhcm5pbmdfbGlzdCI+CgkJCTwlIGpRdWVyeS5lYWNoKCBwb3RlbnRpYWxQcm9ibGVtcywgZnVuY3Rpb24oIGtleSwgcG90ZW50aWFsUHJvYmxlbSApeyAlPgoJCQk8bGk+PCU9cG90ZW50aWFsUHJvYmxlbSU+PC9saT4KCQkJPCUgfSk7ICU+CgkJPC91bD4KCTwvZGl2Pjxicj4KPCUgfSAlPgoKPCUgaWYgKCAnMScgPT0gYmxvZ1B1YmxpY1N0YXR1cyApIHsKCXNvdXJjZVNpdGVQdWJsaWNTdGF0dXNUZXh0ID0gJ1B1YmxpYyAtIERvIG5vdCBkaXNjb3VyYWdlIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgdGhpcyBzaXRlJzsKfSBlbHNlIGlmICggJzAnID09IGJsb2dQdWJsaWNTdGF0dXMgKSB7Cglzb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCA9ICdQcml2YXRlIC0gRGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZSc7Cn0gZWxzZSB7Cglzb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCA9ICdDdXJyZW50IHN0YXR1cyBub3QgZGV0ZWN0ZWQnOwp9CiU+CgoKCgo8aDM+VmVyaWZ5IHNpdGUgYmVmb3JlIHByb2NlZWRpbmcgdG8gY2xlYW51cDo8L2gzPgo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48JT1ob21ldXJsJT48L2E+Cjxicj48YnI+CgoKPHNjcmlwdD4KalF1ZXJ5KCAnLmV4cGFuZGVyJyApLmNsaWNrKCBmdW5jdGlvbigpewoJalF1ZXJ5KHRoaXMpLm5leHQoJy5jb250ZW50Jykuc2xpZGVUb2dnbGUoKTsKfSk7Cjwvc2NyaXB0PgoKPGgzPkNvbW1vbiBpc3N1ZXMgJiB0aXBzOjwvaDM+CjxkaXYgY2xhc3M9ImV4cGFuZGVyLWJveCI+Cgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+Q2xpY2tpbmcgb24gYSBwb3N0IHJlc3VsdHMgaW4gYSA0MDQgTm90IEZvdW5kPC9hPgoJPGRpdiBjbGFzcz0iY29udGVudCI+CgkJVHlwaWNhbGx5IGNhdXNlZCBieSBhIHByb2JsZW0gd2l0aCB5b3VyIC5odGFjY2VzcyBmaWxlLCB0aGVyZSBpcyBhIHNpbXBsZSBmaXg6IExvZyBpbnRvIHlvdXIgd3AtYWRtaW4sIG5hdmlnYXRlIHRvIFNldHRpbmdzOiBQZXJtYWxpbmtzIGluIHRoZSBXb3JkUHJlc3MgbWVudSBhbmQgY2xpY2sgdGhlICJTYXZlIiBidXR0b24gdG8gdXBkYXRlIHBlcm1hbGluayBzZXR0aW5ncyB0byB5b3VyIC5odGFjY2VzcyBmaWxlLiBUaGlzIHR5cGljYWxseSByZXNvbHZlcyB0aGlzIHByb2JsZW0uCgk8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImV4cGFuZGVyLWJveCI+Cgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+TG9nZ2luZyBpbiByZWRpcmVjdHMgYmFjayB0byB0aGUgb2xkIHNpdGU8L2E+Cgk8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCQlUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IGVudGVyaW5nIHRoZSBzb3VyY2Ugc2l0ZSBVUkwgYXMgdGhlIGRlc3RpbmF0aW9uIFVSTCBvbiBTdGVwIDMuICBSZS1yZXN0b3JpbmcgdXNpbmcgdGhlIGNvcnJlY3QgVVJMIHNob3VsZCBmaXggdGhpcyBwcm9ibGVtLgoJPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJleHBhbmRlci1ib3giPgoJPGEgY2xhc3M9ImV4cGFuZGVyIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPlNvdXJjZSBzaXRlIGhhcyBjaGFuZ2VkIHRvIHRoZSBkZXN0aW5hdGlvbiBVUkw8L2E+Cgk8ZGl2IGNsYXNzPSJjb250ZW50Ij4KCQlUaGlzIGlzIGNhdXNlZCBpZiB5b3UgcmVzdG9yZWQgb3ZlciB5b3VyIHNvdXJjZSBzaXRlIGRhdGFiYXNlIGJ5IGVudGVyaW5nIHRoZSBzb3VyY2Ugc2l0ZSBkYXRhYmFzZSBzZXR0aW5ncyBvbiBTdGVwIDMuIFRoaXMgbWVhbnMgdGhhdCB5b3VyIG5ldyBzaXRlIEFORCB5b3VyIG9sZCBzaXRlIGFyZSBub3cgdXNpbmcgdGhlIHNhbWUgZGF0YWJhc2UgYnV0IHRoZSBkYXRhYmFzZSBoYXMgYmVlbiBtaWdyYXRlZCB0byB3b3JrIHdpdGggdGhlIG5ldyBVUkwuIFlvdSBtYXkgcmUtcmVzdG9yZSBib3RoIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIHVzaW5nIGNvcnJlY3Qgc2V0dGluZ3Mgb3IgdXNlIHRoZSBtYXNzIGRhdGFiYXNlIHJlcGxhY2VtZW50IHRvb2wuICBZb3UgbWF5IGNvcnJlY3QgdGhlIG1vZGlmaWVkIFVSTCBvbiB0aGUgc291cmNlIHNpdGUgYnkgdXNpbmcgdGhlIERpYWdub3N0aWNzIHBhZ2UncyBNYXNzIFRleHQgUmVwbGFjZSB0b29sIHdpdGhpbiB0aGUgRGF0YWJhc2UgdGFiLgoJPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJleHBhbmRlci1ib3giPgoJPGEgY2xhc3M9ImV4cGFuZGVyIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPkZpbGUgcGVybWlzc2lvbnMgaGF2ZSBjaGFuZ2VkPC9hPgoJPGRpdiBjbGFzcz0iY29udGVudCI+CgkJQ3VzdG9tIGZpbGUgcGVybWlzc2lvbnMgbWF5IGJlIHNlcnZlci1zcGVjaWZpYyBhbmQgbWF5IG5vdCBzdGF5IHRoZSBzYW1lIGFzIHRoZSBzb3VyY2Ugc2l0ZS4gSWYgeW91IG1hZGUgYW55IGN1c3RvbSBmaWxlIHBlcm1pc3Npb24gY2hhbmdlcyAoZWl0aGVyIG1hbnVhbGx5IG9yIHZpYSBhIHBsdWdpbiBzdWNoIGFzIGEgU2VjdXJpdHkgcGx1Z2luKSB5b3UgbWF5IG5lZWQgdG8gbWFudWFsbHkgcmUtYXBwbHkgdGhlbS4gIE5vdCBhbGwgc2VydmVycyB3aWxsIGZ1bmN0aW9uIHByb3Blcmx5IHdpdGggdGhlIHNhbWUgcGVybWlzc2lvbnMuCgk8L2Rpdj4KPC9kaXY+Cjxicj48YnI+CgoKCjxmb3JtIG9uU3VibWl0PSJqUXVlcnkoJyNjbGVhbnVwU2V0dGluZ3MtcmVzdG9yZURhdGEnKS52YWwoIHdpbmRvdy5idG9hKCBlbmNvZGVVUklDb21wb25lbnQoIEpTT04uc3RyaW5naWZ5KCB3aW5kb3cucmVzdG9yZURhdGEgKSApICkgKTsiIGFjdGlvbj0iP2FqYXg9NiIgdGFyZ2V0PSJtaW5pRnJhbWUiIG1ldGhvZD0icG9zdCI+PCEtLSB0aGlzIGZvcm0gaXMgb25seSBzdWJtaXR0ZWQgYWZ0ZXIgcnVubmluZyB0aHJvdWdoIGphdmFzY3JpcHQuIHN1Ym1pdHRpbmcgYWN0dWFsIGZvcm0gaW5zdGVhZCBvZiB1c2luZyBqUXVlcnkgcG9zdCBzbyB3ZSBjYW4gdGFyZ2V0IGlmcmFtZS4gLS0+Cgk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlRGF0YSIgaWQ9ImNsZWFudXBTZXR0aW5ncy1yZXN0b3JlRGF0YSIgdmFsdWU9IiI+CgoKCgk8ZGl2IGNsYXNzPSJtYWluX2JveF9mb290Ij4KCgkJPGgzPlNpdGUgU2VhcmNoIEVuZ2luZSBWaXNpYmlsaXR5PC9oMz4KCQk8ZGl2IHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHRleHQtYWxpZ246IGxlZnQ7Ij4KCQkJPGxhYmVsIGZvcj0ic2V0X2Jsb2dfcHVibGljLWtlZXAiIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InNldF9ibG9nX3B1YmxpYyIgaWQ9InNldF9ibG9nX3B1YmxpYy1rZWVwIiB2YWx1ZT0iIiBjaGVja2VkPSJjaGVja2VkIj5ObyBjaGFuZ2UgKGRlZmF1bHQpOiA8JT1zb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCU+PC9sYWJlbD48YnI+CgkJCTxsYWJlbCBmb3I9InNldF9ibG9nX3B1YmxpYy1wdWJsaWMiIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InNldF9ibG9nX3B1YmxpYyIgaWQ9InNldF9ibG9nX3B1YmxpYy1wdWJsaWMiIHZhbHVlPSIxIj5QdWJsaWMgLSBEbyBub3QgZGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZTwvbGFiZWw+PGJyPgoJCQk8bGFiZWwgZm9yPSJzZXRfYmxvZ19wdWJsaWMtcHJpdmF0ZSIgc3R5bGU9ImZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0ic2V0X2Jsb2dfcHVibGljIiBpZD0ic2V0X2Jsb2dfcHVibGljLXByaXZhdGUiIHZhbHVlPSIwIj5Qcml2YXRlIC0gRGlzY291cmFnZSBzZWFyY2ggZW5naW5lcyBmcm9tIGluZGV4aW5nIHRoaXMgc2l0ZTwvbGFiZWw+PGJyPgoJCTwvZGl2PgoKCQk8YnI+PGJyPgoKCQk8aDM+SW1wb3J0QnVkZHkgQ2xlYW51cDo8L2gzPgoJCTx0YWJsZSBzdHlsZT0ibWFyZ2luLWxlZnQ6IGF1dG87IG1hcmdpbi1yaWdodDogYXV0bzsgdGV4dC1hbGlnbjogbGVmdDsiPjx0cj48dGQ+CgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV9iYWNrdXAiIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfYmFja3VwIiBpZD0iZGVsZXRlX2JhY2t1cCIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSBiYWNrdXAgemlwIGFyY2hpdmU8L2xhYmVsPgoJCQk8YnI+CgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV90ZW1wIiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX3RlbXAiIGlkPSJkZWxldGVfdGVtcCIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSB0ZW1wb3JhcnkgaW1wb3J0IGZpbGVzPC9sYWJlbD4KCQk8L3RkPjx0ZD4KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIEltcG9ydEJ1ZGR5IHRvb2wgZmlsZXM8L2xhYmVsPgoJCQk8YnI+CgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV9pbXBvcnRidWRkeV9kaXJlY3RvcnkiIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfaW1wb3J0YnVkZHlfZGlyZWN0b3J5IiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5X2RpcmVjdG9yeSIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSBJbXBvcnRCdWRkeSBkaXJlY3Rvcnk8L2xhYmVsPgoJCQk8YnI+CgkJCTxsYWJlbCBmb3I9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgaWQ9ImRlbGV0ZV9pbXBvcnRidWRkeWxvZyIgdmFsdWU9IjEiIGNoZWNrZWQ+IERlbGV0ZSBpbXBvcnRidWRkeS50eHQgbG9nIGZpbGU8L2xhYmVsPgoJCTwvdGQ+PC90cj48L3RhYmxlPgoKCQk8YnI+CgkJPGNlbnRlcj4KCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ibmV4dFN0ZXAiIHZhbHVlPSJGaW5pc2ggQ2xlYW51cCIgY2xhc3M9Iml0LWJ1dHRvbiBwYl9kYXRhYmFzZV9uZXh0X3Rlc3QiPgoJCTwvY2VudGVyPgoKCTwvZGl2Pgo8L2Zvcm0+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
PG9iamVjdCBjbGFzc2lkPSJjbHNpZDpkMjdjZGI2ZS1hZTZkLTExY2YtOTZiOC00NDQ1NTM1NDAwMDAiIGNvZGViYXNlPSJodHRwOi8vZnBkb3dubG9hZC5tYWNyb21lZGlhLmNvbS9wdWIvc2hvY2t3YXZlL2NhYnMvZmxhc2gvc3dmbGFzaC5jYWIjdmVyc2lvbj03LDAsMCwwIiBpZD0iQ2FwdGl2YXRlMSI+Cgk8cGFyYW0gbmFtZT0ibW92aWUiIHZhbHVlPSJodHRwOi8vd3d3LmNwYW5lbC5uZXQvbWVkaWEvdHV0b3JpYWxzL215c3Fsd2l6YXJkLnN3ZiI+Cgk8cGFyYW0gbmFtZT0icXVhbGl0eSIgdmFsdWU9ImhpZ2giPjxwYXJhbSBuYW1lPSJsb29wIiB2YWx1ZT0iMCI+Cgk8ZW1iZWQgc3JjPSJodHRwOi8vd3d3LmNwYW5lbC5uZXQvbWVkaWEvdHV0b3JpYWxzL215c3Fsd2l6YXJkLnN3ZiIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNTAwIiBsb29wPSIwIiBxdWFsaXR5PSJsb3ciIHBsdWdpbnNwYWdlPSJodHRwOi8vd3d3Lm1hY3JvbWVkaWEuY29tL2dvL2dldGZsYXNocGxheWVyIiB0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCIgbWVudT0iZmFsc2UiPgo8L29iamVjdD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokcGFnZV90aXRsZSA9ICdEYXRhYmFzZSBUZXh0IFJlcGxhY2UgVG9vbCc7CnJlcXVpcmVfb25jZSggJ19oZWFkZXIucGhwJyApOwo/PgoKPGRpdiBjbGFzcz0id3JhcCI+Cjw/cGhwCiRjb25maWdGaWxlID0gJyc7CmlmICggISBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICd3cC1jb25maWcucGhwJyApICkgeyAvLyBOb3JtYWwgY29uZmlnIGZpbGUgbm90IGZvdW5kIHNvIHdhcm4gb3Igc2VlIGlmIHBhcmVudCBjb25maWcgbWF5IGV4aXN0LgoJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnJzsKCSRwYXJlbnRDb25maWcgPSAgZGlybmFtZSggQUJTUEFUSCApIC4gJy93cC1jb25maWcucGhwJzsKCWlmICggQGZpbGVfZXhpc3RzKCAkcGFyZW50Q29uZmlnICkgKSB7IC8vIFBhcmVudCBjb25maWcgZXhpc3RzIHNvIG9mZmVyIGl0IGFzIGFuIG9wdGlvbiBvciBwb3NzaWJseSB1c2UgaXQgaWYgdXNlciBoYXMgc2VsZWN0ZWQgdG8gZG8gc28uCgkJaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhcmVudF9jb25maWcnICkgPT0gJ3RydWUnICkgeyAvLyBVc2VyIG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnLgoJCQkkY29uZmlnRmlsZSA9ICRwYXJlbnRDb25maWc7CgkJfSBlbHNlIHsgLy8gVXNlciBoYXMgbm90IG9wdGVkIHRvIHVzZSBwYXJlbnQgY29uZmlnIHlldCBzbyBzZXQgbWVzc2FnZSB0byBvZmZlciBpdC4KCQkJJHBhcmVudENvbmZpZ01lc3NhZ2UgPSAnPGJyPjxicj48Yj5Ib3dldmVyPC9iPiwgYSB3cC1jb25maWcucGhwIGZpbGUgd2FzIGZvdW5kIGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5IGFzIGAnIC4gJHBhcmVudENvbmZpZyAuICdgLiA8YSBocmVmPSI/cGFnZT1kYnJlcGxhY2UmcGFyZW50X2NvbmZpZz10cnVlIj48Yj5DbGljayBoZXJlPC9iPjwvYT4gaWYgeW91IHdvdWxkIGxpa2UgdG8gcnVuIHRoaXMgdG9vbCB1c2luZyB0aGlzIHdwLWNvbmZpZy5waHAgZmlsZSBpbiB0aGUgcGFyZW50IGRpcmVjdG9yeS4nOwoJCX0KCX0KCWlmICggJycgPT0gJGNvbmZpZ0ZpbGUgKSB7CgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnPGI+RXJyb3I6PC9iPiBUaGlzIHRvb2wgcmVxdWlyZXMgYW4gZXhpc3RpbmcgV29yZFByZXNzIGluc3RhbGxhdGlvbiB0byBwZXJmb3JtIGRhdGFiYXNlIHJlcGxhY2VtZW50cyBvbi4gTm8gV29yZFByZXNzIHdwLWNvbmZpZy5waHAgY29uZmlndXJhdGlvbiBmaWxlIHdhcyBmb3VuZCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgaW1wb3J0YnVkZHkucGhwLiAnIC4gJHBhcmVudENvbmZpZ01lc3NhZ2UgLiAnIDxicj48YnI+IDxiPk5vdGU6PC9iPiBJbXBvcnRCdWRkeSBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgbWlncmF0aW5nICYgcmVwbGFjaW5nIHlvdXIgc2l0ZSBVUkxzIGFuZCBmaWxlIHBhdGhzIGR1cmluZyByZXN0b3JlL21pZ3JhdGlvbjsgdGhpcyB0b29sIGlzIG5vdCBuZWVkZWQgZm9yIG5vcm1hbCBiYWNrdXAgLyByZXN0b3JlIG9wZXJhdGlvbnMuJywgdHJ1ZSApOwoJfQp9IGVsc2UgeyAvLyBVc2Ugbm9ybWFsIGNvbmZpZyBmaWxlLgoJJGNvbmZpZ0ZpbGUgPSBBQlNQQVRIIC4gJ3dwLWNvbmZpZy5waHAnOwp9CgppZiAoICcnICE9ICRjb25maWdGaWxlICkgewoJCgkvLyBSZWFkIGluIHdwLWNvbmZpZy5waHAgZmlsZSBjb250ZW50cy4KCSRjb25maWdDb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkY29uZmlnRmlsZSApOwoJaWYgKCBmYWxzZSA9PT0gJGNvbmZpZ0NvbnRlbnRzICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yOiBVbmFibGUgdG8gcmVhZCB3cC1jb25maWcucGhwIGNvbmZpZ3VyYXRpb24gZmlsZS4nICk7CgkJcmV0dXJuOwoJfQoJCgkvLyBHcmFiIGRhdGFiYXNlIHNldHRpbmdzIGZyb20gd3AtY29uZmlnLnBocCBjb250ZW50cy4KCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX05BTUUoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyduYW1lJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX1VTRVIoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWyd1c2VybmFtZSddID0gJG1hdGNoZXNbNF07CglwcmVnX21hdGNoKCAnL2RlZmluZVwoW1xzXSooXCd8IilEQl9QQVNTV09SRChcJ3wiKSxbXHNdKihcJ3wiKSguKikoXCd8IilbXHNdKlwpOy9pJywgJGNvbmZpZ0NvbnRlbnRzLCAkbWF0Y2hlcyApOwoJJGRhdGFiYXNlU2V0dGluZ3NbJ3Bhc3N3b3JkJ10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX0hPU1QoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsKCSRkYXRhYmFzZVNldHRpbmdzWydob3N0J10gPSAkbWF0Y2hlc1s0XTsKCXByZWdfbWF0Y2goICcvXCR0YWJsZV9wcmVmaXhbXHNdKj1bXHNdKihcJ3wiKSguKikoXCd8Iik7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7CgkkZGF0YWJhc2VTZXR0aW5nc1sncHJlZml4J10gPSAkbWF0Y2hlc1syXTsKCQoJLy9wcmludF9yKCAkZGF0YWJhc2VTZXR0aW5ncyApOwoJCgkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJZ2xvYmFsICR3cGRiOwoJJHdwZGIgPSBuZXcgd3BkYiggJGRhdGFiYXNlU2V0dGluZ3NbJ3VzZXJuYW1lJ10sICRkYXRhYmFzZVNldHRpbmdzWydwYXNzd29yZCddLCAkZGF0YWJhc2VTZXR0aW5nc1snbmFtZSddLCAkZGF0YWJhc2VTZXR0aW5nc1snaG9zdCddICk7CglpZiAoIGZhbHNlID09PSAkd3BkYi0+ZGJoICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yICM4NTgzODM6IFVuYWJsZSB0byBjb25uZWN0IHRvIGRhdGFiYXNlIHVzaW5nIHNldHRpbmdzIGluIHdwLWNvbmZpZy5waHAuIFZlcmlmeSBjb25uZWN0aW9uIHNldHRpbmdzLicgKTsKCX0gZWxzZSB7CgkJcmVxdWlyZV9vbmNlKCAnX2RicmVwbGFjZS5waHAnICk7Cgl9Cn0KPz4KPC9kaXY+Cgo8P3BocApyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
VGhpcyBzdGVwIGhhbmRsZXMgZGVsZXRpbmcgZmlsZXMuIEluIHJhcmUgaW5zdGFuY2VzIG9uIHNvbWUgc2VydmVycyB5b3UgbWF5IHJlY2VpdmUgZXJyb3JzIGxvYWRpbmcgZmlsZXMgb3IgYW4gdW5zdHlsZWQgcGFnZSBoZXJlIGR1ZSB0byBmaWxlcyBnZXR0aW5nIGRlbGV0aW5nIHByZW1hdHVyZWx5IGJlZm9yZSB0aGUgcGFnZSBjb21wbGV0ZXMgbG9hZGluZy4gVGhpcyBtYXkgc2FmZWx5IGJlIGlnbm9yZWQuIEl0IGlzIGNvbW1vbiB0byBub3QgYmUgYWJsZSB0byBkZWxldGUgc29tZSBmaWxlcyBkdWUgdG8gcGVybWlzc2lvbiBlcnJvcnMuIFlvdSBtYXkgbWFudWFsbHkgZGVsZXRlIHRoZW0uIDxiPmltcG9ydGJ1ZGR5LnBocDwvYj4gc2hvdWxkIGFsd2F5cyBiZSBkZWxldGVkIGFmdGVyIHJlc3RvcmUgZm9yIGJlc3Qgc2VjdXJpdHkuCgo8aDMgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPllvdXIgc2l0ZSBpcyByZWFkeSB0byBnbyBhdAo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48Yj48JT1ob21ldXJsJT48L2I+PC9hPjxicj48YnI+ClRoYW5rIHlvdSBmb3IgY2hvb3NpbmcgQmFja3VwQnVkZHkhPC9oMz4KCgo8L2Rpdj48L2Rpdj48YnI+PGJyPjxicj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
PGgxIGNsYXNzPSJhbmltYXRlZCBmYWRlSW5Eb3duIj5SZXN0b3JlIEZpbmlzaGVkLjwvaDE+Cgo8aDM+WW91ciBzaXRlIHNob3VsZCBiZSByZWFkeSB0byBnbyBhdDo8YnI+PGJyPjxhIGhyZWY9IjwlPWhvbWV1cmwlPiIgdGFyZ2V0PSJfYmxhbmsiPjwlPWhvbWV1cmwlPjwvYT48L2gzPjxicj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
PGNlbnRlcj4KCTxoMz5SZXN0b3JpbmcgRGF0YWJhc2UgLi4uPC9oMz4KCTxoNCBpZD0iaW1wb3J0aW5nRGF0YWJhc2UtcHJvZ3Jlc3NNZXNzYWdlIj48L2g0Pgo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
PHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgKTs8L3NjcmlwdD4KPD9waHAKCgppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgewoJZ2xvYmFsICRwYl9sb2dpbl9hdHRlbXB0czsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ludmFsaWQgcGFzc3dvcmQuIFBsZWFzZSBlbnRlciB0aGUgcGFzc3dvcmQgeW91IHByb3ZpZGVkIHdpdGhpbiBCYWNrdXBCdWRkeSBTZXR0aW5ncy4gQXR0ZW1wdCAjJyAuICRwYl9sb2dpbl9hdHRlbXB0cyAuICcuJyApOwoJZWNobyAnPGJyPic7Cn0KPz4KCjxwPkVudGVyIHlvdXIgSW1wb3J0QnVkZHkgcGFzc3dvcmQgYmVsb3cgdG8gYmVnaW4uPC9wPgoKPGZvcm0gbWV0aG9kPSJwb3N0Ij4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9ImxvZ2luIj4KCTxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHN0eWxlPSJ3aWR0aDogMjUwcHg7Ij4KCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkF1dGhlbnRpY2F0ZSIgY2xhc3M9Iml0LWJ1dHRvbiI+CjwvZm9ybT4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
PGNlbnRlcj4KCTxoMz5NaWdyYXRpbmcgRGF0YWJhc2UgLi4uPC9oMz4KCTxoNCBpZD0ibWlncmF0aW5nRGF0YWJhc2UtcHJvZ3Jlc3NNZXNzYWdlIj48L2g0Pgo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
PGNlbnRlcj4KCTxoMz5QbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGZpbGVzIGFyZSByZXN0b3JlZCAuLi48L2gzPgoJPGg0IGlkPSJ1bnppcHBpbmdGaWxlcy1wcm9ncmVzc01lc3NhZ2UiPlJlc3RvcmluZyBGaWxlczwvaDQ+CjwvY2VudGVyPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm
CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImltcG9ydGJ1ZGR5L2pzL2pxdWVyeS5sZWFuTW9kYWwubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQlqUXVlcnkoJy5sZWFuTW9kYWwnKS5sZWFuTW9kYWwoCgkJCQl7IHRvcCA6IDQ1LCBvdmVybGF5IDogMC40LCBjbG9zZUJ1dHRvbjogIi5tb2RhbF9jbG9zZSIgfQoJCSk7Cgl9KTsKPC9zY3JpcHQ+CgoKCjxmb3JtIG9uU3VibWl0PSJqUXVlcnkoJyN1cmxSZXBsYWNlLXJlc3RvcmVEYXRhJykudmFsKCB3aW5kb3cuYnRvYSggZW5jb2RlVVJJQ29tcG9uZW50KCBKU09OLnN0cmluZ2lmeSggd2luZG93LnJlc3RvcmVEYXRhICkgKSApICk7IiBhY3Rpb249Ij9hamF4PTUiIHRhcmdldD0ibWluaUZyYW1lIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJkYl9zZXR0aW5nIj48IS0tIHRoaXMgZm9ybSBpcyBvbmx5IHN1Ym1pdHRlZCBhZnRlciBydW5uaW5nIHRocm91Z2ggamF2YXNjcmlwdC4gc3VibWl0dGluZyBhY3R1YWwgZm9ybSBpbnN0ZWFkIG9mIHVzaW5nIGpRdWVyeSBwb3N0IHNvIHdlIGNhbiB0YXJnZXQgaWZyYW1lLiAtLT4KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmVEYXRhIiBpZD0idXJsUmVwbGFjZS1yZXN0b3JlRGF0YSIgdmFsdWU9IiI+PCEtLSB0aGlzIGlzIHRoZSBvbmx5IHRoaW5nIHRoYXQgd2lsbCBuZWVkIHBhcnNlZCBieSBQSFAgb24gdGhlIHJlY2VpdmluZyBlbmQuIHBvcHVsYXRlZCBvbiBzdWJtaXQgYWZ0ZXIgZGIgdGVzdCBwYXNzZXMuIC0tPgoKCgoKCgoKCgk8dGFibGUgY2xhc3M9InNldHRpbmdzVGFibGUiPgoJCTx0cj48dGggc3R5bGU9IndpZHRoOiAzMCU7Ij4mbmJzcDs8L3RoPjx0aCBzdHlsZT0id2lkdGg6IDMwJTsiPk9sZCBVUkw8L3RoPjx0aCBzdHlsZT0id2lkdGg6IDEwJTsiPiZuYnNwOzwvdGg+PHRoIHN0eWxlPSJ3aWR0aDogMzAlOyI+TmV3IFVSTDwvdGg+PC90cj4KCQoJCgkKCQk8dHI+PCEtLSBXT1JEUFJFU1MgQUREUkVTUyAoQUxMIFNJVEUgVFlQRVMpIC0tPgoJCQk8dGQ+CgkJCQlXb3JkUHJlc3MgQWRkcmVzcyA8c3BhbiBjbGFzcz0ibGlnaHQiPihTaXRlIFVSTCk8L3NwYW4+IDxhIGNsYXNzPSJwbHVnaW5idWRkeV90aXAiIHRpdGxlPSJUaGlzIGlzIHRoZSBhZGRyZXNzIHdoZXJlIHlvdSB3YW50IHRoZSBmaW5hbCBXb3JkUHJlc3Mgc2l0ZSB5b3UgYXJlIHJlc3RvcmluZyAvIG1pZ3JhdGluZyB0byByZXNpZGUuIEV4OiBodHRwOi8vZm9vLmNvbS93cCI+PGltZyBzcmM9ImltcG9ydGJ1ZGR5L3BsdWdpbmJ1ZGR5L2ltYWdlcy9wbHVnaW5idWRkeV90aXAucG5nIiBhbHQ9Iig/KSI+PC9hPgoJCQk8L3RkPgoJCQk8dGQ+CgkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9Im9sZF9zZXR0aW5nIiB2YWx1ZT0iPCU9IGRhdC5zaXRldXJsICU+IiBESVNBQkxFRD4KCQkJPC90ZD4KCQkJPHRkIGNsYXNzPSJzZXR0aW5nQ29weSI+CgkJCQk8YSBocmVmPSIjIj4mcmFycjs8L2E+CgkJCTwvdGQ+CgkJCTx0ZD4KCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiB2YWx1ZT0iPCU9IGRlZmF1bHRVUkwgJT4iIG5hbWU9InNpdGV1cmwiPgoJCQk8L3RkPgoJCTwvdHI+CgkJPGJyIC8+PGJyIC8+CgkJPCUgaWYgKCBkYXQuaXNfbXVsdGlzaXRlID09PSB0cnVlICkgeyAvLyBtdWx0aXNpdGUgJT4KCQk8dHI+PCEtLSBNVUxUSVNJVEUgRE9NQUlOIC0tPgoJCQk8dGQgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3A7Ij4KCQkJCU11bHRpc2l0ZSBEb21haW4gPCU9IHRpcCggJ1RoaXMgaXMgdGhlIE11bHRpU2l0ZSBtYWluIGRvbWFpbi4gRXg6IGZvby5jb20uIFdBUk5JTkc6IENoYW5naW5nIHRoaXMgbWF5IHJlc3VsdCBpbiBVUkwgcHJvYmxlbXMuIFVzZSBjYXV0aW9uLicgKSAlPgoJCQkJPGJyPgoJCQkJPHNwYW4gY2xhc3M9ImxpZ2h0Ij4oSG9tZSBVUkwpPC9zcGFuPgoJCQk8L3RkPgoJCQk8dGQgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3A7Ij4KCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0ib2xkX3NldHRpbmciIHZhbHVlPSI8JT0gZGF0LmRvbWFpbiAlPiIgRElTQUJMRUQ+CgkJCTwvdGQ+CgkJCTx0ZCBjbGFzcz0ic2V0dGluZ0NvcHkiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogdG9wOyI+CgkJCQk8YSBocmVmPSIjIj4mcmFycjs8L2E+CgkJCTwvdGQ+CgkJCTx0ZCBzdHlsZT0idmVydGljYWwtYWxpZ246IHRvcDsiPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIHZhbHVlPSI8JT0gZGVmYXVsdERvbWFpbiAlPiIgbmFtZT0iaG9tZXVybCI+CgkJCQk8YnI+Tm90ZTogVGhpcyBVUkwgYWJvdmUgd2lsbCBhbHNvIGJlIHRoZSBuZXcgTXVsdGlzaXRlIE5ldHdvcmsgVVJMLgoJCQk8L3RkPgoJCTwvdHI+CgkKCQk8JSB9IGVsc2UgeyAlPgoJCQoJCTx0cj48IS0tIENVU1RPTSBIT01FIFVSTCAtLT4KCQkJPHRkPgoJCQkJPGxhYmVsIHN0eWxlPSJ3aWR0aDogMTAwJTsiIGZvcj0iY2hlY2tfY3VzdG9tX2hvbWUiPgoJCQkJCUN1c3RvbSBTaXRlIEFkZHJlc3MgPHNwYW4gY2xhc3M9ImxpZ2h0Ij4oSG9tZSBVUkwpPC9zcGFuPiA8JT0gdGlwKCAnT1BUSU9OQUwuIFRoaXMgaXMgYWxzbyBrbm93biBhcyB0aGUgc2l0ZSBhZGRyZXNzLiBUaGlzIGlzIHRoZSBob21lIGFkZHJlc3Mgd2hlcmUgeW91ciBtYWluIHNpdGUgcmVzaWRlcy4gVGhpcyBtYXkgZGlmZmVyIGZyb20geW91ciBXb3JkUHJlc3MgVVJMLiBGb3IgZXhhbXBsZTogaHR0cDovL2Zvby5jb20nICkgJT4KCQkJCTwvbGFiZWw+CgkJCTwvdGQ+CgkJCTx0ZD4KCQkJCTxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iY3VzdG9tSG9tZUVuYWJsZWQiIHZhbHVlPSJvbiIgb25DbGljaz0ialF1ZXJ5KCcjY3VzdG9tX2hvbWUnKS50b2dnbGUoKTsiIHN0eWxlPSJ3aWR0aDogYXV0bzsiPiA8c3BhbiBjbGFzcz0ibGlnaHQiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTNweDsiPk9wdGlvbmFsLiBEaXNhYmxlZCBieSBkZWZhdWx0Ljwvc3Bhbj4KCQkJPC90ZD4KCQkJPHRkIGNvbHNwYW49IjIiPiZuYnNwOzwvdGQ+CgkJPC90cj4KCQk8dHIgaWQ9ImN1c3RvbV9ob21lIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjwhLS0gU0lURSBBRERSRVNTIChTVEFOREFMT05FIE9OTFkpIC0tPgoJCQk8dGQ+CgkJCQkmbmJzcDsKCQkJPC90ZD4KCQkJPHRkPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJvbGRfc2V0dGluZyIgdmFsdWU9IjwlPSBkYXQuaG9tZXVybCAlPiIgRElTQUJMRUQ+CgkJCTwvdGQ+CgkJCTx0ZCBjbGFzcz0ic2V0dGluZ0NvcHkiPgoJCQkJPGEgaHJlZj0iIyIgdGl0bGU9IkNsaWNrIHRvIGNvcHkgb2xkIHNldHRpbmcgb3Zlci4iPiZyYXJyOzwvYT4KCQkJPC90ZD4KCQkJPHRkPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIHZhbHVlPSI8JT0gZGVmYXVsdFVSTCAlPiIgbmFtZT0iaG9tZXVybCI+CgkJCTwvdGQ+CgkJPC90cj4KCQoJCTwlIH0gLy8gZW5kIG5vbi1tdWx0aXNpdGUgJT4KCQoJCgk8L3RhYmxlPgoJPGJyPjxicj48YnI+CgkKCQoJCgkKCTxkaXYgY2xhc3M9Im1haW5fYm94X2Zvb3QiPgoJCTxicj4KCQk8Y2VudGVyPgoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJuZXh0U3RlcCIgdmFsdWU9Ik5leHQgU3RlcCIgY2xhc3M9Iml0LWJ1dHRvbiI+CgkJCTxidXR0b24gaHJlZj0iI3BiX2FkdmFuY2VkX21vZGFsIiBjbGFzcz0iaXQtYnV0dG9uIGl0LXNlY29uZGFyeSBsZWFuTW9kYWwiPkFkdmFuY2VkIE9wdGlvbnM8L2J1dHRvbj4KCQk8L2NlbnRlcj4KCgk8L2Rpdj4KCQoJCgkKCTxkaXYgaWQ9InBiX2FkdmFuY2VkX21vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCTxkaXYgY2xhc3M9Im1vZGFsIj4KCQkJPGRpdiBjbGFzcz0ibW9kYWxfaGVhZGVyIj4KCQkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4KCQkJCTxoMj5BZHZhbmNlZCBPcHRpb25zPC9oMj4KCQkJCUV4ZXJjaXNlIGNhdXRpb24gdXNpbmcgYWR2YW5jZWQgb3B0aW9ucy4gQWRkaXRpb25hbCBvcHRpb25zIGF2YWlsYWJsZSBvbiBzdWJzZXF1ZW50IHN0ZXBzLgoJCQk8L2Rpdj4KCQkJPGRpdiBjbGFzcz0ibW9kYWxfY29udGVudCI+CgkJCQkKCQkJCTxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IjEiIG5hbWU9Im1pZ3JhdGVEYXRhYmFzZSIKCQkJCQkgICBvbmNsaWNrPSIKCQkJCQlpZiAoIGpRdWVyeSh0aGlzKS5pcyggJzpjaGVja2VkJyApICkgeyAvLyBPbiBjaGVja2luZyB0aGlzIGJveCwgd2UgbmVlZCB0byBoaWRlIG9wdGlvbnM7IHVuY2hlY2tpbmcgc2hvdyBvcHRpb25zLgoJCQkJCQkJalF1ZXJ5KCAnI2RhdGFiYXNlX21pZ3JhdGVfb3B0aW9ucycgKS5zbGlkZURvd24oKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWpRdWVyeSggJyNkYXRhYmFzZV9taWdyYXRlX29wdGlvbnMnICkuc2xpZGVVcCgpOwoJCQkJCQl9CgkJCQkJCWpRdWVyeSggJyNkYXRhYmFzZV9taWdyYXRlX29wdGlvbnMgPiBpbnB1dCcgKS5yZW1vdmVBdHRyKCdjaGVja2VkJyk7IC8vIFVuY2hlY2sgYWxsIG9wdGlvbnMgd2l0aGluLgoJCQkJCSIgQ0hFQ0tFRD4gTWlncmF0ZSBVUkxzL3BhdGhzIGluIGRhdGFiYXNlIGZyb20gb2xkIGxvY2F0aW9uIHRvIG5ldy4gPGJyPgoJCQkJPGRpdiBpZD0iZGF0YWJhc2VfbWlncmF0ZV9vcHRpb25zIj4KCQkJCQk8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIxIiBuYW1lPSJtaWdyYXRlRGF0YWJhc2VCcnV0ZUZvcmNlIiBDSEVDS0VEPiBNaWdyYXRlIFVSTFMvcGF0aHMgaW4gZGF0YWJhc2UgaW4gYWxsIGxvY2F0aW9ucyB1c2luZyBicnV0ZSBmb3JjZS4gPCU9IHRpcCggJ0J5IGRlZmF1bHQgQmFja3VwQnVkZHkgd2lsbCBleHRlbnNpdmVseSBleGFtaW5lIGFuZCBtaWdyYXRlIHVua25vd24gZGF0YWJhc2UgdGFibGVzLiAgU29tZXRpbWVzIGhvd2V2ZXIgdGhpcyBjYW4gY2F1c2UgdGltZW91dHMgb24gbGFyZ2VyIHNpdGVzLiAgWW91IG1heSBza2lwIHRoaXMgaW50ZW5zaXZlIHByb2NlZHVyZSB0byByZWR1Y2UgcmVxdWlyZWQgcnVudGltZSBmb3IgZGF0YWJhc2UgbWlncmF0aW9uIHN0ZXBzLiBOb3RlIHRoYXQgc29tZSBVUkxzIG9yIHBhdGhzIG1heSBub3QgYmUgdXBkYXRlZCBpZiBza2lwcGluZyB0aGlzIHN0ZXAuICBBbGwgbWFqb3IgV29yZFByZXNzIFVSTHMgYW5kIHBhdGhzIHdpbGwgc3RpbGwgYmUgdXBkYXRlZCBob3dldmVyLicgKSAlPjxicj4KCQkJCQlNYXhpbXVtIHRpbWUgcGVyIGNodW5rIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBkYXRhYmFzZTogPGlucHV0IHR5cGU9InRleHQiIG5hbWU9Im1heF9leGVjdXRpb25fdGltZSIgaWQ9Im1heF9leGVjdXRpb25fdGltZSIgdmFsdWU9IjwlPSBtYXhFeGVjdXRpb25UaW1lICU+IiBzaXplPSI1Ij4gc2Vjb25kcy4gPCU9IHRpcCggJ1RoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIEltcG9ydEJ1ZGR5IHNob3VsZCBhbGxvdyBhIGRhdGFiYXNlIGltcG9ydCBjaHVuayB0byBydW4uIEltcG9ydEJ1ZGR5IGJ5IGRlZmF1bHQgbGltaXRzIGVhY2ggY2h1bmsgdG8geW91ciBNYXhpbXVtIFBIUCBydW50aW1lLiBJZiB5b3VyIGRhdGFiYXNlIGltcG9ydCBzdGVwIGlzIHRpbWluZyBvdXQgdGhlbiBsb3dlcmluZyB0aGlzIHZhbHVlIHdpbGwgaW5zdHJ1Y3QgdGhlIHNjcmlwdCB0byBsaW1pdCBlYWNoIGBjaHVua2AgdG8gYWxsb3cgaXQgdG8gZmluaXNoIHdpdGhpbiB0aGlzIHRpbWUgcGVyaW9kLiBSYWlzaW5nIHRoaXMgdmFsdWUgYWJvdmUgeW91ciBzZXJ2ZXJzIGxpbWl0cyB3aWxsIG5vdCBpbmNyZWFzZSBvciBvdmVycmlkZSBzZXJ2ZXIgc2V0dGluZ3MuJyApICU+CgkJCQk8L2Rpdj4KCQkJCTxicj4KCQkJCQoJCQk8L2Rpdj4KCQk8L2Rpdj4KCTwvZGl2PgoJCgkKPC9mb3JtPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdfaWZyYW1lX2hlYWRlcicpOwpwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7CmVjaG8gIjxzY3JpcHQ+cGFnZVRpdGxlKCAnU3RlcCA1OiBNaWdyYXRpbmcgRGF0YWJhc2UnICk7PC9zY3JpcHQ+IjsKcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnTG9hZGluZyBzdGVwIDUuJyApOwplY2hvICI8c2NyaXB0PmJiX3Nob3dTdGVwKCAnbWlncmF0aW5nRGF0YWJhc2UnICk7PC9zY3JpcHQ+IjsKcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoKLy8gRmluYWwgZnVuY3Rpb25zIHRvIHJ1biBhZnRlciBEQiBtaWdyYXRpb24gaXMgZG9uZS4gSW4gZnVuY3Rpb24gc2luY2UgdGhpcyBpcyBjYWxsZWQgYm90aCBpbiBzdGFuZGFyZCBhbmQgYXQgZW5kIG9mIGRlcGxveW1lbnQuCmZ1bmN0aW9uIGZpbmFsQWN0aW9ucyggJHJlc3RvcmUgKSB7CgkKCS8vIE1pZ3JhdGUgaHRhY2Nlc3MuCglpZiAoIFRSVUUgIT09ICRyZXN0b3JlLT5fc3RhdGVbJ21pZ3JhdGVIdGFjY2VzcyddICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwaW5nIG1pZ3JhdGlvbiBvZiAuaHRhY2Nlc3MgZmlsZSBiYXNlZCBvbiBzZXR0aW5ncy4nICk7Cgl9IGVsc2UgewoJCSRyZXN0b3JlLT5taWdyYXRlSHRhY2Nlc3MoKTsKCX0KCgkvLyBSZW5hbWUgLmh0YWNjZXNzLmJiX3RlbXAgYmFjayB0byAuaHRhY2Nlc3MuCgkkcmVzdG9yZS0+cmVuYW1lSHRhY2Nlc3NUZW1wQmFjaygpOwoJCgkvLyBSZW1vdmUgYW55IHRlbXBvcmFyeSAubWFpbnRlbmFuY2UgZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5LgoJJHJlc3RvcmUtPm1haW50ZW5hbmNlT2ZmKCAkb25seU91ckNyZWF0ZWRGaWxlID0gdHJ1ZSApOwoJCgkvLyBSZW1vdmUgYW55IHRlbXBvcmFyeSBpbmRleC5odG0gZmlsZSBjcmVhdGVkIGJ5IEltcG9ydEJ1ZGR5LgoJJHJlc3RvcmUtPnNjcnViSW5kZXhGaWxlcygpOwoJCgkkcmVzdG9yZS0+X3N0YXRlWydibG9nUHVibGljU3RhdHVzJ10gPSAkcmVzdG9yZS0+Z2V0QmxvZ1B1YmxpY1NldHRpbmcoKTsKCQoJLy8gVE9ETzogTWFrZSB0aGVzZSB0aG5pbmdzIGJlIGFibGUgdG8gb3V0cHV0IHN0dWZmIGludG8gdGhlIGNsZWFudXBTZXR0aW5ncy5odG0gdGVtcGxhdGUuIEFkZCBmdW5jdGlvbnM/CgkvLyBVcGRhdGUgd3Bjb25maWcgaWYgbmVlZGVkLgoJJHdwY29uZmlnX3Jlc3VsdCA9ICRyZXN0b3JlLT5taWdyYXRlV3BDb25maWcoKTsKCWlmICggJHdwY29uZmlnX3Jlc3VsdCAhPT0gdHJ1ZSApIHsKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICdFcnJvcjogVW5hYmxlIHRvIHVwZGF0ZSB3cC1jb25maWcucGhwIGZpbGUuIFZlcmlmeSB3cml0ZSBwZXJtaXNzaW9ucyBmb3IgdGhlIHdwLWNvbmZpZy5waHAgZmlsZSB0aGVuIHJlZnJlc2ggdGhpcyBwYWdlLiBZb3UgbWF5IG1hbnVhbGx5IHVwZGF0ZSB5b3VyIHdwLWNvbmZpZy5waHAgZmlsZSBieSBjaGFuZ2luZyBpdCB0byB0aGUgZm9sbG93aW5nOjx0ZXh0YXJlYSByZWFkb25seT0icmVhZG9ubHkiIHN0eWxlPSJ3aWR0aDogODAlOyI+JyAuICR3cGNvbmZpZ19yZXN1bHQgLiAnPC90ZXh0YXJlYT4nICk7Cgl9CgkKCS8vIFNjYW4gZm9yICd0cm91YmxlJyBzdWNoIGFzIGEgcmVtYWluaW5nIC5tYWludGVuYW5jZSBmaWxlLCBpbmRleC5odG0sIGluZGV4Lmh0bWwsIG1pc3Npbmcgd3AtY29uZmlnLnBocCwgbWlzc2luZyAuaHRhY2Nlc3MsIGV0YyBldGMuCgkkcHJvYmxlbXMgPSAkcmVzdG9yZS0+dHJvdWJsZVNjYW4oKTsKCWlmICggY291bnQoICRwcm9ibGVtcyApID4gMCApIHsKCQkkcmVzdG9yZS0+X3N0YXRlWydwb3RlbnRpYWxQcm9ibGVtcyddID0gJHByb2JsZW1zOwoJCSR0cm91YmxlX3RleHQgPSAnJzsKCQlmb3JlYWNoKCAkcHJvYmxlbXMgYXMgJHByb2JsZW0gKSB7CgkJCSR0cm91YmxlX3RleHQgLj0gJzxsaT4nIC4gJHByb2JsZW0gLiAnPC9saT4nOwoJCX0KCQkkdHJvdWJsZV90ZXh0ID0gJzx1bD4nIC4gJHRyb3VibGVfdGV4dCAuICc8L3VsPic7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ3dhcm5pbmcnLCAnT25lIG9yIG1vcmUgcG90ZW50aWFsIGlzc3VlcyBkZXRlY3RlZCB0aGF0IG1heSByZXF1aXJlIHlvdXIgYXR0ZW50aW9uOiAnIC4gJHRyb3VibGVfdGV4dCApOwoJfQoJCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBmaW5hbCBhY3Rpb25zIGZ1bmN0aW9uLicgKTsKCglpdF9idWJfaW1wb3J0YnVkZHlfZG9fYWN0aW9uKCAnZmluaXNoZWRfZmluYWxfYWN0aW9ucycgKTsKCQp9IC8vIEVuZCBmaW5hbEFjdGlvbnMoKS4KCgppZiAoICd0cnVlJyAhPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsgLy8gZGVwbG95bWVudCBtb2RlIHByZS1sb2FkcyBzdGF0ZSBkYXRhIGluIGEgZmlsZSBpbnN0ZWFkIG9mIHBhc3NpbmcgdmlhIHBvc3QuCgkvLyBQYXJzZSBzdWJtaXR0ZWQgcmVzdG9yZURhdGEgcmVzdG9yZSBzdGF0ZSBmcm9tIHByZXZpb3VzIHN0ZXAuCgkkcmVzdG9yZURhdGEgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKTsKCQoJCgkvLyBEZWNvZGUgc3VibWl0dGVkIGRhdGEsIHJlcG9ydGluZyBkZXRhaWxzIG9uIGZhaWx1cmUuCgkkZGVjb2RlRmFpbFJlYXNvbiA9ICcnOwoJaWYgKCBmYWxzZSA9PT0gKCAkcmVzdG9yZURhdGEgPSBiYXNlNjRfZGVjb2RlKCAkcmVzdG9yZURhdGEgKSApICkgeyAvLyBmYWxzZSBpZiBmYWlsZWQKCQkkZGVjb2RlRmFpbFJlYXNvbiA9ICdFUlJPUiAjODM4OTNiOiBSZXN0b3JlIGhhbHRlZC4gVW5hYmxlIHRvIGJhc2U2NF9kZWNvZGUoKSBzdWJtaXR0ZWQgZm9ybSBkYXRhIGAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApIC4gJ2AuJzsKCX0gZWxzZSB7IC8vIFN1Y2Nlc3MuCgkJJHJlc3RvcmVEYXRhID0gdXJsZGVjb2RlKCAkcmVzdG9yZURhdGEgKTsKCQlpZiAoIG51bGwgPT09ICggJHJlc3RvcmVEYXRhID0ganNvbl9kZWNvZGUoICRyZXN0b3JlRGF0YSwgdHJ1ZSApICkgKSB7IC8vIG51bGwgaWYgZmFpbGVkCgkJCSRtZXNzYWdlID0gJ0VSUk9SICM4Mzg5M2I6IFJlc3RvcmUgaGFsdGVkLiBVbmFibGUgdG8gZGVjb2RlIEpTT04gcmVzdG9yZSBiYXNlNjQgZGVjb2RlZCBkYXRhIGAnIC4gaHRtbGVudGl0aWVzKCBiYXNlNjRfZGVjb2RlKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApICkgLiAnYC4gQmVmb3JlIGJhc2U2NCBkZWNvZGU6IGAnIC4gaHRtbGVudGl0aWVzKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdyZXN0b3JlRGF0YScgKSApIC4gJ2AuJzsKCQkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdqc29uX2xhc3RfZXJyb3InICkgKSB7CgkJIAkJJG1lc3NhZ2UgLj0gJyBqc29uX2xhc3RfZXJyb3I6IGAnIC4ganNvbl9sYXN0X2Vycm9yKCkgLiAnYC4nOwoJCSAJfQoJCSAJJGRlY29kZUZhaWxSZWFzb24gPSAkbWVzc2FnZTsKCQl9IGVsc2UgeyAvLyBTdWNjZXNzLgoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTdWNjZXNzIGRlY29kaW5nIHN1Ym1pdHRlZCBlbmNvZGVkIGRhdGEuJyApOwoJCX0KCX0KCS8vIFJlcG9ydCBmYWlsdXJlIGFuZCBmYXRhbGx5IGhhbHQuCglpZiAoICcnICE9PSAkZGVjb2RlRmFpbFJlYXNvbiApIHsKCQlwYl9iYWNrdXBidWRkeTo6YWxlcnQoICRtZXNzYWdlICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQlkaWUoKTsKCX0KCQoJCn0gZWxzZSB7IC8vIERlcGxveW1lbnQKCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApICYmICggY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApID4gMCApICkgeyAvLyBEZWZhdWx0IHN0YXRlIG92ZXJyaWRlcyBleGlzdC4gQXBwbHkgdGhlbS4KCQkkcmVzdG9yZURhdGEgPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RlZmF1bHRfc3RhdGVfb3ZlcnJpZGVzJ107Cgl9IGVsc2UgewoJCWRpZSggJ0Vycm9yICM4NDM3OTc5NDQ6IE1pc3NpbmcgZXhwZWN0ZWQgZGVmYXVsdCBzdGF0ZSBvdmVycmlkZS4nICk7Cgl9Cn0KCgovLyBJbnN0YW50aWF0ZSByZXN0b3JlIGNsYXNzLgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL3Jlc3RvcmUucGhwJyApOwokcmVzdG9yZSA9IG5ldyBiYWNrdXBidWRkeV9yZXN0b3JlKCAncmVzdG9yZScsICRyZXN0b3JlRGF0YSApOwp1bnNldCggJHJlc3RvcmVEYXRhICk7IC8vIEFjY2VzcyB2aWEgJHJlc3RvcmUtPl9zdGF0ZSB0byBtYWtlIHN1cmUgaXQgaXMgYWx3YXlzIHVwIHRvIGRhdGUuCmlmICggJ3RydWUnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBXZSBkb250IGFjY2VwdCBzdWJtaXR0ZWQgZm9ybSBvcHRpb25zIGR1cmluZyBkZXBsb3kuCglpZiAoICEgaXNfYXJyYXkoICRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZVJlc3VtZVN0ZXBzJ10gKSApIHsgLy8gU2tpcCBwYXJzZSBvcHRpb25zIGlmIG5vdCBjaHVua2luZy4KCQkkcmVzdG9yZS0+X3N0YXRlID0gcGFyc2Vfb3B0aW9ucyggJHJlc3RvcmUtPl9zdGF0ZSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ05vdCByZXN1bWluZzsgcGFyc2luZyBvcHRpb25zLicgKTsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUmVzdW1pbmc7IHNraXBwaW5nIG9wdGlvbnMgcGFyc2UuJyApOwoJfQp9CgoKLy8gUGFyc2Ugc3VibWl0dGVkIG9wdGlvbnMvc2V0dGluZ3MuCmZ1bmN0aW9uIHBhcnNlX29wdGlvbnMoICRyZXN0b3JlRGF0YSApIHsKCWlmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21pZ3JhdGVEYXRhYmFzZScgKSApIHsgJHJlc3RvcmVEYXRhWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVEYXRhYmFzZSddID0gdHJ1ZTsgfSBlbHNlIHsgJHJlc3RvcmVEYXRhWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVEYXRhYmFzZSddID0gZmFsc2U7IH0KCWlmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21pZ3JhdGVEYXRhYmFzZUJydXRlRm9yY2UnICkgKSB7ICRyZXN0b3JlRGF0YVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlRGF0YWJhc2VCcnV0ZUZvcmNlJ10gPSB0cnVlOyB9IGVsc2UgeyAkcmVzdG9yZURhdGFbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZURhdGFiYXNlQnJ1dGVGb3JjZSddID0gZmFsc2U7IH0KCgkkcmVzdG9yZURhdGFbJ3NpdGV1cmwnXSA9IHByZWdfcmVwbGFjZSggJ3wvKiR8JywgJycsIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3NpdGV1cmwnICkgKTsgLy8gU3RyaXAgdHJhaWxpbmcgc2xhc2hlcy4KCSRyZXN0b3JlRGF0YVsnaG9tZXVybCddID0gcHJlZ19yZXBsYWNlKCAnfC8qJHwnLCAnJywgcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnaG9tZXVybCcgKSApOyAvLyBTdHJpcCB0cmFpbGluZyBzbGFzaGVzLgoJaWYgKCAoICdvbicgIT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3VzdG9tSG9tZUVuYWJsZWQnICkgKSB8fCAoICcnID09ICRyZXN0b3JlRGF0YVsnaG9tZXVybCddICkgKSB7IC8vIEhvbWUgdXJsIHdhcyBibGFuayBPUiB0aGV5IGRpZCBub3QgY2hlY2sgdG8gY3VzdG9taXplIHRoZSBob21lIHVybCBzbyBqdXN0IHNldCBpdCB0byBzaXRldXJsLgoJCSRyZXN0b3JlRGF0YVsnaG9tZXVybCddID0gJHJlc3RvcmVEYXRhWydzaXRldXJsJ107Cgl9CgkkcmVzdG9yZURhdGFbJ21heEV4ZWN1dGlvblRpbWUnXSA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ21heF9leGVjdXRpb25fdGltZScgKTsKCQoJcmV0dXJuICRyZXN0b3JlRGF0YTsKfQoKCi8vIElmIGRlcGxveW1lbnQgYW5kIG5vIHRhYmxlcyBpbXBvcnRlZCB0aGVuIHNraXAgbWlncmF0aW9uLgpwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTUUwgZmlsZXMgaW1wb3J0ZWQ6ICcgLiBjb3VudCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydzcWxGaWxlcyddICkgLiAnOyBEZXBsb3k/OiAnIC4gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKTsKaWYgKCAndHJ1ZScgPT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7CglpZiAoIDAgPT0gY291bnQoICRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnc3FsRmlsZXMnXSApICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0RlcGxveSBtb2RlIGFuZCBubyBTUUwgZmlsZXMgaW1wb3J0ZWQgc28gc2tpcHBpbmcgZGF0YWJhc2UgbWlncmF0aW9uIHN0ZXAuJyApOwoJCSRyZXN0b3JlLT5fc3RhdGVbJ2RhdGFiYXNlU2V0dGluZ3MnXVsnbWlncmF0ZURhdGFiYXNlJ10gPSBmYWxzZTsKCQkKCQlmaW5hbEFjdGlvbnMoICRyZXN0b3JlICk7CgkJJG5leHRTdGVwTnVtID0gNjsKCQllY2hvICc8IS0tIEFVVE9QUk9DRUVEIFRPIFNURVAgJyAuICRuZXh0U3RlcE51bSAuICcgLS0+JzsKCX0gZWxzZSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGVwbG95IG1vZGUgYnV0IFNRTCBmaWxlcyBpbXBvcnRlZCAoYCcgLiBjb3VudCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydzcWxGaWxlcyddICkgLiAnYCB0b3RhbCkgc28gbm90IHNraXBwaW5nIGRhdGFiYXNlIG1pZ3JhdGlvbiBzdGVwLicgKTsKCX0KfQoKCmlmICggVFJVRSAhPT0gJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlRGF0YWJhc2UnXSApIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwaW5nIG1pZ3JhdGlvbiBvZiBkYXRhYmFzZSBiYXNlZCBvbiBhZHZhbmNlZCBzZXR0aW5ncy4nICk7CgllY2hvICI8c2NyaXB0PmJiX2FjdGlvbiggJ2RhdGFiYXNlTWlncmF0aW9uU2tpcHBlZCcgKTs8L3NjcmlwdD4iOwoJJG1pZ3JhdGVSZXN1bHRzID0gdHJ1ZTsKfSBlbHNlIHsKCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1N0YXJ0aW5nIGRhdGFiYXNlIG1pZ3JhdGlvbiBwcm9jZWR1cmVzLicgKTsKCQoJLy8gQ29ubmVjdCBJbXBvcnRCdWRkeSB0byB0aGUgZGF0YWJhc2UuCgkkcmVzdG9yZS0+Y29ubmVjdERhdGFiYXNlKCk7CgkKCSRvdmVycmlkZVByZWZpeCA9ICcnOwoJaWYgKCAndHJ1ZScgPT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7CgkJJG92ZXJyaWRlUHJlZml4ID0gJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWyd0ZW1wUHJlZml4J107Cgl9CgkKCXJlcXVpcmVfb25jZSggJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvX21pZ3JhdGVfZGF0YWJhc2UucGhwJyApOwoJJG1pZ3JhdGUgPSBuZXcgYmFja3VwYnVkZHlfbWlncmF0ZURCKCAnc3RhbmRhbG9uZScsICRyZXN0b3JlLT5fc3RhdGUsICRuZXR3b3JrUHJlZml4ID0gJycsICRvdmVycmlkZVByZWZpeCApOwoJJG1pZ3JhdGVSZXN1bHRzID0gJG1pZ3JhdGUtPm1pZ3JhdGUoKTsKCQoJCglpZiAoICd0cnVlJyA9PSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsKCQlpZiAoIGlzX2FycmF5KCAkbWlncmF0ZVJlc3VsdHMgKSApIHsgLy8gUmV0dXJuIHRvIHNhbWUgc3RlcCBmb3IgY29udGludWluZyBjaHVua2luZy4KCQkJJG5leHRTdGVwTnVtID0gNTsKCQl9IGVsc2UgewoJCQkvL2Vycm9yX2xvZyggJ1NUQVRFOiAnIC4gcHJpbnRfciggJHJlc3RvcmUtPl9zdGF0ZSwgdHJ1ZSApICk7CgkJCS8vIERvbid0IGF0dGVtcHQgdG8gc3dhcCBvdXQgYmFja3VwYnVkZHkgc2V0dGluZ3MgZnJvbSBvcHRpb25zIHRhYmxlIGlmIG9wdGlvbnMgdGFibGUgd2Fzbid0IHB1bGxlZC4KCQkJaWYgKCBpc3NldCggJHJlc3RvcmUtPl9zdGF0ZVsnZGF0J11bJ3RhYmxlc19zaXplcyddICkgJiYgKCAhIGlzc2V0KCAkcmVzdG9yZS0+X3N0YXRlWydkYXQnXVsndGFibGVzX3NpemVzJ11bICRyZXN0b3JlLT5fc3RhdGVbJ2RhdCddWydkYl9wcmVmaXgnXSAuICdvcHRpb25zJyBdICkgKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ09wdGlvbnMgdGFibGUgd2FzIG5vdCBiYWNrZWQgdXAuIFNraXBwaW5nIHN3YXAgb3V0IG9mIEJhY2t1cEJ1ZGR5IHNldHRpbmdzLicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ09wdGlvbnMgdGFibGUgd2FzIGJhY2tlZCB1cC4gU3dhcHBpbmcgb3V0IG9mIEJhY2t1cEJ1ZGR5IHNldHRpbmdzLicgKTsKCQkJCWlmICggdHJ1ZSAhPT0gJHJlc3RvcmUtPnN3YXBEYXRhYmFzZUJCU2V0dGluZ3MoKSApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzMyOTIzNzM6IFVuYWJsZSB0byBzd2FwIG91dCBCYWNrdXBCdWRkeSBzZXR0aW5ncy4gVGhpcyBtYXkgbm90IGJlIGEgZmF0YWwgZXJyb3IuJyApOwoJCQkJfSBlbHNlIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBzd2FwcGluZyBCYWNrdXBCdWRkeSBzZXR0aW5ncy4nICk7CgkJCQl9CgkJCX0KCQkJCgkJCS8vIFN3YXAgb3V0IG5ldyBhbmQgb2xkIGRhdGFiYXNlIHByZWZpeGVzLgoJCQlpZiAoIHRydWUgIT09ICRyZXN0b3JlLT5zd2FwRGF0YWJhc2VzKCkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzg0Mzc4OiBVbmFibGUgdG8gc3dhcCBvdXQgdGVtcG9yYXJ5IGRhdGFiYXNlIHByZWZpeGVzLicgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdoYWx0U2NyaXB0JywgJycgKTsgLy8gSGFsdCBKUyBvbiBwYWdlLgoJCQkJcmV0dXJuOwoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgc3dhcHBpbmcgZGF0YWJhc2UgYmFzZWQgb24gdGVtcG9yYXJ5IGFuZCBsaXZlIHByZWZpeGVzLicgKTsKCQkJfQoJCQkKCQkJZmluYWxBY3Rpb25zKCAkcmVzdG9yZSApOwoJCQkkbmV4dFN0ZXBOdW0gPSA2OwoJCX0KCQllY2hvICc8IS0tIEFVVE9QUk9DRUVEIFRPIFNURVAgJyAuICRuZXh0U3RlcE51bSAuICcgLS0+JzsKCQkKCX0gZWxzZSB7IC8vIFN0YW5kYXJkIGltcG9ydCAobm90IGRlcGxveSkKCQkKCQlpZiAoIFRSVUUgPT09ICRtaWdyYXRlUmVzdWx0cyApIHsgLy8gQ29tcGxldGVkIHN1Y2Nlc3NmdWxseS4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGNvbXBsZXRlZC4nICk7CgkJCWVjaG8gIjxzY3JpcHQ+YmJfYWN0aW9uKCAnZGF0YWJhc2VNaWdyYXRpb25TdWNjZXNzJyApOzwvc2NyaXB0PiI7CgkJfSBlbHNlaWYgKCBpc19hcnJheSggJG1pZ3JhdGVSZXN1bHRzICkgKSB7IC8vIENodW5raW5nLgoJCQkkcmVzdG9yZS0+X3N0YXRlWydkYXRhYmFzZVNldHRpbmdzJ11bJ21pZ3JhdGVSZXN1bWVTdGVwcyddID0gKGFycmF5KSRtaWdyYXRlUmVzdWx0c1swXTsKCQkJJHJlc3RvcmUtPl9zdGF0ZVsnZGF0YWJhc2VTZXR0aW5ncyddWydtaWdyYXRlUmVzdW1lUG9pbnQnXSA9ICRtaWdyYXRlUmVzdWx0c1sxXTsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGRpZCBub3QgZnVsbHkgY29tcGxldGUgaW4gZmlyc3QgcGFzcy4gQ2h1bmtpbmcgaW4gcHJvZ3Jlc3MuIFJlc3VtaW5nIHdoZXJlIGxlZnQgb2ZmLicgKTsKCQkJPz4KCQkJPGZvcm0gaWQ9Im1pZ3JhdGVDaHVua0Zvcm0iIG1ldGhvZD0icG9zdCIgYWN0aW9uPSI/YWpheD01Ij4KCQkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmVEYXRhIiB2YWx1ZT0iPD9waHAgZWNobyBiYXNlNjRfZW5jb2RlKCB1cmxlbmNvZGUoIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgKSApOyA/PiI+CgkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXRGb3JtIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiB2YWx1ZT0iTmV4dCBTdGVwIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgoJCQk8L2Zvcm0+CgkJCTxzY3JpcHQ+CgkJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewoJCQkJCWpRdWVyeSggJyNtaWdyYXRlQ2h1bmtGb3JtJyApLnN1Ym1pdCgpOwoJCQkJfSk7CgkJCTwvc2NyaXB0PgoJCQk8P3BocAoJCX0gZWxzZSB7IC8vIEZhaWxlZC4KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGF0YWJhc2UgbWlncmF0aW9uIGZhaWxlZC4gUmVzdWx0OiBgJyAuICRtaWdyYXRlUmVzdWx0cyAuICdgLicgKTsKCQkJZWNobyAiPHNjcmlwdD5iYl9hY3Rpb24oICdkYXRhYmFzZU1pZ3JhdGlvbkZhaWxlZCcgKTs8L3NjcmlwdD4iOwoJCX0KCQkKCX0KfQoKCmlmICggJ3RydWUnID09IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBEZXBsb3ltZW50CgkKCS8vIFdyaXRlIGRlZmF1bHQgc3RhdGUgb3ZlcnJpZGVzLgoJZ2xvYmFsICRpbXBvcnRidWRkeV9maWxlOwoJJGltcG9ydEZpbGVTZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGltcG9ydGJ1ZGR5X2ZpbGUgKTsKCSRzdGF0ZV9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydEZpbGVTZXJpYWwgLiAnLXN0YXRlLnBocCc7CglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdXcml0aW5nIHRvIHN0YXRlIGZpbGUgYCcgLiAkc3RhdGVfZmlsZSAuICdgLicgKTsKCWlmICggZmFsc2UgPT09ICggJGZpbGVfaGFuZGxlID0gQGZvcGVuKCAkc3RhdGVfZmlsZSwgJ3cnICkgKSApIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzMyODkzNzogVGVtcCBzdGF0ZSBmaWxlIGlzIG5vdCBjcmVhdGFibGUvd3JpdGFibGUuIENoZWNrIHlvdXIgcGVybWlzc2lvbnMuICgnIC4gJHN0YXRlX2ZpbGUgLiAnKScgKTsKCQlyZXR1cm4gZmFsc2U7Cgl9CglpZiAoIGZhbHNlID09PSBmd3JpdGUoICRmaWxlX2hhbmRsZSwgIjw/cGhwIGRpZSgnQWNjZXNzIERlbmllZC4nKTsgLy8gPCEtLSA/PlxuIiAuIGJhc2U2NF9lbmNvZGUoIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgKSApICkgewoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdFcnJvciAjMjM4OTM3MzogVW5hYmxlIHRvIHdyaXRlIHRvIHN0YXRlIGZpbGUuJyApOwoJfSBlbHNlIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdXcm90ZSB0byBzdGF0ZSBmaWxlLicgKTsKCX0KCWZjbG9zZSggJGZpbGVfaGFuZGxlICk7CgkKCWlmICggNiA9PSAkbmV4dFN0ZXBOdW0gKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnTW92aW5nIHRvIGNsZWFudXAgc3RlcCBuZXh0Li4uJyApOwoJfSBlbHNlIHsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDaHVua2luZyBkYXRhYmFzZSBtaWdyYXRpb24gc28gYWJvdXQgdG8gcnVuIHN0ZXAgYCcgLiAkbmV4dFN0ZXBOdW0gLiAnYC4nICk7Cgl9Cgk/PgoJPGZvcm0gbWV0aG9kPSJwb3N0IiBhY3Rpb249Ij9hamF4PTw/cGhwIGVjaG8gJG5leHRTdGVwTnVtOyA/PiZ2PTw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICd2JyApOyA/PiZkZXBsb3k9dHJ1ZSZkaXJlY3Rpb249PD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RpcmVjdGlvbicgKTsgPz4mZGlzcGxheV9tb2RlPWVtYmVkIiBpZD0iZGVwbG95LWF1dG9Qcm9jZWVkIj4KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXN0b3JlRGF0YSIgdmFsdWU9Ijw/cGhwIGVjaG8gYmFzZTY0X2VuY29kZSggdXJsZW5jb2RlKCBqc29uX2VuY29kZSggJHJlc3RvcmUtPl9zdGF0ZSApICkgKTsgPz4iPgoJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9Im15LXN1Ym1pdCIgdmFsdWU9Ik5leHQgU3RlcCIgc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbjsiPgoJPC9mb3JtPgoJPHNjcmlwdD5zZXRUaW1lb3V0KCBmdW5jdGlvbigpeyBqUXVlcnkoICcjZGVwbG95LWF1dG9Qcm9jZWVkJyApLnN1Ym1pdCgpOyB9LCAzMDAwICk7PC9zY3JpcHQ+Cgk8P3BocAoJcmV0dXJuOwoJCn0gZWxzZSB7IC8vIFN0YW5kYXJkIGltcG9ydAoJCgkvLyBTdWNjZXNzIChvciBtaWdyYXRlIHdhcyBza2lwcGVkKS4KCWlmICggdHJ1ZSA9PT0gJG1pZ3JhdGVSZXN1bHRzICkgewoJCQoJCWZpbmFsQWN0aW9ucyggJHJlc3RvcmUgKTsKCQkKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hpbmcgc3RlcCA1LicgKTsKCQllY2hvICI8c2NyaXB0PgoJCXNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7CgkJCXBhZ2VUaXRsZSggJ1N0ZXAgNjogVmVyaWZ5IFNpdGUgJiBGaW5pc2gnICk7CgkJCWJiX3Nob3dTdGVwKCAnY2xlYW51cFNldHRpbmdzJywgIiAuIGpzb25fZW5jb2RlKCAkcmVzdG9yZS0+X3N0YXRlICkgLiAiICk7CgkJfSwgMjAwMCApOwoJCTwvc2NyaXB0PiI7CgkJCgl9Cgp9CgoKcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ19pZnJhbWVfZm9vdGVyJyk7Cgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoKLy9wcmludF9yKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoKSApOwoKJGNwYW5lbF91c2VyID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VzZXInICk7CiRjcGFuZWxfcGFzc3dvcmQgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfcGFzcycgKTsKJGNwYW5lbF9ob3N0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VybCcgKTsKJGNwYW5lbF9wb3J0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3BvcnQnICk7CiRjcGFuZWxfcHJvdG9jb2wgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfcHJvdG9jb2wnICk7CiRkYl9uYW1lID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX2RibmFtZScgKTsKJGRiX3VzZXIgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJ1c2VyJyApOwokZGJfcGFzcyA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2NwYW5lbF9kYnBhc3MnICk7CgovLyBOZWVkZWQgZm9yIEhUVFAgcmVxdWVzdHMuCiRyZXF1ZXN0Y29yZV9maWxlID0gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9yZXF1ZXN0Y29yZS9yZXF1ZXN0Y29yZS5jbGFzcy5waHAnOwpyZXF1aXJlX29uY2UoICRyZXF1ZXN0Y29yZV9maWxlICk7CgpyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvY3BhbmVsL2NwYW5lbC5waHAnICk7CiRjcmVhdGVfZGJfcmVzdWx0ID0gcGJfYmFja3VwYnVkZHlfY3BhbmVsOjpjcmVhdGVfZGIoICRjcGFuZWxfdXNlciwgJGNwYW5lbF9wYXNzd29yZCwgJGNwYW5lbF9ob3N0LCAkZGJfbmFtZSwgJGRiX3VzZXIsICRkYl9wYXNzLCAkY3BhbmVsX3BvcnQsICRjcGFuZWxfcHJvdG9jb2wgKTsKCmlmICggJGNyZWF0ZV9kYl9yZXN1bHQgPT09IHRydWUgKSB7CgllY2hvICdTdWNjZXNzISBDcmVhdGVkIGRhdGFiYXNlLCB1c2VyLCBhbmQgYXNzaWduZWQgdXNlciB0byBkYXRhYmFzZS4nOwp9IGVsc2UgewoJZWNobyAiVW5hYmxlIHRvIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGRhdGFiYXNlIHdpdGggdGhlIHByb3ZpZGVkIHNldHRpbmdzLiBDaGVjayBzZXR0aW5ncyBvciBtYW51YWxseSBjcmVhdGUgdGhlIGRhdGFiYXNlIGZyb20geW91ciBob3N0J3MgY29udHJvbCBwYW5lbC4gU2VlIHR1dG9yaWFsIGF0OiAiOwoJZWNobyAiaHR0cDovL2l0aGVtZXMuY29tL3R1dG9yaWFsLWNyZWF0ZS1kYXRhYmFzZS1pbi1jcGFuZWwvXG5cbiI7CgllY2hvICJFcnJvciBkZXRhaWxzOlxuIiAuIGltcGxvZGUoICJcbiIsICRjcmVhdGVfZGJfcmVzdWx0KTsKfQoKZGllKCk7Cg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgokZmlsZSA9IEFCU1BBVEggLiBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdmaWxlJyApOwoKaWYgKCAnJyA9PSAkZmlsZSApIHsKCWRpZSggJ05vIGZpbGUgcGFzc2VkLicgKTsKfQppZiAoICEgZmlsZV9leGlzdHMoICRmaWxlICkgKSB7CglkaWUoICdGaWxlIG5vdCBmb3VuZC4nICk7Cn0KCiRmaWxlSGFzaCA9IEBtZDVfZmlsZSggJGZpbGUgKTsKCmlmICggZmFsc2UgPT09ICRmaWxlSGFzaCApIHsKCWRpZSggJ1VuYWJsZSB0byBjYWxjdWxhdGUgaGFzaC4gVmVyaWZ5IGZpbGUgcGVybWlzc2lvbnMuJyApOwp9IGVsc2UgewoJZGllKCBqc29uX2VuY29kZSggYXJyYXkoICdoYXNoJyA9PiAkZmlsZUhhc2ggKSApICk7Cn0=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgppZiAoICd0cnVlJyAhPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsKCWRpZSggJ0FjY2VzcyBkZW5pZWQuJyApOwp9CgovLyBPbmx5IGFsbG93IGFjY2VzcyB0byB0aGlzIGZpbGUgaWYgaXQgaGFzIGEgc2VyaWFsIGhpZGluZyBpdC4gVXNlZCBieSBkZXBsb3ltZW50LgpnbG9iYWwgJGltcG9ydGJ1ZGR5X2ZpbGU7CiRpbXBvcnRGaWxlU2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRpbXBvcnRidWRkeV9maWxlICk7CmlmICggJycgPT0gJGltcG9ydEZpbGVTZXJpYWwgKSB7CglkaWUoICdBY2Nlc3MgZGVuaWVkLicgKTsKfQoKcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnKioqIEVuZCBJbXBvcnRCdWRkeSBMb2cgU2VjdGlvbiAoRGVwbG95bWVudCknICk7CgovLyBMb2cgdG8gbWFrZSBhIGNvcHkgb2YgcmV0cmlldmVkIGRlcGxveSBpbmZvIGludG8uCiRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7CiRiYWNrdXBfbG9nX2ZpbGUgPSAkbG9nX2RpcmVjdG9yeSAuICdzdGF0dXMtZGVwbG95Y29weS0nIC4gJGltcG9ydEZpbGVTZXJpYWwgLiAnLnR4dCc7Cgokc3RhdHVzX2xpbmVzID0gcGJfYmFja3VwYnVkZHk6OmdldF9zdGF0dXMoICcnLCB0cnVlLCBmYWxzZSwgdHJ1ZSwgJGJhY2t1cF9sb2dfZmlsZSApOyAvLyBDbGVhciBmaWxlLCBkb250IHVubGluayBmaWxlLCBzdXByZXNzIHN0YXR1cyByZXRyaWV2YWwgbXNnLCBiYWNrdXAgaW50byAkbG9nX2ZpbGUKZWNobyBpbXBsb2RlKCAnJywgJHN0YXR1c19saW5lcyApOwo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgppZiAoICcnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ25ld3Bhc3N3b3JkJyApICkgewoJZGllKCAnRXJyb3IgIzg0OTM0ODk6IE1pc3NpbmcgcGFzc3dvcmQuJyApOwp9CgpkaWUoIG1kNSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbmV3cGFzc3dvcmQnICkgKSApOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgovLyBJbmNsdWRlIHRoZSBEQiBUZXN0cyBjbGFzcyBhbmQgaW5pdCBpdC4KcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvdGVzdC1kYi5waHAnICk7CiRpbXBvcnRidWRkeV90ZXN0X2RiID0gbmV3IGltcG9ydGJ1ZGR5X3Rlc3RfZGIoKTsK
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
PD9waHAKZGllKCk7CgppZiAoICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApIHx8ICggdHJ1ZSAhPT0gUEJfSU1QT1JUQlVERFkgKSApIHsKCWRpZSggJzxodG1sPjwvaHRtbD4nICk7Cn0KCkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgo/Pgo8ZGl2IGlkPSJwYl9jcmVhdGVhZG1pbl9tb2RhbCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IGhlaWdodDogOTAlOyI+CgkJPGRpdiBjbGFzcz0ibW9kYWwiPgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9oZWFkZXIiPgoJCQkJPGEgY2xhc3M9Im1vZGFsX2Nsb3NlIj4mdGltZXM7PC9hPgoJCQkJPGgyPlNlcnZlciBJbmZvcm1hdGlvbjwvaDI+CgkJCTwvZGl2PgoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9jb250ZW50Ij4KCQkJCQoJCQkJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJCQkJCWpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CgkJCQkJCWpRdWVyeSggJyNjcmVhdGVhZG1pbl9mb3JtJyApLnN1Ym1pdChmdW5jdGlvbigpewoJCQkJCQkJCgkJCQkJCQlqUXVlcnkoICcuY3JlYXRlYWRtaW5fbG9hZGluZycgKS5zaG93KCk7CgkJCQkJCQlqUXVlcnkucG9zdCgnaW1wb3J0YnVkZHkucGhwP2FqYXg9Y3JlYXRlX2FkbWluJywKCQkJCQkJCQlqUXVlcnkoICcjY3JlYXRlYWRtaW5fZm9ybScgKS5zZXJpYWxpemUoKSwgZnVuY3Rpb24oZGF0YSkgewoJCQkJCQkJCQkKCQkJCQkJCQkJZGF0YSA9IGpRdWVyeS50cmltKCBkYXRhICk7CgkJCQkJCQkJCWpRdWVyeSggJy5jcmVhdGVhZG1pbl9sb2FkaW5nJyApLmhpZGUoKTsKCQkJCQkJCQkJCgkJCQkJCQkJCWlmICggZGF0YSA9PSAnMScgKSB7CgkJCQkJCQkJCQlhbGVydCggJ1N1Y2Nlc3MnICk7CgkJCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJCQlhbGVydCggJ0Vycm9yOiAnICsgZGF0YSApOwoJCQkJCQkJCQl9CgkJCQkJCQkJCQoJCQkJCQkJCX0KCQkJCQkJCSk7CgkJCQkJCQkKCQkJCQkJCXJldHVybiBmYWxzZTsKCQkJCQkJCQoJCQkJCQl9KTsKCQkJCQl9KTsKCQkJCTwvc2NyaXB0PgoJCQkJCgkJCQk8Zm9ybSBpZD0iY3JlYXRlYWRtaW5fZm9ybSI+CgkJCQkJVXNlcm5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSI+CgkJCQkJRW1haWw6IDxpbnB1dCB0eXBlPSJlbWFpbCIgbmFtZT0iZW1haWwiPgoJCQkJCVBhc3N3b3JkOiA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIj4KCQkJCQlDb25maXJtIFBhc3N3b3JkOiA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkX2NvbmZpcm0iPgoJCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkNyZWF0ZSBBZG1pbiBVc2VyIiBjbGFzcz0iYnV0dG9uIj4KCQkJCQk8c3BhbiBjbGFzcz0iY3JlYXRlYWRtaW5fbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmcuZ2lmIiBhbHQ9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgdGl0bGU9IicgLiBfXygnTG9hZGluZy4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij48L3NwYW4+CgkJCQk8L2Zvcm0+CgkJCQkKCQkJCQoJCTwvZGl2PgoJPC9kaXY+CjwvZGl2Pgo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgoKJGRhdGEgPSBhcnJheSgpOwpwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnZGJyZXBsYWNlJywgJGRhdGEgKTsKPz48c2NyaXB0PmpRdWVyeSggJyNwYWdlVGl0bGUnICkuaHRtbCggJ0RhdGFiYXNlIFRleHQgUmVwbGFjZScgKTs8L3NjcmlwdD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CgoKLyoqKioqKiBCRUdJTiBBVVRIRU5USUNBVElPTiAqKioqKi8KLy9yZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY2xhc3Nlcy9hdXRoLnBocCcgKTsKQXV0aDo6Y2hlY2soKTsKaWYgKCAoIHRydWUgPT09IEF1dGg6OmlzX2F1dGhlbnRpY2F0ZWQoKSApICYmICggJ2xvZ2luJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdhY3Rpb24nICkgKSApIHsgLy8gT24gc3VjY2Vzc2Z1bCBsb2dpbiB0byBzdGVwIDAsIHJlZGlyZWN0IHRvIHN0ZXAgMS4KCWhlYWRlciggJ0xvY2F0aW9uOiAnIC4gcGJfYmFja3VwYnVkZHk6OnBhZ2VfdXJsKCkgKTsKfQovKioqKioqIEVORCBBVVRIRU5USUNBVElPTiAqKioqKi8KCgokbW9kZSA9ICdodG1sJzsKCgovLyBSZWdpc3RlciBQSFAgc2h1dGRvd24gZnVuY3Rpb24gdG8gaGVscCBjYXRjaCBhbmQgbG9nIGZhdGFsIFBIUCBlcnJvcnMgZHVyaW5nIGJhY2t1cC4KcmVnaXN0ZXJfc2h1dGRvd25fZnVuY3Rpb24oICdzaHV0ZG93bl9mdW5jdGlvbicgKTsKLy9lcnJvcl9yZXBvcnRpbmcoIEVfRVJST1IgfCBFX1dBUk5JTkcgfCBFX1BBUlNFIHwgRV9OT1RJQ0UgKTsgLy8gSElHSAoKLyoJc2h1dGRvd25fZnVuY3Rpb24oKQogKgkKICoJVXNlZCBmb3IgY2F0Y2hpbmcgZmF0YWwgUEhQIGVycm9ycyBkdXJpbmcgYmFja3VwIHRvIHdyaXRlIHRvIGxvZyBmb3IgZGVidWdnaW5nLgogKgkKICoJQHJldHVybgkJbnVsbAogKi8KZnVuY3Rpb24gc2h1dGRvd25fZnVuY3Rpb24oKSB7CgkKCQoJLy8gR2V0IGVycm9yIG1lc3NhZ2UuCgkvLyBFcnJvciB0eXBlczogaHR0cDovL3BocC5uZXQvbWFudWFsL2VuL2Vycm9yZnVuYy5jb25zdGFudHMucGhwCgkkZSA9IGVycm9yX2dldF9sYXN0KCk7CglpZiAoICRlID09PSBOVUxMICkgeyAvLyBObyBlcnJvciBvZiBhbnkga2luZC4KCQlyZXR1cm47Cgl9IGVsc2UgeyAvLyBTb21lIHR5cGUgb2YgZXJyb3IuCgkJaWYgKCAhaXNfYXJyYXkoICRlICkgfHwgKCAkZVsndHlwZSddICE9IEVfRVJST1IgKSAmJiAoICRlWyd0eXBlJ10gIT0gRV9VU0VSX0VSUk9SICkgKSB7IC8vIFJldHVybiBpZiBub3QgYSBmYXRhbCBlcnJvci4KCQkJLy9lY2hvICc8IS0tICcgLiBwcmludF9yKCAkZSwgdHJ1ZSApIC4gJyAtLT4nIC4gIlxuIjsKCQkJcmV0dXJuOwoJCX0KCX0KCQoJCgkvLyBDYWxjdWxhdGUgbG9nIGRpcmVjdG9yeS4KCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7IC8vIEFsc28gaGFuZGxlIHdoZW4gaW4gaW1wb3J0YnVkZHkuCgkkbWFpbl9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnbG9nLScgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JzsKCQoJCgkvLyBEZXRlcm1pbmUgaWYgd3JpdGluZyB0byBhIHNlcmlhbCBsb2cuCglpZiAoIHBiX2JhY2t1cGJ1ZGR5OjokX3N0YXR1c19zZXJpYWwgIT0gJycgKSB7CgkJJHNlcmlhbCA9IHBiX2JhY2t1cGJ1ZGR5OjokX3N0YXR1c19zZXJpYWw7CgkJJHNlcmlhbF9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiAkc2VyaWFsIC4gJ18nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCc7CgkJJHdyaXRlX3NlcmlhbCA9IHRydWU7Cgl9IGVsc2UgewoJCSR3cml0ZV9zZXJpYWwgPSBmYWxzZTsKCX0KCQoJCgkvLyBGb3JtYXQgZXJyb3IgbWVzc2FnZS4KCSRlX3N0cmluZyA9ICctLS0tLSBGQVRBTCBFUlJPUiAtLS0tLSBBIGZhdGFsIFBIUCBlcnJvciB3YXMgZW5jb3VudGVyZWQ6ICc7Cglmb3JlYWNoKCAoYXJyYXkpJGUgYXMgJGVfbGluZV90aXRsZSA9PiAkZV9saW5lICkgewoJCSRlX3N0cmluZyAuPSAkZV9saW5lX3RpdGxlIC4gJyA9PiAnIC4gJGVfbGluZSAuICI7ICI7Cgl9CgkkZV9zdHJpbmcgPSBydHJpbSggJGVfc3RyaW5nLCAnOyAnICkgLiAnLic7CgkKCS8vIFdyaXRlIHRvIGxvZy4KCUBmaWxlX3B1dF9jb250ZW50cyggJG1haW5fZmlsZSwgJGVfc3RyaW5nLCBGSUxFX0FQUEVORCApOwoJCgkvLyBJTVBPUlRCVUREWQoJJHN0YXR1cyA9IHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5kYXRlKCB0aW1lKCkgKSAuICJcdCIgLgoJCQkJc3ByaW50ZiggIiUwMS4yZiIsIHJvdW5kKCBtaWNyb3RpbWUoIHRydWUgKSAtIHBiX2JhY2t1cGJ1ZGR5Ojokc3RhcnRfdGltZSwgMiApICkgLiAiXHQiIC4KCQkJCXNwcmludGYoICIlMDEuMmYiLCByb3VuZCggbWVtb3J5X2dldF9wZWFrX3VzYWdlKCkgLyAxMDQ4NTc2LCAyICkgKSAuICJcdCIgLgoJCQkJJ2Vycm9yJyAuICJcdFx0IiAuCgkJCQlzdHJfcmVwbGFjZSggY2hyKDkpLCAnICAgJywgJGVfc3RyaW5nICkKCQkJOwoJJHN0YXR1cyA9IHN0cl9yZXBsYWNlKCAnXFwnLCAnLycsICRzdGF0dXMgKTsKCWVjaG8gJzxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij5wYl9zdGF0dXNfYXBwZW5kKCInIC4gc3RyX3JlcGxhY2UoICciJywgJyZxdW90OycsICRzdGF0dXMgKSAuICciKTs8L3NjcmlwdD4nOwoJCn0gLy8gRW5kIHNodXRkb3duX2Z1bmN0aW9uLgoKCi8vIEhhbmRsZSBBSkFYLgokYWpheCA9ICcnOwppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2FqYXgnICkgIT0gJycgKSB7CgkkYWpheCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2FqYXgnICk7Cn0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdhamF4JyApICE9ICcnICkgewoJJGFqYXggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2FqYXgnICk7Cn0KaWYgKCAkYWpheCAhPSAnJyApIHsgLy8gQUpBWAoJaWYgKCAkYWpheCAhPSAnaGFzaF9mb3Jnb3RwYXNzJyApIHsKCQlBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLgoJfQoJCgkkcGFnZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY29udHJvbGxlcnMvYWpheC8nIC4gJGFqYXggLiAnLnBocCc7CglpZiAoIGZpbGVfZXhpc3RzKCAkcGFnZSApICkgewoJCXJlcXVpcmVfb25jZSggJHBhZ2UgKTsKCX0gZWxzZSB7CgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIEFKQVggYWN0aW9uIGAnIC4gaHRtbGVudGl0aWVzKCAkYWpheCApIC4gJ2AgRmlsZSBub3QgZm91bmQ6IGAnIC4gJHBhZ2UgLiAnYC59JzsKCX0KCXJldHVybjsKCQp9CgoKLy8gRGV0ZXJtaW5lIHBhZ2UgdG8gbG9hZC4KaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhZ2UnICkgIT0gJycgKSB7IC8vIE5hbWVkIHBhZ2UuCgkKCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgkKCSRwYWdlU2x1ZyA9IHN0cl9yZXBsYWNlKCBhcnJheSggJ1xcJywgJy8nICksICcnLCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3BhZ2UnICkgKTsKCWlmICggISBjdHlwZV9hbG51bSggc3RyX3JlcGxhY2UoIGFycmF5KCAnLScsICdfJyApLCAnJywgJHBhZ2VTbHVnICkgKSApIHsgLy8gRGlzYWxsb3cgbm9uLWFscGhhbnVtZXJpYyBleGNlcHQgZGFzaCwgdW5kZXJzY29yZS4KCQlkaWUoICdFcnJvciAjODU3NDc4MzMuIFBhZ2UgY29udGFpbnMgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzLiBPbmx5IGFscGhhbnVtZXJpYywgZGFzaGVzLCBhbmQgdW5kZXJzY29yZXMgcGVybWl0dGVkLicgKTsKCX0gCgkKCSRwYWdlRmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY29udHJvbGxlcnMvcGFnZXMvJyAuICRwYWdlU2x1ZyAuICcucGhwJzsKCWlmICggZmlsZV9leGlzdHMoICRwYWdlRmlsZSApICkgewoJCWVjaG8gJzwhLS0gU3RhcnRpbmcgcGFnZSAnIC4gJHBhZ2VTbHVnIC4gJy4gLS0+JzsKCQlyZXF1aXJlX29uY2UoICRwYWdlRmlsZSApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0ZpbmlzaGVkIHBhZ2UgJyAuICRwYWdlU2x1ZyAuICcuJyApOwoJfSBlbHNlIHsKCQllY2hvICd7RXJyb3I6IEludmFsaWQgcGFnZSBgJyAuIGh0bWxlbnRpdGllcyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICkgLiAnLnBocCcgLiAnYC59JzsKCX0KCXJldHVybjsKCQp9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnc3RlcCcgKSAhPSAnJyApIHsgLy8gTnVtZXJpY2FsIHN0ZXAuCgkKCWlmICggdHJ1ZSAhPT0gQXV0aDo6aXNfYXV0aGVudGljYXRlZCgpICkgeyAvLyBJZiBub3QgbG9nZ2VkIGluIHRoZW4gcHJvdmlkZSBsb2dpbiBwYWdlLgoJCSRzdGVwID0gJ2xvZ2luJzsKCX0gZWxzZSB7CgkJJHN0ZXAgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICk7CgkJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4KCX0KCQp9IGVsc2UgeyAvLyBVbmtub3duLiBEZWZhdWx0IHRvIGxvZ2luLgoJaWYgKCB0cnVlICE9PSBBdXRoOjppc19hdXRoZW50aWNhdGVkKCkgKSB7IC8vIElmIG5vdCBsb2dnZWQgaW4gdGhlbiBwcm92aWRlIGxvZ2luIHBhZ2UuCgkJJHN0ZXAgPSAnbG9naW4nOwoJfSBlbHNlIHsKCQkkc3RlcCA9ICdob21lQmFja3VwU2VsZWN0JzsKCX0KfQoKJHN0ZXBGaWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jb250cm9sbGVycy9wYWdlcy8nIC4gJHN0ZXAgLiAnLnBocCc7CiRzdGVwID0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApOwpyZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvdmlld3MvX2hlYWRlci5waHAnICk7CmVjaG8gJzwhLS0gU3RhcnRpbmcgc3RlcCBmaWxlIGAnIC4gYmFzZW5hbWUoICRzdGVwRmlsZSApIC4gJ2AuIC0tPic7CgovKmlmICggJHN0ZXAgPiAwICkgeyAvLyBMb2FkIHN0ZXBzIGFmdGVyIDAgaW4gaWZyYW1lLgoJZWNobyBwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ2ltcG9ydCddLT5zdGF0dXNfYm94KCAnSW1wb3J0QnVkZHkgdicgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2JiX3ZlcnNpb24nXSAuICcuLi4gUG93ZXJlZCBieSBCYWNrdXBCdWRkeS4nICk7CgllY2hvICc8aWZyYW1lIGlkPSJwYl9iYWNrdXBidWRkeV9tb2RhbF9pZnJhbWUiIG5hbWU9InBiX2JhY2t1cGJ1ZGR5X21vZGFsX2lmcmFtZSIgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBhZ2VfdXJsKCkgLiAnaW1wb3J0YnVkZHkucGhwP2FqYXg9JyAuICRzdGVwIC4gJyIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTgwMCIgZnJhbWVib3JkZXI9IjAiIHBhZGRpbmc9IjAiIG1hcmdpbj0iMCI+RXJyb3IgIzQ1ODQ1OTQ1NzkuIEJyb3dzZXIgbm90IGNvbXBhdGlibGUgd2l0aCBpZnJhbWVzLjwvaWZyYW1lPic7Cn0gZWxzZSB7CgkqLwoJaWYgKCBmaWxlX2V4aXN0cyggJHN0ZXBGaWxlICkgKSB7CgkJcmVxdWlyZV9vbmNlKCAkc3RlcEZpbGUgKTsKCX0gZWxzZSB7CgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIHN0ZXAgZmlsZSBgJyAuIGh0bWxlbnRpdGllcyggJHN0ZXAgKSAuICcucGhwJyAuICdgLn0nOwoJfQovL30KcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgc3RlcC4nICk7CnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS92aWV3cy9fZm9vdGVyLnBocCcgKTsKCnJldHVybjsKCg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/diagnostics.php,importbuddy/controllers/pages/diagnostics.php
PD9waHAKaWYgKCAhZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICkgeyAvLyBOT1QgSU4gSU1QT1JUQlVERFk6Cgl3cF9lbnF1ZXVlX3NjcmlwdCggJ3RoaWNrYm94JyApOwoJd3BfcHJpbnRfc2NyaXB0cyggJ3RoaWNrYm94JyApOwoJd3BfcHJpbnRfc3R5bGVzKCAndGhpY2tib3gnICk7Cgk/PgoJPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCS5iYWNrdXBidWRkeS1tZXRhLWxpbmstd3JhcCBhLnNob3ctc2V0dGluZ3MgewoJCWZsb2F0OiByaWdodDsKCQltYXJnaW46IDAgMCAwIDZweDsKCX0KCSNzY3JlZW4tbWV0YS1saW5rcyAuYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYSB7CgkJYmFja2dyb3VuZDogbm9uZTsKCX0KCSNzY3JlZW4tbWV0YS1saW5rcyAuYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYTphZnRlciB7CgkJY29udGVudDogJyc7CgkJbWFyZ2luLXJpZ2h0OiA1cHg7Cgl9Cgk8L3N0eWxlPgoKCTw/cGhwCglwYl9iYWNrdXBidWRkeTo6JHVpLT50aXRsZSggX18oICdEaWFnbm9zdGljcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7CgliYWNrdXBidWRkeV9jb3JlOjp2ZXJzaW9uc19jb25maXJtKCk7CgoJJGRlZmF1bHRfdGFiID0gMDsKCWlmICggaXNfbnVtZXJpYyggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICd0YWInICkgKSApIHsKCQkkZGVmYXVsdF90YWIgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3RhYicgKTsKCX0KCgllY2hvICcnOwoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFicygKCQknZ2V0dGluZ19zdGFydGVkJywKCQlhcnJheSgKCQkJYXJyYXkoCgkJCQkndGl0bGUnCQk9PgkJX18oICdTZXJ2ZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCSdzbHVnJwkJPT4JCSdzZXJ2ZXInLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ0RhdGFiYXNlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZGF0YWJhc2UnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1NpdGUgU2l6ZSBNYXBzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknZmlsZXMnLAoJCQkpLAoJCQlhcnJheSgKCQkJCSd0aXRsZScJCT0+CQlfXyggJ1dvcmRQcmVzcyBTY2hlZHVsZXMgKENyb24pJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQknc2x1ZycJCT0+CQknY3JvbicsCgkJCSksCgkJKSwKCQknd2lkdGg6IDEwMCU7JywKCQl0cnVlLAoJCSRkZWZhdWx0X3RhYgoJKTsKCgoKCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ3NlcnZlcicgKTsKCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2VydmVyLnBocCcgKTsKCgoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3Blcm1pc3Npb25zLnBocCcgKTsKCgoJCSR3cF91cGxvYWRfZGlyID0gd3BfdXBsb2FkX2RpcigpOwoJCSR3cF9zZXR0aW5ncyA9IGFycmF5KCk7CgoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydwYXRoJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBGaWxlIFBhdGgnLCAkd3BfdXBsb2FkX2RpclsncGF0aCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsndXJsJ10gKSApIHsKCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBVUkwnLCAkd3BfdXBsb2FkX2RpclsndXJsJ10sICd3cF91cGxvYWRfZGlyKCknICk7CgkJfQoJCWlmICggaXNzZXQoICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSApICkgewoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIFN1YmRpcmVjdG9yeScsICR3cF91cGxvYWRfZGlyWydzdWJkaXInXSwgJ3dwX3VwbG9hZF9kaXIoKScpOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBVUkwnLCAkd3BfdXBsb2FkX2RpclsnYmFzZXVybCddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddICkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgQmFzZSBEaXJlY3RvcnknLCAkd3BfdXBsb2FkX2RpclsnYmFzZWRpciddLCAnd3BfdXBsb2FkX2RpcigpJyApOwoJCX0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnU2l0ZSBVUkwnLCBzaXRlX3VybCgpLCAnc2l0ZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnSG9tZSBVUkwnLCBob21lX3VybCgpLCAnaG9tZV91cmwoKScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnV29yZFByZXNzIFJvb3QgUGF0aCcsIEFCU1BBVEgsICdBQlNQQVRIJyApOwoKCQkvLyBNdWx0aXNpdGUgZXh0cmFzOgoJCSR3cF9zZXR0aW5nc19tdWx0aXNpdGUgPSBhcnJheSgpOwoJCWlmICggaXNfbXVsdGlzaXRlKCkgKSB7CgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdOZXR3b3JrIFNpdGUgVVJMJywgbmV0d29ya19zaXRlX3VybCgpLCAnbmV0d29ya19zaXRlX3VybCgpJyApOwoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnTmV0d29yayBIb21lIFVSTCcsIG5ldHdvcmtfaG9tZV91cmwoKSwgJ25ldHdvcmtfaG9tZV91cmwoKScgKTsKCQl9CgoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdCYWNrdXBCdWRkeSBsb2NhbCBzdG9yYWdlJywgYmFja3VwYnVkZHlfY29yZTo6Z2V0QmFja3VwRGlyZWN0b3J5KCksICdCYWNrdXBCdWRkeSBTZXR0aW5ncycgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgdGVtcG9yYXJ5IGZpbGVzJywgYmFja3VwYnVkZHlfY29yZTo6Z2V0VGVtcERpcmVjdG9yeSgpLCAnVXBsb2FkIEJhc2UgKyBCYWNrdXBCdWRkeScgKTsKCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9ncycsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpLCAnVXBsb2FkIEJhc2UgKyBCYWNrdXBCdWRkeScgKTsKCgkJLy8gRGlzcGxheSBXUCBzZXR0aW5ncy4uCgkJcGJfYmFja3VwYnVkZHk6OiR1aS0+bGlzdF90YWJsZSgKCQkJJHdwX3NldHRpbmdzLAoJCQlhcnJheSgKCQkJCSdhY3Rpb24nCQkJCQk9PglwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSwKCQkJCSdjb2x1bW5zJwkJCQkJPT4JYXJyYXkoCgkJCQkJCQkJCQkJCQlfXyggJ1VSTHMgJiBQYXRocycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCQkJCQkJCQkJX18oICdPYnRhaW5lZCB2aWEnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCQkJCQkJCQkJKSwKCQkJCSdjc3MnCQkJCQkJPT4JCSd3aWR0aDogMTAwJTsnLAoJCQkpCgkJKTsKCgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoKCgoJLy8gVGhpcyBwYWdlIGNhbiB0YWtlIGEgYml0IHRvIHJ1bi4KCS8vIFJ1bnMgQUZURVIgc2VydmVyIGluZm9ybWF0aW9uIGlzIGRpc3BsYXllZCBzbyB3ZSBjYW4gdmlldyB0aGUgZGVmYXVsdCBsaW1pdHMgZm9yIHRoZSBzZXJ2ZXIuCglwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7CgoKCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWIoICdkYXRhYmFzZScgKTsKCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vZGF0YWJhc2UucGhwJyApOwoJCWVjaG8gJzxicj48YnI+PGEgbmFtZT0iZGF0YWJhc2VfcmVwbGFjZSI+PC9hPic7CgkJZWNobyAnPGRpdiBjbGFzcz0icGJfaHRpdGxlIj4nIC4gJ0FkdmFuY2VkOiAnIC4gX18oICdEYXRhYmFzZSBNYXNzIFRleHQgUmVwbGFjZW1lbnQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2Rpdj48YnI+JzsKCQlwYl9iYWNrdXBidWRkeTo6bG9hZF92aWV3KCAnX2RpYWdub3N0aWNzLWRhdGFiYXNlX3JlcGxhY2UnICk7CgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoKCgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZmlsZXMnICk7CgoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3NpdGVfc2l6ZS5waHAnICk7CgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoKCgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnY3JvbicgKTsKCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vY3Jvbi5waHAnICk7CgoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOwoKCgllY2hvICc8YnIgc3R5bGU9ImNsZWFyOiBib3RoOyI+PGJyPjxicj4nOwoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYnMoKTsKCgoKCS8vIEhhbmRsZXMgdGhpY2tib3ggYXV0by1yZXNpemluZy4gS2VlcCBhdCBib3R0b20gb2YgcGFnZSB0byBhdm9pZCBpc3N1ZXMuCglpZiAoICF3cF9zY3JpcHRfaXMoICdtZWRpYS11cGxvYWQnICkgKSB7CgkJd3BfZW5xdWV1ZV9zY3JpcHQoICdtZWRpYS11cGxvYWQnICk7CgkJd3BfcHJpbnRfc2NyaXB0cyggJ21lZGlhLXVwbG9hZCcgKTsKCX0KCn0gZWxzZSB7IC8vIElOU0lERSBJTVBPUlRCVUREWToKCWlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdza2lwX3NlcnZlcmluZm8nICkgPT0gJycgKSB7IC8vIEdpdmUgYSB3b3JrYXJvdW5kIHRvIHNraXAgdGhpcy4KCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9zZXJ2ZXIucGhwJyApOwoJfSBlbHNlIHsKCQllY2hvICd7U2tpcHBpbmcgU2VydmVyIEluZm8uIHNlY3Rpb24gYmFzZWQgb24gcXVlcnlzdHJpbmcufSc7Cgl9Cn0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/diagnostics.php,importbuddy/controllers/pages/diagnostics.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
PD9waHAKLyoqCiAqIExvZ2luIFBhZ2UKICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkKICovCgo/Pgo8c2NyaXB0PmpRdWVyeSggJyNwYWdlVGl0bGUnICkuaHRtbCggJ0F1dGhlbnRpY2F0aW9uIFJlcXVpcmVkJyApOzwvc2NyaXB0Pgo8P3BocAppZiAoICcnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICkgewoJZ2xvYmFsICRwYl9sb2dpbl9hdHRlbXB0czsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ludmFsaWQgcGFzc3dvcmQuIFBsZWFzZSBlbnRlciB0aGUgcGFzc3dvcmQgeW91IHByb3ZpZGVkIHdpdGhpbiBCYWNrdXBCdWRkeSBTZXR0aW5ncy4gQXR0ZW1wdCAjJyAuICRwYl9sb2dpbl9hdHRlbXB0cyAuICcuJyApOwoJZWNobyAnPGJyPic7Cn0KCmlmICggISBpc19jYWxsYWJsZSggJ2pzb25fZGVjb2RlJyApICkgewoJJG1lc3NhZ2UgPSAnRXJyb3IgIzg0Mzk4NDM0OiBNaXNzaW5nIHJlcXVpcmVkIFBIUCBmdW5jdGlvbiBqc29uX2RlY29kZSgpLiBZb3VyIFBIUCB2ZXJzaW9uIGlzIHRvbyBvbGQgb3IgZGFtYWdlZC4gSXQgaXMgTk9UIGNvbXBhdGlibGUgd2l0aCBXb3JkUHJlc3MgYXMgaXQgaXMuIFBsZWFzZSBjb250YWN0IHlvdXIgaG9zdCB0byBmaXggdGhpcy4nOwoJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJG1lc3NhZ2UsIHRydWUgKTsKfQo/PgoKPHA+RW50ZXIgeW91ciBJbXBvcnRCdWRkeSBwYXNzd29yZCBiZWxvdyB0byBiZWdpbi48L3A+Cgo8YnI+Cgo8Zm9ybSBtZXRob2Q9InBvc3QiIGlkPSJpbXBvcnRidWRkeS1hdXRoLWZvcm0iPgoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ibG9naW4iPgoJPGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgc3R5bGU9IndpZHRoOiAyNTBweDsgdmVydGljYWwtYWxpZ246IC0ycHg7Ij4KCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IkF1dGhlbnRpY2F0ZSIgY2xhc3M9Iml0LWJ1dHRvbiI+Cgk8YnV0dG9uIGhyZWY9IiNwYl9mb3Jnb3RwYXNzd29yZF9tb2RhbCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tc2Vjb25kYXJ5IGxlYW5Nb2RhbCBjcmVhdGVkYl9tb2RhbF9saW5rIj5Gb3Jnb3QgUGFzc3dvcmQ/PC9idXR0b24+CjwvZm9ybT4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCWpRdWVyeShmdW5jdGlvbigpIHsKCQlqUXVlcnkoICcjaW1wb3J0YnVkZHktYXV0aC1mb3JtIGlucHV0W3R5cGU9cGFzc3dvcmRdJyApLmZvY3VzKCk7CgoJCWpRdWVyeSgnLmxlYW5Nb2RhbCcpLmxlYW5Nb2RhbCgKCQkJeyB0b3AgOiA0NSwgb3ZlcmxheSA6IDAuNCwgY2xvc2VCdXR0b246ICIubW9kYWxfY2xvc2UiIH0KCQkpOwoKCQlqUXVlcnkoICcjY3JlYXRlcGFzc19mb3JtJyApLnN1Ym1pdChmdW5jdGlvbigpewoKCQkJaWYgKCBqUXVlcnkoICcjbmV3X3Bhc3MnICkudmFsKCkgIT0galF1ZXJ5KHRoaXMpLmZpbmQoICcjbmV3X3Bhc3NfY29uZmlybScgKS52YWwoKSApIHsKCQkJCWFsZXJ0KCAnUGFzc3dvcmQgYW5kIGNvbmZpcm1hdGlvbiBkbyBub3QgbWF0Y2guJyApOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQlpZiAoICcnID09PSBqUXVlcnkoICcjbmV3X3Bhc3MnICkudmFsKCkgKSB7CgkJCQlhbGVydCggJ1lvdSBtdXN0IHByb3ZpZGUgYSBuZXcgcGFzc3dvcmQuJyApOwoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQlqUXVlcnkoICcuY3JlYXRlcGFzc19sb2FkaW5nJyApLnNob3coKTsKCQkJalF1ZXJ5LnBvc3QoJ2ltcG9ydGJ1ZGR5LnBocD9hamF4PWhhc2hfZm9yZ290cGFzcycsCgkJCXsKCQkJCW5ld3Bhc3N3b3JkOiBqUXVlcnkoICcjbmV3X3Bhc3MnICkudmFsKCksCgkJCX0sIGZ1bmN0aW9uKGRhdGEpIHsKCgkJCQkJZGF0YSA9IGpRdWVyeS50cmltKCBkYXRhICk7CgkJCQkJalF1ZXJ5KCAnLmNyZWF0ZXBhc3NfbG9hZGluZycgKS5oaWRlKCk7CgoJCQkJCWpRdWVyeSggJy5mb3Jnb3RwYXNzX2Zvcm1fd3JhcCcgKS5oaWRlKCk7CgkJCQkJalF1ZXJ5KCAnLmZvcmdvdHBhc3NfZmluaXNoX2hhc2gnKS52YWwoIGRhdGEgKTsKCQkJCQlqUXVlcnkoICcuZm9yZ290cGFzc19maW5pc2hfd3JhcCcgKS5zaG93KCk7CgkJCQl9CgkJCSk7CgoJCQlyZXR1cm4gZmFsc2U7CgoJCX0pOwoJfSk7Cjwvc2NyaXB0PgoKPGRpdiBpZD0icGJfZm9yZ290cGFzc3dvcmRfbW9kYWwiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+Cgk8ZGl2IGNsYXNzPSJtb2RhbCI+CgkJPGRpdiBjbGFzcz0ibW9kYWxfaGVhZGVyIj4KCQkJPGEgY2xhc3M9Im1vZGFsX2Nsb3NlIj4mdGltZXM7PC9hPgoJCQk8aDI+UGFzc3dvcmQgUmVzZXQ8L2gyPgoJCQlBZnRlciBzdWJtaXR0aW5nIHlvdSB3aWxsIG5lZWQgdG8gZWRpdCB5b3VyIGltcG9ydGJ1ZGR5LnBocCBmaWxlIG9uIHRoaXMgc2VydmVyIGFuZCBlZGl0IGEgbGluZSBvZiBjb2RlIHdpdGggYSBoYXNoZWQgdmVyc2lvbiBvZiB0aGlzIHBhc3N3b3JkLgoJCTwvZGl2PgoJCTxkaXYgY2xhc3M9Im1vZGFsX2NvbnRlbnQiPgoKCgkJCTxkaXYgY2xhc3M9ImZvcmdvdHBhc3NfZm9ybV93cmFwIj4KCgoJCQkJPGNlbnRlcj4KCQkJCQk8Zm9ybSBpZD0iY3JlYXRlcGFzc19mb3JtIj4KCQkJCQkJPHRhYmxlPgoJCQkJCQkJPHRyPgoJCQkJCQkJCTx0ZD5OZXcgUGFzc3dvcmQ8L3RkPjx0ZD48aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9Im5ld3Bhc3N3b3JkIiBpZD0ibmV3X3Bhc3MiPjwvdGQ+CgkJCQkJCQk8L3RyPgoJCQkJCQkJPHRyPgoJCQkJCQkJCTx0ZD5Db25maXJtIFBhc3N3b3JkPC90ZD48dGQ+PGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJuZXdwYXNzd29yZF9jb25maXJtIiBpZD0ibmV3X3Bhc3NfY29uZmlybSI+PC90ZD4KCQkJCQkJCTwvdHI+CgkJCQkJCTwvdGFibGU+CgkJCQkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9InN1Ym1pdCIgdmFsdWU9IlN1Ym1pdCIgY2xhc3M9ImJ1dHRvbi1wcmltYXJ5Ij4KCQkJCQk8L2Zvcm0+CgkJCQkJPHNwYW4gY2xhc3M9ImNyZWF0ZXBhc3NfbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmcuZ2lmIiBhbHQ9IidMb2FkaW5nLi4uIiB0aXRsZT0iTG9hZGluZy4uLiIgd2lkdGg9IjE2IiBoZWlnaHQ9IjE2IiBzdHlsZT0idmVydGljYWwtYWxpZ246IC0zcHg7Ij48L3NwYW4+CgkJCQk8L2NlbnRlcj4KCgkJCTwvZGl2PgoKCgkJCTxkaXYgY2xhc3M9ImZvcmdvdHBhc3NfZmluaXNoX3dyYXAiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CgkJCQlUbyBlbmFibGUgdGhpcyBuZXcgcGFzc3dvcmQgZm9yIGFjY2Vzc2luZyBpbXBvcnRidWRkeS5waHAgb3BlbiBpbXBvcnRidWRkeS5waHAgaW4gYSB0ZXh0IGVkaXRvciBhbmQgZmluZCBsaW5lIDEzIHRoYXQgbG9va3MgbGlrZSB0aGUgZm9sbG93aW5nLCByZXBsYWNpbmcgdGhlIFgncyBpbiB0aGlzIGxpbmUgd2l0aCB0aGUgcGFzc3dvcmQgaGFzaCBjb2RlIGJlbG93LiBNYWtlIHN1cmUgeW91IHJlLXNhdmUgdGhpcyBlZGl0ZWQgdmVyc2lvbiB0byB0aGUgc2VydmVyIHRoZW4gcmVmcmVzaCB0aGlzIHBhZ2UgdG8gbG9nIGluLjxicj48YnI+CgoJCQkJPGk+ZGVmaW5lKCAnUEJfUEFTU1dPUkQnLCAnWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFgnICk7PC9pPjxicj48YnI+CgoJCQkJPGI+TmV3IHBhc3N3b3JkIGhhc2ggY29kZTo8L2I+PGJyPgoJCQkJPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3Jnb3RwYXNzX2ZpbmlzaF9oYXNoIiB2YWx1ZT0iIiByZWFkb25seT0icmVhZG9ubHkiIHNpemU9IjQwIj4KCQkJPC9kaXY+CgoKCQk8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
PD9waHAKaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIHRydWUgIT09IFBCX0lNUE9SVEJVRERZICkgKSB7CglkaWUoICc8aHRtbD48L2h0bWw+JyApOwp9CkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uCgpyZXF1aXJlX29uY2UoIEFCU1BBVEggLidpbXBvcnRidWRkeS92aWV3cy9faGVhZGVyLnBocCcgKTsKPz4KPHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdTZXJ2ZXIgSW5mb3JtYXRpb24nICk7PC9zY3JpcHQ+Cgo8ZGl2IGNsYXNzPSJ3cmFwIj4KCTw/cGhwCglnbG9iYWwgJGRldGVjdGVkX21heF9leGVjdXRpb25fdGltZTsKCXJlcXVpcmVfb25jZSggJ2RpYWdub3N0aWNzLnBocCcgKTsKCT8+CjwvZGl2PgoKPD9waHAKcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4naW1wb3J0YnVkZHkvdmlld3MvX2Zvb3Rlci5waHAnICk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
###PACKDATA,FILE_START,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php

###PACKDATA,FILE_END,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php
###PACKDATA,FILE_START,/classes/core.php,importbuddy/classes/core.php

###PACKDATA,FILE_END,/classes/core.php,importbuddy/classes/core.php
###PACKDATA,FILE_START,/classes/import.php,importbuddy/classes/import.php
PD9waHAKY2xhc3MgcGJfYmFja3VwYnVkZHlfaW1wb3J0IHsKCQoJCgkKCQoJCgkKCQoJLyoqCgkgKgl3aXBlUHJlZml4KCkKCSAqCgkgKglDbGVhciBvdXQgdGFibGVzIG1hdGNoaW5nIHN1cHBsaWVkIHByZWZpeC4KCSAqCgkgKglAcmV0dXJuCQkJYm9vbGVhbgkJQ3VycmVudGx5IGFsd2F5cyB0cnVlLgoJICovCglmdW5jdGlvbiB3aXBlUHJlZml4KCAkcHJlZml4LCAkY29uZmlybSA9IGZhbHNlICkgewoJCWlmICggJGNvbmZpcm0gIT09IHRydWUgKSB7CgkJCWRpZSggJ0Vycm9yICM1NDY2NTY2YjogUGFyYW1ldGVyIDIgdG8gd2lwZVByZWZpeCgpIG11c3QgYmUgYm9vbGVhbiB0cnVlIHRvIHByb2NlZWQuJyApOwoJCX0KCQkKCQlpZiAoICRwcmVmaXggPT0gJycgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJ05vIGRhdGFiYXNlIHByZWZpeCBzcGVjaWZpZWQgdG8gd2lwZS4nICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnQmVnaW5uaW5nIHdpcGUgb2YgZGF0YWJhc2UgdGFibGVzIG1hdGNoaW5nIHByZWZpeCBgJyAuICRwcmVmaXggLiAnYC4uLicgKTsKCQkKCQkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLgoJCS8vJHRoaXMtPmNvbm5lY3RfZGF0YWJhc2UoKTsKCQkKCQlnbG9iYWwgJHdwZGI7CgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTRUxFQ1QgdGFibGVfbmFtZSBBUyBgdGFibGVfbmFtZWAgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIFdIRVJFIHRhYmxlX25hbWUgTElLRSAnIiAuIGJhY2t1cGJ1ZGR5X2NvcmU6OmRiRXNjYXBlKCBzdHJfcmVwbGFjZSggJ18nLCAnXF8nLCAkcHJlZml4ICkgKSAuICIlJyBBTkQgdGFibGVfc2NoZW1hID0gREFUQUJBU0UoKSIsIEFSUkFZX0EgKTsKCQkkdGFibGVfd2lwZV9jb3VudCA9IGNvdW50KCAkcm93cyApOwoJCWZvcmVhY2goICRyb3dzIGFzICRyb3cgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0Ryb3BwaW5nIHRhYmxlIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AuJyApOwoJCQkkd3BkYi0+cXVlcnkoICdEUk9QIFRBQkxFIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AnICk7CgkJfQoJCXVuc2V0KCAkcm93cyApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ1dpcGVkIGRhdGFiYXNlIG9mICcgLiAkdGFibGVfd2lwZV9jb3VudCAuICcgdGFibGVzLicgKTsKCQkKCQlyZXR1cm4gdHJ1ZTsKCX0gLy8gRW5kIHdpcGVQcmVmaXgoKS4KCQoJCgkKCS8qKgoJICoJd2lwZURhdGFiYXNlKCkKCSAqCgkgKglDbGVhciBvdXQgdGhlIGV4aXN0aW5nIGRhdGFiYXNlIHRvIHByZXBhcmUgZm9yIGltcG9ydGluZyBuZXcgZGF0YS4KCSAqCgkgKglAcmV0dXJuCQkJYm9vbGVhbgkJQ3VycmVudGx5IGFsd2F5cyB0cnVlLgoJICovCglmdW5jdGlvbiB3aXBlRGF0YWJhc2UoICRjb25maXJtID0gZmFsc2UgKSB7CgkJaWYgKCAkY29uZmlybSAhPT0gdHJ1ZSApIHsKCQkJZGllKCAnRXJyb3IgIzU0NjY1NjZhOiBQYXJhbWV0ZXIgMSB0byB3aXBlRGRhdGFiYXNlKCkgbXVzdCBiZSBib29sZWFuIHRydWUgdG8gcHJvY2VlZC4nICk7CgkJfQoJCQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0JlZ2lubmluZyB3aXBlIG9mIEFMTCBkYXRhYmFzZSB0YWJsZXMuLi4nICk7CgkJCgkJLy8gQ29ubmVjdCB0byBkYXRhYmFzZS4KCQkvLyR0aGlzLT5jb25uZWN0X2RhdGFiYXNlKCk7CgkJCgkJZ2xvYmFsICR3cGRiOwoJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCAiU0VMRUNUIHRhYmxlX25hbWUgQVMgYHRhYmxlX25hbWVgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyBXSEVSRSB0YWJsZV9zY2hlbWEgPSBEQVRBQkFTRSgpIiwgQVJSQVlfQSApOwoJCSR0YWJsZV93aXBlX2NvdW50ID0gY291bnQoICRyb3dzICk7CgkJZm9yZWFjaCggJHJvd3MgYXMgJHJvdyApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRHJvcHBpbmcgdGFibGUgYCcgLiAkcm93Wyd0YWJsZV9uYW1lJ10gLiAnYC4nICk7CgkJCSR3cGRiLT5xdWVyeSggJ0RST1AgVEFCTEUgYCcgLiAkcm93Wyd0YWJsZV9uYW1lJ10gLiAnYCcgKTsKCQl9CgkJdW5zZXQoICRyb3dzICk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnV2lwZWQgZGF0YWJhc2Ugb2YgJyAuICR0YWJsZV93aXBlX2NvdW50IC4gJyB0YWJsZXMuJyApOwoJCQoJCXJldHVybiB0cnVlOwoJfSAvLyBFbmQgd2lwZURhdGFiYXNlKCkuCgkKCQoJCgkvKglwcmVnX2VzY2FwZV9iYWNrKCkKCSAqCQoJICoJRXNjYXBlIGJhY2tyZWZlcmVuY2VzIGZyb20gc3RyaW5nIGZvciB1c2Ugd2l0aCByZWdleC4gVXNlZCBieSBtaWdyYXRlX3dwX2NvbmZpZygpLgoJICoJQHNlZSBtaWdyYXRlX3dwX2NvbmZpZygpCgkgKgkKCSAqCUBwYXJhbQkJc3RyaW5nCQkkc3RyaW5nCQlTdHJpbmcgdG8gZXNjYXBlLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlFc2NhcGVkIHN0cmluZy4KCSAqLwoJZnVuY3Rpb24gcHJlZ19lc2NhcGVfYmFjaygkc3RyaW5nKSB7CgkJLy8gUmVwbGFjZSAkIHdpdGggXCQgYW5kIFwgd2l0aCBcXAoJCSRzdHJpbmcgPSBwcmVnX3JlcGxhY2UoJyMoPzwhXFxcXCkoXFwkfFxcXFwpIycsICdcXFxcJDEnLCAkc3RyaW5nKTsKCQlyZXR1cm4gJHN0cmluZzsKCX0gLy8gRW5kIHByZWdfZXNjYXBlX2JhY2soKS4KCQoJCgkKCQoJCgkKCQoJLy8gVE9ETzogc3dpdGNoIHRvIHVzaW5nIHBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXNfYm94KCkgaW5zdGVhZC4KCS8qKgoJICoJc3RhdHVzX2JveCgpCgkgKgoJICoJRGlzcGxheXMgYSB0ZXh0YXJlYSBmb3IgcGxhY2luZyBzdGF0dXMgdGV4dCBpbnRvLgoJICoKCSAqCUBwYXJhbQkJCSRkZWZhdWx0X3RleHQJc3RyaW5nCQlGaXJzdCBsaW5lIG9mIHRleHQgdG8gZGlzcGxheS4KCSAqCUBwYXJhbQkJCWJvb2xlYW4JCQkkaGlkZGVuCQlXaGV0aGVyIG9yIG5vdCB0byBhcHBseSBkaXNwbGF5OiBub25lOyBDU1MuCgkgKglAcmV0dXJuCQkJCQkJCXN0cmluZwkJSFRNTCBmb3IgdGV4dGFyZWEuCgkgKi8KCWZ1bmN0aW9uIHN0YXR1c19ib3goICRkZWZhdWx0X3RleHQgPSAnJywgJGhpZGRlbiA9IGZhbHNlICkgewoJCWRlZmluZSggJ1BCX1NUQVRVUycsIHRydWUgKTsgLy8gVGVsbHMgZnJhbWV3b3JrIHN0YXR1cygpIGZ1bmN0aW9uIHRvIG91dHB1dCBmdXR1cmUgbG9nZ2luZyBpbmZvIGludG8gc3RhdHVzIGJveCB2aWEgamF2YXNjcmlwdC4KCQkkcmV0dXJuID0gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3N0YXR1c193cmFwIiBzdHlsZT0icGFkZGluZzogMDsiPjxwcmUgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0iYmFja3VwYnVkZHlfbWVzc2FnZXMiIHdyYXA9Im9mZiInOwoJCWlmICggJGhpZGRlbiA9PT0gdHJ1ZSApIHsKCQkJJHJldHVybiAuPSAnIHN0eWxlPSJkaXNwbGF5OiBub25lOyAiJzsKCQl9CgkJJHJldHVybiAuPSAnPicgLiAkZGVmYXVsdF90ZXh0IC4gJzwvcHJlPic7CgkJJHJldHVybiAuPSAnPGRpdiBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+CgkJCTxidXR0b24gY2xhc3M9ImJ1dHRvbiBidXR0b24tcHJpbWFyeSIgb25DbGljaz0iYmFja3VwYnVkZHlfc2F2ZUxvZ0FzRmlsZSgpOyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IGF1dG87IGRpc3BsYXk6IGluaGVyaXQ7IGZvbnQtc2l6ZTogMC45ZW07Ij5Eb3dubG9hZCBTdGF0dXMgTG9nICgudHh0KTwvYnV0dG9uPgoJCTwvZGl2Pic7CgkJJHJldHVybiAuPSAnPC9kaXY+JzsKCQkKCQlyZXR1cm4gJHJldHVybjsKCX0KCQoJCgkKCQoJCgkKfSAvLyBFbmQgY2xhc3MuCj8+Cg==
###PACKDATA,FILE_END,/classes/import.php,importbuddy/classes/import.php
###PACKDATA,FILE_START,/classes/restore.php,importbuddy/classes/restore.php

###PACKDATA,FILE_END,/classes/restore.php,importbuddy/classes/restore.php
###PACKDATA,FILE_START,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
PD9waHAKY2xhc3MgYmFja3VwYnVkZHlfcmVzdG9yZV9maWxlcyB7CgoJLyogcmVzdG9yZSgpCgkgKgoJICogUmVzdG9yZSBvbmUgb3IgbW9yZSBmaWxlcyB0byBhIHBhdGguCgkgKgoJICogQHBhcmFtCSRhcmNoaXZlX2ZpbGUJQmFja3VwIHppcCBhcmNoaXZlIGZpbGUgdG8gcmVzdG9yZSBmaWxlcyBmcm9tLgoJICogQHBhcmFtCSRmaWxlcwkJCUFycmF5IG9mIGZpbGVzIHRvIHJlc3RvcmUuIEVhY2gga2V5IGFuZCB2YWx1ZSBtdXN0IGJlIHRoZSBzYW1lLiBGb3JtYXQ6IGFycmF5KCAnZmlsZW5hbWUudHh0JyA9PiAnZmlsZW5hbWUudHh0JyApOwoJICogQHBhcmFtCSRmaW5hbFBhdGgJCURlc3RpbmF0aW9uIHBhdGggdG8gZXh0cmFjdCBpbnRvLgoJICogQHJldHVybglib29sCQkJVHJ1ZSBvbiBzdWNjZXNzLCBlbHNlIGZhbHNlLgoJICoKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZXN0b3JlKCAkYXJjaGl2ZV9maWxlLCAkZmlsZXMsICRmaW5hbFBhdGgsICYkemlwYnVkZHkgPSBudWxsICkgewoJCWlmICggISBwYl9pc19zdGFuZGFsb25lKCkgKSB7CgkJCWlmICggISBjdXJyZW50X3VzZXJfY2FuKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JvbGVfYWNjZXNzJ10gKSApIHsKCQkJCWRpZSggJ0Vycm9yICM0NzM2MjMuIEFjY2VzcyBEZW5pZWQuJyApOwoJCQl9CgkJfQoKCQkkc2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRhcmNoaXZlX2ZpbGUgKTsgLy8gc2VyaWFsIG9mIGFyY2hpdmUuCgkJJHN1Y2Nlc3MgPSBmYWxzZTsKCgkJZm9yZWFjaCggJGZpbGVzIGFzICRmaWxlICkgewoJCQkkZmlsZSA9IHN0cl9yZXBsYWNlKCAnKicsICcnLCAkZmlsZSApOyAvLyBSZW1vdmUgYW55IHdpbGRjYXJkLgoJCQlpZiAoIGZpbGVfZXhpc3RzKCAkZmluYWxQYXRoIC4gJGZpbGUgKSAmJiBpc19kaXIoICRmaW5hbFBhdGggLiAkZmlsZSApICkgewoJCQkJaWYgKCAoICRmaWxlX2NvdW50ID0gQHNjYW5kaXIoICRmaW5hbFBhdGggLiAkZmlsZSApICkgJiYgKCBjb3VudCggJGZpbGVfY291bnQgKSA+IDIgKSApIHsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCBfXyggJ0Vycm9yICM5MDM2LiBUaGUgZGVzdGluYXRpb24gZGlyZWN0b3J5IGJlaW5nIHJlc3RvcmVkIGFscmVhZHkgZXhpc3RzIGFuZCBpcyBOT1QgZW1wdHkuIFRoZSBkaXJlY3Rvcnkgd2lsbCBub3QgYmUgcmVzdG9yZWQgdG8gcHJldmVudCBpbmFkdmVydGVudGx5IGxvc2luZyBmaWxlcyB3aXRoaW4gdGhlIGV4aXN0aW5nIGRpcmVjdG9yeS4gRGVsZXRlIGV4aXN0aW5nIGRpcmVjdG9yeSBmaXJzdCBpZiB5b3Ugd2lzaCB0byBwcm9jZWVkIG9yIHJlc3RvcmUgaW5kaXZpZHVhbCBmaWxlcy4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICcgRXhpc3RpbmcgZGlyZWN0b3J5OiBgJyAuICRmaW5hbFBhdGggLiAkZmlsZSAuICdgLicgKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCX0KCQl9CgoKCQlpZiAoIG51bGwgPT09ICR6aXBidWRkeSApIHsKCQkJcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3ppcGJ1ZGR5L3ppcGJ1ZGR5LnBocCcgKTsKCQkJJHppcGJ1ZGR5ID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCBiYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSApOwoJCX0KCgoJCS8vIENhbGN1bGF0ZSB0ZW1wIGRpcmVjdG9yeSAmIGxvY2sgaXQgZG93bi4KCQkkdGVtcF9kaXIgPSBnZXRfdGVtcF9kaXIoKTsKCQkkZGVzdGluYXRpb24gPSAkdGVtcF9kaXIgLiAnYmFja3VwYnVkZHktJyAuICRzZXJpYWw7CgkJaWYgKCAoICggISBmaWxlX2V4aXN0cyggJGRlc3RpbmF0aW9uICkgKSAmJiAoIGZhbHNlID09PSBta2RpciggJGRlc3RpbmF0aW9uLCAwNzc3LCB0cnVlICkgKSApICkgewoJCQkkZXJyb3IgPSAnRXJyb3IgIzQ1ODQ4NTk0NTogVW5hYmxlIHRvIGNyZWF0ZSB0ZW1wb3JhcnkgbG9jYXRpb24gYCcgLiAkZGVzdGluYXRpb24gLiAnYC4gQ2hlY2sgcGVybWlzc2lvbnMuJzsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGVycm9yICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoKCQkvLyBJZiB0ZW1wIGRpcmVjdG9yeSBpcyB3aXRoaW4gd2Vicm9vdCB0aGVuIGxvY2sgaXQgZG93bi4KCQkkdGVtcF9kaXIgPSBzdHJfcmVwbGFjZSggJ1xcJywgJy8nLCAkdGVtcF9kaXIgKTsgLy8gTm9ybWFsaXplIGZvciBXaW5kb3dzLgoJCSR0ZW1wX2RpciA9IHJ0cmltKCAkdGVtcF9kaXIsICcvXFwnICkgLiAnLyc7IC8vIEVuZm9yY2Ugc2luZ2xlIHRyYWlsaW5nIHNsYXNoLgoJCWlmICggRkFMU0UgIT09IHN0cmlzdHIoICR0ZW1wX2RpciwgQUJTUEFUSCApICkgeyAvLyBUZW1wIGRpciBpcyB3aXRoaW4gd2Vicm9vdC4KCQkJcGJfYmFja3VwYnVkZHk6OmFudGlfZGlyZWN0b3J5X2Jyb3dzaW5nKCAkZGVzdGluYXRpb24gKTsKCQl9CgkJdW5zZXQoICR0ZW1wX2RpciApOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0V4dHJhY3RpbmcgaW50byB0ZW1wb3JhcnkgZGlyZWN0b3J5ICInIC4gJGRlc3RpbmF0aW9uIC4gJyIuJyApOwoKCQkkcHJldHR5RmlsZXNMaXN0ID0gYXJyYXkoKTsKCQlmb3JlYWNoKCAkZmlsZXMgYXMgJGZpbGVTb3VyY2UgPT4gJGZpbGVEZXN0aW5hdGlvbiApIHsKCQkJJHByZXR0eUZpbGVzTGlzdFtdID0gJGZpbGVTb3VyY2UgLiAnID0+ICcgLiAkZmlsZURlc3RpbmF0aW9uOwoJCX0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaWxlcyB0byBleHRyYWN0OiBgJyAuIGh0bWxlbnRpdGllcyggaW1wbG9kZSggJywgJywgJHByZXR0eUZpbGVzTGlzdCApICkgLiAnYC4nICk7CgkJdW5zZXQoICRwcmV0dHlGaWxlc0xpc3QgKTsKCgkJcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7CgoJCS8vIERvIHRoZSBhY3R1YWwgZXh0cmFjdGlvbi4KCQkkZXh0cmFjdF9zdWNjZXNzID0gdHJ1ZTsKCQlpZiAoIGZhbHNlID09PSAkemlwYnVkZHktPmV4dHJhY3QoICRhcmNoaXZlX2ZpbGUsICRkZXN0aW5hdGlvbiwgJGZpbGVzICkgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdFcnJvciAjNTg0OTg0NDU4Yi4gVW5hYmxlIHRvIGV4dHJhY3QuJyApOwoJCQkkZXh0cmFjdF9zdWNjZXNzID0gZmFsc2U7CgkJfQoKCQlpZiAoIHRydWUgPT09ICRleHRyYWN0X3N1Y2Nlc3MgKSB7CgoJCQkvLyBWZXJpZnkgYWxsIGZpbGVzL2RpcmVjdG9yaWVzIHRvIGJlIGV4dHJhY3RlZCBleGlzdCBpbiB0ZW1wIGRlc3RpbmF0aW9uIGRpcmVjdG9yeS4gSWYgYW55IG1pc3NpbmcgdGhlbiBkZWxldGUgZXZlcnl0aGluZyBhbmQgYmFpbCBvdXQuCgkJCWZvcmVhY2goICRmaWxlcyBhcyAmJGZpbGUgKSB7CgkJCQkkZmlsZSA9IHN0cl9yZXBsYWNlKCAnKicsICcnLCAkZmlsZSApOyAvLyBSZW1vdmUgYW55IHdpbGRjYXJkLgoJCQkJaWYgKCAhIGZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb24gLiAnLycgLiAkZmlsZSApICkgewoJCQkJCS8vIENsZWFudXAuCgkJCQkJZm9yZWFjaCggJGZpbGVzIGFzICRmaWxlICkgewoJCQkJCQlAdHJpZ2dlcl9lcnJvciggJycgKTsgLy8gQ2xlYXIgb3V0IGxhc3QgZXJyb3IuCgkJCQkJCUB1bmxpbmsoICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlKTsKCQkJCQkJJGxhc3RfZXJyb3IgPSBlcnJvcl9nZXRfbGFzdCgpOwoJCQkJCQlpZiAoIGlzX2FycmF5KCAkbGFzdF9lcnJvciApICkgewoJCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGxhc3RfZXJyb3JbJ21lc3NhZ2UnXSAuICcgRmlsZTogYCcgLiAkbGFzdF9lcnJvclsnZmlsZSddIC4gJ2AuIExpbmU6IGAnIC4gJGxhc3RfZXJyb3JbJ2xpbmUnXSAuICdgLicgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzg1NDc4MzQ3NC4gT25lIG9yIG1vcmUgZXhwZWN0ZWQgZmlsZXMgLyBkaXJlY3RvcmllcyBtaXNzaW5nLicgKTsKCgkJCQkJJGV4dHJhY3Rfc3VjY2VzcyA9IGZhbHNlOwoJCQkJCWJyZWFrOwoJCQkJfQoJCQl9CgkJCXVuc2V0KCAkZmlsZSApOwoKCQkJLy8gTWFkZSBpdCB0aGlzIGZhciBzbyBmaWxlcyBhbGwgZXhpc3QuIE1vdmUgdGhlbSBhbGwuCgkJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsKCQkJCUB0cmlnZ2VyX2Vycm9yKCAnJyApOyAvLyBDbGVhciBvdXQgbGFzdCBlcnJvci4KCQkJCWlmICggZmFsc2UgPT09IHBiX2JhY2t1cGJ1ZGR5OjokZmlsZXN5c3RlbS0+cmVjdXJzaXZlX2NvcHkoICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlLCAkZmluYWxQYXRoIC4gJGZpbGUgKSApIHsKCQkJCQkkbGFzdF9lcnJvciA9IGVycm9yX2dldF9sYXN0KCk7CgkJCQkJaWYgKCBpc19hcnJheSggJGxhc3RfZXJyb3IgKSApIHsKCQkJCQkJLy9wcmludF9yKCAkbGFzdF9lcnJvciApOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbGFzdF9lcnJvclsnbWVzc2FnZSddIC4gJyBGaWxlOiBgJyAuICRsYXN0X2Vycm9yWydmaWxlJ10gLiAnYC4gTGluZTogYCcgLiAkbGFzdF9lcnJvclsnbGluZSddIC4gJ2AuJyApOwoJCQkJCX0KCQkJCQkkZXJyb3IgPSAnRXJyb3IgIzkwMzUuIFVuYWJsZSB0byBjb3B5cmVzdG9yZWQgZmlsZSBgJyAuICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlIC4gJ2AgdG8gYCcgLiAkZmluYWxQYXRoIC4gJGZpbGUgLiAnYC4gVmVyaWZ5IHBlcm1pc3Npb25zIG9uIGRlc3RpbmF0aW9uIGxvY2F0aW9uICYgdGhhdCB0aGUgZGVzdGluYXRpb24gZGlyZWN0b3J5L2ZpbGUgZG9lcyBub3QgYWxyZWFkeSBleGlzdC4nOwoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOwoJCQkJfSBlbHNlIHsKCQkJCQkkZGV0YWlscyA9ICdSZWN1cnNpdmVseSBtb3ZlZCBgJyAuICRkZXN0aW5hdGlvbiAuICcvJyAuICRmaWxlIC4gJ2AgdG8gYCcgLiAkZmluYWxQYXRoIC4gJGZpbGUgLiAnYC48YnI+JzsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICRkZXRhaWxzICk7CgkJCQkJJHN1Y2Nlc3MgPSB0cnVlOwoJCQkJfQoJCQl9CgoJCX0gLy8gZW5kIGV4dHJhY3Qgc3VjY2Vzcy4KCgoJCS8vIFRyeSB0byBjbGVhbnVwLgoJCWlmICggZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbiApICkgewoJCQlpZiAoIGZhbHNlID09PSBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0tPnVubGlua19yZWN1cnNpdmUoICRkZXN0aW5hdGlvbiApICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVW5hYmxlIHRvIGRlbGV0ZSB0ZW1wb3JhcnkgaG9sZGluZyBkaXJlY3RvcnkgYCcgLiAkZGVzdGluYXRpb24gLiAnYC4nICk7CgkJCX0gZWxzZSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDbGVhbmVkIHVwIHRlbXBvcmFyeSBmaWxlcy4nICk7CgkJCX0KCQl9CgoKCQlpZiAoIHRydWUgPT09ICRzdWNjZXNzICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdGaWxlIHJldHJpZXZhbCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LicgKTsKCQkJcmV0dXJuIHRydWU7CgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgl9IC8vIEVuZCBmdW5jdGlvbiByZXN0b3JlKCkuCgp9IC8vIEVuZCBjbGFzcy4=
###PACKDATA,FILE_END,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
###PACKDATA,FILE_START,/classes/remote_api.php,importbuddy/classes/remote_api.php
PD9waHAKcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvY2xhc3Nlcy9jb3JlLnBocCcgKTsKCgpjbGFzcyBiYWNrdXBidWRkeV9yZW1vdGVfYXBpIHsKCglwcml2YXRlIHN0YXRpYyAkX2Vycm9ycyA9IGFycmF5KCk7CQkvLyBIb2xkIGVycm9yIHN0cmluZ3MgdG8gcmV0cmlldmUgd2l0aCBnZXRFcnJvcnMoKS4KCXByaXZhdGUgc3RhdGljICRfaW5jb21pbmdQYXlsb2FkID0gJyc7CgoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBsb2NhbENhbGwoICRrZXlTZXQgPSBmYWxzZSwgJGltcG9ydGJ1ZGR5ID0gZmFsc2UgKSB7CgkJaWYgKCB0cnVlICE9PSAka2V5U2V0ICkgewoJCQlkaWUoICc8aHRtbD40MDMgQWNjZXNzIERlbmllZDwvaHRtbD4nICk7CgkJfQoKCQlyZWdpc3Rlcl9zaHV0ZG93bl9mdW5jdGlvbiggYXJyYXkoICdiYWNrdXBidWRkeV9yZW1vdGVfYXBpJywgJ3NodXRkb3duX2Z1bmN0aW9uJyApICk7CgoJCWhlYWRlciggJ0NvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyApOwoKCQlpZiAoIHRydWUgIT09IHNlbGY6OmluaXRfaW5jb21pbmdfY2FsbCgpICkgewoJCQkkbWVzc2FnZSA9ICdFcnJvciAjODAwMjogRXJyb3IgdmFsaWRhdGluZyBBUEkgY2FsbCBhdXRoZW50aWNpdHkuIFZlcmlmeSB5b3UgYXJlIHVzaW5nIHRoZSBjb3JyZWN0IGFjdGl2ZSBBUEkga2V5Lic7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkbWVzc2FnZSApICk7CgkJfQoKCQkvLyBJZiBoZXJlIHRoZW4gdmFsaWRhdGlvbiB3YXMgYWxsIGdvb2QuIEFQSSBjYWxsIGlzIGF1dGhvcml6ZWQuCgoJCWlmICggdHJ1ZSAhPT0gJGltcG9ydGJ1ZGR5ICkgewoJCQkkZnVuY3Rpb25OYW1lID0gJ192ZXJiXycgLiBiYWNrdXBidWRkeV9jb3JlOjpnZXRIdHRwSGVhZGVyKCAnYmFja3VwYnVkZHktdmVyYicgKTsKCQl9IGVsc2UgewoJCQkkZnVuY3Rpb25OYW1lID0gJ192ZXJiX2ltcG9ydGJ1ZGR5XycgLiBiYWNrdXBidWRkeV9jb3JlOjpnZXRIdHRwSGVhZGVyKCAnYmFja3VwYnVkZHktdmVyYicgKTsKCQl9CgoJCS8vIERvZXMgdmVyYiBleGlzdD8KCQlpZiAoIGZhbHNlID09PSBtZXRob2RfZXhpc3RzKCAnYmFja3VwYnVkZHlfcmVtb3RlX2FwaScsICRmdW5jdGlvbk5hbWUgKSApIHsKCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzg0MzQ4OTk3NDogVW5rbm93biB2ZXJiIGAnIC4gYmFja3VwYnVkZHlfY29yZTo6Z2V0SHR0cEhlYWRlciggJ2JhY2t1cGJ1ZGR5LXZlcmInICkgLiAnYC4nOwoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOwoJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCX0gZWxzZSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NhbGxpbmcgaW5jb21pbmcgQVBJIGZ1bmN0aW9uIGAnIC4gJGZ1bmN0aW9uTmFtZSAuICdgLicgKTsKCQkJY2FsbF91c2VyX2Z1bmNfYXJyYXkoICdiYWNrdXBidWRkeV9yZW1vdGVfYXBpOjonIC4gJGZ1bmN0aW9uTmFtZSwgYXJyYXkoKSApOwoJCX0KCgkJLy8gQ2xlYW51cAoJCXNlbGY6OiRfaW5jb21pbmdQYXlsb2FkID0gJyc7CgoJCS8vIGZ1bmN0aW9uOiB2ZXJiX1tWRVJCSEVSRV0KCX0KCgoKCS8qCXNodXRkb3duX2Z1bmN0aW9uKCkKCSAqCgkgKglVc2VkIGZvciBjYXRjaGluZyBmYXRhbCBQSFAgZXJyb3JzIGR1cmluZyBiYWNrdXAgdG8gd3JpdGUgdG8gbG9nIGZvciBkZWJ1Z2dpbmcuCgkgKgoJICoJQHJldHVybgkJbnVsbAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNodXRkb3duX2Z1bmN0aW9uKCkgewoKCgkJLy8gR2V0IGVycm9yIG1lc3NhZ2UuCgkJLy8gRXJyb3IgdHlwZXM6IGh0dHA6Ly9waHAubmV0L21hbnVhbC9lbi9lcnJvcmZ1bmMuY29uc3RhbnRzLnBocAoJCSRlID0gZXJyb3JfZ2V0X2xhc3QoKTsKCQlpZiAoICRlID09PSBOVUxMICkgeyAvLyBObyBlcnJvciBvZiBhbnkga2luZC4KCQkJcmV0dXJuOwoJCX0gZWxzZSB7IC8vIFNvbWUgdHlwZSBvZiBlcnJvci4KCQkJaWYgKCAhaXNfYXJyYXkoICRlICkgfHwgKCAkZVsndHlwZSddICE9IEVfRVJST1IgKSAmJiAoICRlWyd0eXBlJ10gIT0gRV9VU0VSX0VSUk9SICkgKSB7IC8vIFJldHVybiBpZiBub3QgYSBmYXRhbCBlcnJvci4KCQkJCXJldHVybjsKCQkJfQoJCX0KCgoJCS8vIENhbGN1bGF0ZSBsb2cgZGlyZWN0b3J5LgoJCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7CgkJJG1haW5fZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ2xvZy0nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCc7CgoKCQkvLyBEZXRlcm1pbmUgaWYgd3JpdGluZyB0byBhIHNlcmlhbCBsb2cuCgkJaWYgKCBwYl9iYWNrdXBidWRkeTo6JF9zdGF0dXNfc2VyaWFsICE9ICcnICkgewoJCQkkc2VyaWFsID0gcGJfYmFja3VwYnVkZHk6OiRfc3RhdHVzX3NlcmlhbDsKCQkJJHNlcmlhbF9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiAkc2VyaWFsIC4gJ18nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCc7CgkJCSR3cml0ZV9zZXJpYWwgPSB0cnVlOwoJCX0gZWxzZSB7CgkJCSR3cml0ZV9zZXJpYWwgPSBmYWxzZTsKCQl9CgoKCQkvLyBGb3JtYXQgZXJyb3IgbWVzc2FnZS4KCQkkZV9zdHJpbmcgPSAnUEhQX0VSUk9SICcgLiBfXyggJ0Vycm9yICMzMjg5My4gRmF0YWwgUEhQIGVycm9yIGVuY291bnRlcmVkOicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCWZvcmVhY2goIChhcnJheSkkZSBhcyAkZV9saW5lX3RpdGxlID0+ICRlX2xpbmUgKSB7CgkJCSRlX3N0cmluZyAuPSAkZV9saW5lX3RpdGxlIC4gJyA9PiAnIC4gJGVfbGluZSAuICI7ICI7CgkJfQoJCSRlX3N0cmluZyAuPSAiLlxuIjsKCgoJCS8vIFdyaXRlIHRvIGxvZy4KCQlAZmlsZV9wdXRfY29udGVudHMoICRtYWluX2ZpbGUsICRlX3N0cmluZywgRklMRV9BUFBFTkQgKTsKCQlpZiAoICR3cml0ZV9zZXJpYWwgPT09IHRydWUgKSB7CgkJCUBmaWxlX3B1dF9jb250ZW50cyggJHNlcmlhbF9maWxlLCAkZV9zdHJpbmcsIEZJTEVfQVBQRU5EICk7CgkJfQoKCgl9IC8vIEVuZCBzaHV0ZG93bl9mdW5jdGlvbi4KCgoKCS8qIHJlbW90ZUNhbGwoKQoJICoKCSAqIFNlbmQgYW4gQVBJIGNhbGwgdG8gYSByZW1vdGUgc2VydmVyLgoJICogQHBhcmFtCWFycmF5IAkkcmVtb3RlQVBJCQlSZW1vdGUgQVBJIHN0YXRlIGFycmF5IGluY2x1ZGluZyBVUkwsIGV0Yy4gU3RvcmVkIGluIGRlc3RpbmF0aW9uIHNldHRpbmdzLgoJICogQHBhcmFtCXN0cmluZwkkdmVyYgkJCUFQSSB2ZXJiIHRvIGNhbGwgb24gcmVtb3RlIHNlcnZlci4KCSAqIEBwYXJhbQlhcnJheSAJJG1vcmVQYXJhbXMJCU9wdGlvbmFsOiBBZGRpdGlvbmFsIHBhcmFtZXRlcnMgdG8gYXBwZW5kIHRvIHRob3NlIHNlbnQuICBJZiBuZWVkaW5nIHRvIHNlbmQgYSBub24tc3RyaW5nIHRoaXMgc2hvdWxkIGJlIGVuY29kZWQgaW4gc29tZSBtYW5uZXIgYW5kIGRlY29kZWQgb24gcmVtb3RlLgoJICogQHBhcmFtCWludAkJJHRpbWVvdXQJCU9wdGlvbmFsOiBIb3cgbG9uZyB3ZSBleHBlY3QgdGhpcyBjYW4gbGFzdCBiZWZvcmUgYSBzZXJ2ZXIgdGltZXMgb3V0LiAgVHlwaWNhbGx5IHRoZSBtaW5pbXVtIG9mIHRoZSBsb2NhbCBhbmQgcmVtb3RlIHRpbWVvdXRzLgoJICogQHBhcmFtCXN0cmluZwkkZmlsZQkJCU9wdGlvbmFsOiBGaWxlIHdlIGFyZSBzZW5kaW5nLiBUaGlzIGlzIHBhc3NlZCBzbyB0aGF0IHZhcmlvdXMgQ1JDIGRhdGEgY2FuIGJlIGNhbGN1bGF0ZWQuCgkgKiBAcGFyYW0Jc3RyaW5nCSRmaWxlRGF0YQkJT3B0aW9uYWw6IFJhdyBmaWxlIGNvbnRlbnRzIHRvIHNlbmQgKGZvciB0aGlzIGNodW5rIGlmIHVzaW5nIGNodW5raW5nKS4gRCB1c3RpbiBCIG9sdG9uCgkgKiBAcGFyYW0JaW50CQkkc2Vla1RvCQkJT3B0aW9uYWw6IExvY2F0aW9uIHRvIGZzZWVrIHRvIGluIHRoZSBmaWxlIGZvciB3cml0aW5nLgoJICogQHBhcmFtCWJvb2wJJGlzRmlsZVRlc3QJCU9wdGlvbmFsOiBXaGVuIHRydWUgdGhlIGRlc3RpbmF0aW9uIHdpbGwgYXV0by1kZWxldGUgdGhlIGZpbGUgYWZ0ZXIgdGVzdGluZy4KCSAqIEBwYXJhbQlib29sCSRpc0ZpbGVEb25lCQlPcHRpb25hbDogUGFzcyB0cnVlIHdoZW4gdGhlIGxhc3QgY2h1bmsgKG9yIG9ubHkgY2h1bmspIG9mIHRoZSBmaWxlIGlzIGJlaW5nIHNlbnQgc28gZGVzdGluYXRpb24ga25vd3Mgbm90IHRvIGV4cGVjdCBhbnkgb3RoZXIgcGllY2VzLgoJICogQHBhcmFtCWludAkJJGZpbGVTaXplCQlPcHRpb25hbDogU2l6ZSBvZiB0aGUgZmlsZSBzZW5kaW5nLgoJICogQHBhcmFtCXN0cmluZwkkZmlsZVBhdGgJCU9wdGlvbmFsOiBSZW1vdGUgZmlsZSBwYXRoIGluIHJlbGF0aW9uIHRvIHRoZSByb290IGxvY2F0aW9uIHdoZXJlIHRoZSBmaWxlIGlzIGJlaW5nIHN0b3JlZCwgYmFzZWQgb24gZmlsZSB0eXBlIChiYXNlZCBvbiB2ZXJiKS4KCSAqIEBwYXJhbQlib29sCSRyZXR1cm5SYXcJCVdoZW4gdHJ1ZSByZXR1cm5zIGJvZHkgcmF3IHRleHQvZGF0YSByYXRoZXIgdGhhbiBkZWNvZGluZyBlbmNvZGVkIGRhdGEgZmlyc3QuCgkgKgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJlbW90ZUNhbGwoICRyZW1vdGVBUEksICR2ZXJiLCAkbW9yZVBhcmFtcyA9IGFycmF5KCksICR0aW1lb3V0LCAkZmlsZXMgPSBhcnJheSgpLCAkcmV0dXJuUmF3ID0gZmFsc2UgKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUHJlcGFyaW5nIHJlbW90ZSBBUEkgY2FsbCB2ZXJiIGAnIC4gJHZlcmIgLiAnYC4nICk7CgkJJG5vdyA9IHRpbWUoKTsKCgkJJGJvZHkgPSBhcnJheSgpOwoKCQlpZiAoICEgaXNfbnVtZXJpYyggJHRpbWVvdXQgKSApIHsKCQkJJHRpbWVvdXQgPSBiYWNrdXBidWRkeV9jb25zdGFudHM6OkRFUExPWU1FTlRfUkVNT1RFX0FQSV9ERUZBVUxUX1RJTUVPVVQ7CgkJfQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3JlbW90ZUNhbGwoKSBIVFRQIHdhaXQgdGltZW91dDogYCcgLiAkdGltZW91dCAuICdgIHNlY29uZHMuJyApOwoKCQkkZGVmYXVsdEZpbGUgPSBhcnJheSgKCQkJJ2ZpbGUnICAgID0+ICcnLAoJCQknc2l6ZScgICAgPT4gJycsCgkJCSdzZWVrdG8nICA9PiAnJywKCQkJJ2RvbmUnICAgID0+IGZhbHNlLAoJCQkndGVzdCcgICAgPT4gZmFsc2UsCgkJCSdlbmNvZGVkJyA9PiBmYWxzZSwKCQkJJ2RhdGFsZW4nID0+IDAsCgkJCSdkYXRhJyAgICA9PiAnJywKCQkpOwoKCQkvLyBBcHBseSBkZWZhdWx0cyBmb3IgZWFjaCBmaWxlLgoJCWZvcmVhY2goICRmaWxlcyBhcyAmJGZpbGUgKSB7CgkJCSRmaWxlID0gYXJyYXlfbWVyZ2UoICRkZWZhdWx0RmlsZSwgJGZpbGUgKTsKCQl9CgoJCSRib2R5WydmaWxlcyddID0gJGZpbGVzOwoKCQlpZiAoICEgaXNfYXJyYXkoICRtb3JlUGFyYW1zICkgKSB7CgkJCWVycm9yX2xvZyggJ0JhY2t1cEJ1ZGR5IEVycm9yICM0ODkzNzgzNDQ3IHJlbW90ZV9hcGkucGhwOyAkbW9yZVBhcmFtcyBtdXN0IGJlIHBhc3NlZCBhcyBhcnJheS4nICk7CgkJfQoJCSRib2R5ID0gc2VyaWFsaXplKCBhcnJheV9tZXJnZSggJGJvZHksICRtb3JlUGFyYW1zICkgKTsKCgkJLy9wcmludF9yKCAkYXBpS2V5ICk7CgkJJHNpZ25hdHVyZSA9IG1kNSggJG5vdyAuICR2ZXJiIC4gJHJlbW90ZUFQSVsna2V5X3B1YmxpYyddIC4gJHJlbW90ZUFQSVsna2V5X3NlY3JldCddIC4gJGJvZHkgKTsKCgkJaWYgKCBkZWZpbmVkKCAnQkFDS1VQQlVERFlfREVWJyApICYmICggdHJ1ZSA9PT0gQkFDS1VQQlVERFlfREVWICkgKSB7CgkJCWVycm9yX2xvZyggJ0JBQ0tVUEJVRERZX0RFVi1yZW1vdGUgYXBpIGh0dHAgYm9keSBTRU5ELSAnIC4gcHJpbnRfciggJGJvZHksIHRydWUgKSApOwoJCX0KCgkJJHNzbHZlcmlmeSA9IHRydWU7CgkJaWYgKCAnMCcgPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkZXBsb3lfc3NsdmVyaWZ5J10gKSB7CgkJCSRzc2x2ZXJpZnkgPSBmYWxzZTsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBpbmcgU1NMIGNlcnQgdmVyaWZpY2F0aW9uIGJhc2VkIG9uIGFkdmFuY2VkIHNldHRpbmdzLicgKTsKCQl9CgoJCS8vZXJyb3JfbG9nKCAnY29ubmVjdFRvOiAnIC4gJHJlbW90ZUFQSVsnc2l0ZXVybCddICk7CgkJJHJlc3BvbnNlID0gd3BfcmVtb3RlX3Bvc3QoIHJ0cmltKCAkcmVtb3RlQVBJWydzaXRldXJsJ10sICcvJyApIC4gJy8nLCBhcnJheSgKCQkJCSdtZXRob2QnID0+ICdQT1NUJywKCQkJCSd0aW1lb3V0JyA9PiAoICR0aW1lb3V0IC0gMiApLAoJCQkJJ3JlZGlyZWN0aW9uJyA9PiAwLCAvLyBSZWRpcmVjdCB3aWxsIG5vdCB3b3JrIHNpbmNlIHdlIGFyZSBwYXNzaW5nIGhlYWRlcnMuCgkJCQknaHR0cHZlcnNpb24nID0+ICcxLjAnLAoJCQkJJ2Jsb2NraW5nJyA9PiB0cnVlLAoJCQkJJ3NzbHZlcmlmeScgPT4gJHNzbHZlcmlmeSwKCQkJCSdoZWFkZXJzJyA9PiBhcnJheSgKCQkJCQkJJ1JlZmVyZXInID0+ICRyZW1vdGVBUElbJ3NpdGV1cmwnXSAuICcvVEFDT1MnLAoJCQkJCQknQ29udGVudC1UeXBlJyA9PiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtL01PTktFWVMnLCAvLyBiaW5hcnkKCQkJCQkJJ2JhY2t1cGJ1ZGR5LWFwaS1rZXknID0+ICRyZW1vdGVBUElbJ2tleV9wdWJsaWMnXSwKCQkJCQkJJ2JhY2t1cGJ1ZGR5LXZlcnNpb24nID0+IHBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncyggJ3ZlcnNpb24nICksCgkJCQkJCSdiYWNrdXBidWRkeS12ZXJiJyA9PiAkdmVyYiwKCQkJCQkJJ2JhY2t1cGJ1ZGR5LW5vdycgPT4gJG5vdywKCQkJCQkJJ2JhY2t1cGJ1ZGR5LXNpZ25hdHVyZScgPT4gJHNpZ25hdHVyZSwKCQkJCQkpLCAvLyBTZW5kaW5nIHJlZmVyZXIgaGVhZGVyIGhlbHBzIHByZXZlbnQgc2VjdXJpdHkgYmxvY2tzLgoJCQkJJ2JvZHknID0+ICRib2R5LCAvLyBJTVBPUlRBTlQ6IEFMV0FZUyBmb3Igc2VjdXJpdHkgdmVyaWZ5IHNpZ25hdHVyZSBwcmlvciB0byBldmVyIHVuc2VyaWFsaXppbmcgYW55IGluY29taW5nIGRhdGEuCgkJCQknY29va2llcycgPT4gYXJyYXkoKQoJCQkpCgkJKTsKCgkJaWYgKCBpc193cF9lcnJvciggJHJlc3BvbnNlICkgKSB7CgkJCXJldHVybiBzZWxmOjpfZXJyb3IoICdFcnJvciAjOTAzNzogVW5hYmxlIHRvIGNvbm5lY3QgdG8gcmVtb3RlIHNlcnZlciBvciB1bmV4cGVjdGVkIHJlc3BvbnNlLiBEZXRhaWxzOiBgJyAuICRyZXNwb25zZS0+Z2V0X2Vycm9yX21lc3NhZ2UoKSAuICdgIC0gU2l0ZSBVUkw6IGAnIC4gJHJlbW90ZUFQSVsnc2l0ZXVybCddIC4gJ2AsIEhvbWUgVVJMOiBgJyAuICRyZW1vdGVBUElbJ2hvbWV1cmwnXSAuICdgLicgKTsKCQl9IGVsc2UgewoJCQlpZiAoIHRydWUgPT09ICRyZXR1cm5SYXcgKSB7CgkJCQlyZXR1cm4gJHJlc3BvbnNlWydib2R5J107CgkJCX0KCQkJLy9lcnJvcl9sb2coICczMzMzUmVzcG9uc2U6ICcgLiAkcmVzcG9uc2VbJ2JvZHknXSApOwoKCQkJaWYgKCBmYWxzZSAhPT0gc3RyaXBvcyggJHJlc3BvbnNlWydib2R5J10sICdSZXF1ZXN0IEVudGl0eSBUb28gTGFyZ2UnICkgKSB7CgkJCQlyZXR1cm4gc2VsZjo6X2Vycm9yKCAnRXJyb3IgIzgwMDFiOiBSZXF1ZXN0IEVudGl0eSBUb28gTGFyZ2UuIFRoZSBkZXN0aW5hdGlvbiBzZXJ2ZXIgc2F5cyB3ZSBzZW50IHRvbyBtdWNoIGRhdGEuIEVpdGhlciBjaGFuZ2UgdGhlIERlcGxveW1lbnQgQWR2YW5jZWQgU2V0dGluZyAiTWF4IENodW5rIFNpemUiIHRvIGEgbG93ZXIgdmFsdWUgb3IgY2hhbmdlIHRoZSBzZXJ2ZXIgY29uZmlndXJhdGlvbiB0byBhY2NlcHQgYSBsYXJnZXIgdmFsdWUuIFNlZSB0aGUgZm9sbG93aW5nIHdlYnBhZ2UgZm9yIHRoZSBzZXJ2ZXIgc29sdXRpb24gZm9yIEFwYWNoZSwgbmdpbngsIG9yIElJUzogaHR0cHM6Ly9jcmFmdGNtcy5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMjMyOC80MTMtcmVxdWVzdC1lbnRpdHktdG9vLWxhcmdlLWVycm9yLXdpdGgtdXBsb2FkaW5nLWEtZmlsZSAgLi4uIFJldHVybiBkYXRhOiBgJyAuIGh0bWxlbnRpdGllcyggJHJlc3BvbnNlWydib2R5J10gKSAuICdgLicgKTsKCQkJfQoKCQkJaWYgKCBmYWxzZSA9PT0gKCAkcmV0dXJuID0gQHVuc2VyaWFsaXplKCAkcmVzcG9uc2VbJ2JvZHknXSApICkgKSB7CgkJCQkkZXJyb3IgPSAiRXJyb3IgIzgwMDE6IFVuYWJsZSB0byBkZWNvZGUgRGVwbG95bWVudCByZXNwb25zZS4gVGhpbmdzIHRvIGNoZWNrOiAxKSBWZXJpZnkgYm90aCBzaXRlcyBhcmUgcnVubmluZyB0aGUgbGF0ZXN0IEJhY2t1cEJ1ZGR5IHZlcnNpb24gKHY4LjEuMS4xIGludHJvZHVjZWQgbm9uLWJhY2t3YXJkLWNvbXBhdGlibGUgY2hhbmdlcykuIDIpIENoZWNrIHRoZSByZW1vdGUgc2l0ZSBBUEkgVVJMIGlzIGNvcnJlY3Q6ICIgLiAkcmVtb3RlQVBJWydzaXRldXJsJ10gLiAiLiAzKSBJZiB5b3UgY2hhbmdlZCB0aGUgcmVtb3RlIHNpdGUgQVBJIGtleSB5b3UgbXVzdCB1cGRhdGUgaXQgaW50byB0aGlzIHNpdGUuIDQpIE1ha2Ugc3VyZSB0aGUgcmVtb3RlIHNpdGUgaGFzIHRoZSBBUEkgZW5hYmxlZCBpbiBpdHMgd3AtY29uZmlnLnBocCBieSBhZGRpbmcgZGVmaW5lKCAnQkFDS1VQQlVERFlfQVBJX0VOQUJMRScsIHRydWUgKTsgc29tZXdoZXJlIEFCT1ZFIHRoZSBsaW5lIGBUaGF0J3MgYWxsLCBzdG9wIGVkaXRpbmchYC4gVmVyYjogYCIgLiAkdmVyYiAuICJgLiBUcm91Ymxlc2hvb3Rpbmc6IGA8dGV4dGFyZWEgc3R5bGU9J3dpZHRoOiAxMDAlOyBoZWlnaHQ6IDUwMHB4Oycgd3JhcD0nb2ZmJz4iIC4gaHRtbGVudGl0aWVzKCBwcmludF9yKCAkcmVzcG9uc2UsIHRydWUgKSApIC4gIjwvdGV4dGFyZWE+YC4iOwoKCQkJCS8qCgkJCQlwYl9iYWNrdXBidWRkeTo6YWRkX3N0YXR1c19zZXJpYWwoICdyZW1vdGVfYXBpJyApOyAvLyBBbHNvIGxvZyBhbGwgaW5jb21pbmcgcmVtb3RlIEFQSSBjYWxscy4KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdSRU1PVEUgRVJST1I6ICcgLiAkZXJyb3IgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpyZW1vdmVfc3RhdHVzX3NlcmlhbCggJ3JlbW90ZV9hcGknICk7CgkJCQkqLwoKCQkJCXJldHVybiBzZWxmOjpfZXJyb3IoICRlcnJvciApOwoJCQl9IGVsc2UgewoJCQkJaWYgKCBpc3NldCggJHJldHVyblsnbG9ncyddICkgKSB7CgkJCQkJLy9wYl9iYWNrdXBidWRkeTo6YWRkX3N0YXR1c19zZXJpYWwoICdyZW1vdGVfYXBpJyApOyAvLyBBbHNvIGxvZyBhbGwgaW5jb21pbmcgcmVtb3RlIEFQSSBjYWxscy4KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICcqKiogQmVnaW4gRXh0ZXJuYWwgTG9nIChSZW1vdGUgQVBJIENhbGwgUmVzcG9uc2UpJyApOwoJCQkJCWZvcmVhY2goICRyZXR1cm5bJ2xvZ3MnXSBhcyAkbG9nICkgewoKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnKiAnIC4gcHJpbnRfciggJGxvZywgdHJ1ZSApICk7CgkJCQkJfQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJyoqKiBFbmQgRXh0ZXJuYWwgTG9nIChSZW1vdGUgQVBJIENhbGwgUmVzcG9uc2UpJyApOwoJCQkJCS8vcGJfYmFja3VwYnVkZHk6OnJlbW92ZV9zdGF0dXNfc2VyaWFsKCAncmVtb3RlX2FwaScgKTsKCQkJCX0KCgkJCQlpZiAoICEgaXNzZXQoICRyZXR1cm5bJ3N1Y2Nlc3MnXSApIHx8ICggdHJ1ZSAhPT0gJHJldHVyblsnc3VjY2VzcyddICkgKSB7IC8vIEZhaWwuCgkJCQkJJGVycm9yID0gJyc7CgkJCQkJaWYgKCBpc3NldCggJHJldHVyblsnZXJyb3InXSApICkgewoJCQkJCQkkZXJyb3IgPSAkcmV0dXJuWydlcnJvciddOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRlcnJvciA9ICdFcnJvciAjODM4NDM4NzM0OiBObyBlcnJvciBnaXZlbi4gRnVsbCByZXNwb25zZTogIicgLiAkcmV0dXJuIC4gJyIuJzsKCQkJCQl9CgkJCQkJcmV0dXJuIHNlbGY6Ol9lcnJvciggIkVycm9yICMzMjg5Mzc5OiBBUEkgZGlkIG5vdCByZXBvcnQgc3VjY2Vzcy4gRXJyb3IgZGV0YWlsczogYCIgLiAkZXJyb3IgLiAiYC4gVHJvdWJsZXNob290aW5nOiBgPHRleHRhcmVhIHN0eWxlPSd3aWR0aDogMTAwJTsgaGVpZ2h0OiA1MDBweDsnIHdyYXA9J29mZic+IiAuIGh0bWxlbnRpdGllcyggcHJpbnRfciggJHJlc3BvbnNlLCB0cnVlICkgKSAuICI8L3RleHRhcmVhPmAuIiApOwoJCQkJfSBlbHNlIHsgLy8gU3VjY2Vzcy4KCQkJCQlpZiAoIGlzc2V0KCAkcmV0dXJuWydtZXNzYWdlJ10gKSApIHsKCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUmVzcG9uc2UgbWVzc2FnZSBmcm9tIEFQSTogJyAuICRyZXR1cm5bJ21lc3NhZ2UnXSAuICciLicgKTsKCQkJCQl9CgkJCQkJcmV0dXJuICRyZXR1cm47CgkJCQl9CgkJCX0KCQl9Cgl9IC8vIEVuZCByZW1vdGVDYWxsKCkuCgoKCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9yZXBseSggJHJlc3BvbnNlX2FyciApIHsKCQkkcmVzcG9uc2VfYXJyWydsb2dzJ10gPSBwYl9iYWNrdXBidWRkeTo6Z2V0X3N0YXR1cyggJ3JlbW90ZV9hcGknLCB0cnVlLCB0cnVlLCB0cnVlICk7IC8vIEFycmF5IG9mIHN0YXR1cyBsb2dzLgoKCQkvL2Vycm9yX2xvZyggJ1JFU1BPTlNFOicgKTsKCQkvL2Vycm9yX2xvZyggcHJpbnRfciggJHJlc3BvbnNlX2FyciwgdHJ1ZSApICk7CgoJCWRpZSggc2VyaWFsaXplKCAkcmVzcG9uc2VfYXJyICkgKTsKCX0KCgoJLyogX3ZlcmJfcnVuQmFja3VwKCkKCSAqCgkgKiBSdW4gYSBiYWNrdXAgd2l0aCBhIHNwZWNpZmllZCBjdXN0b20gcHJvZmlsZTsgZWcgYSBkYiBiYWNrdXAgZm9yIHB1bGxpbmcgZGVwbG95bWVudC4KCSAqIFBhcmFtczogUE9TVCAicHJvZmlsZSIgLSBCYXNlNjQgZW5jb2RlZCBqc29uIGVuY29kZWQgcHJvZmlsZSBhcnJheS4KCSAqCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF92ZXJiX3J1bkJhY2t1cCgpIHsKCQkkYmFja3VwU2VyaWFsID0gcGJfYmFja3VwYnVkZHk6OnJhbmRvbV9zdHJpbmcoIDEwICk7CgkJJHByb2ZpbGVBcnJheSA9IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAncHJvZmlsZScgXTsKCQlpZiAoIGZhbHNlID09PSAoICRwcm9maWxlQXJyYXkgPSBiYXNlNjRfZGVjb2RlKCAkcHJvZmlsZUFycmF5ICkgKSApIHsKCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzgzNDM3Mjg6IFVuYWJsZSB0byBiYXNlNjQgZGVjb2RlIHByb2ZpbGUgZGF0YS4nOwoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSwgJGJhY2t1cFNlcmlhbCApOwoJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCX0KCQlpZiAoIE5VTEwgPT09ICggJHByb2ZpbGVBcnJheSA9IGpzb25fZGVjb2RlKCAkcHJvZmlsZUFycmF5LCB0cnVlICkgKSApIHsKCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzMyNzIzODM6IFVuYWJsZSB0byBqc29uIGRlY29kZSBwcm9maWxlIGRhdGEuJzsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UsICRiYWNrdXBTZXJpYWwgKTsKCQkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IGZhbHNlLCAnZXJyb3InID0+ICRtZXNzYWdlICkgKSA7CgkJfQoKCQkvLyBBcHBlbmRzIHNlc3Npb24gdG9rZW5zIGZyb20gdGhlIHB1bGxpbmcgc2l0ZSBzbyB0aGV5IHdvbnQgZ2V0IGxvZ2dlZCBvdXQgd2hlbiB0aGlzIGRhdGFiYXNlIGlzIHJlc3RvcmVkIHRoZXJlLgoJCWlmICggaXNzZXQoICRwcm9maWxlQXJyYXlbJ3Nlc3Npb25Ub2tlbnMnXSApICYmICggaXNfYXJyYXkoICRwcm9maWxlQXJyYXlbJ3Nlc3Npb25Ub2tlbnMnXSApICkgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1JlbW90ZSBzZXNzaW9uIHRva2VucyBuZWVkIHVwZGF0ZWQuJywgJGJhY2t1cFNlcmlhbCApOwoJCQkvL2Vycm9yX2xvZyggJ25lZWR0b2tlbicgKTsKCgkJCWlmICggISBpc19udW1lcmljKCAkcHJvZmlsZUFycmF5WydzZXNzaW9uSUQnXSApICkgewoJCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzMyODk4OTg5My4gSW52YWxpZCBzZXNzaW9uIElELiBNdXN0IGJlIG51bWVyaWMuJzsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQl9CgoJCQkvLyBHZXQgY3VycmVudCBzZXNzaW9uIHRva2Vucy4KCQkJZ2xvYmFsICR3cGRiOwoJCQkkc3FsID0gIlNFTEVDVCBtZXRhX3ZhbHVlIEZST00gYCIgLiBEQl9OQU1FIC4gImAuYCIgLiAkd3BkYi0+cHJlZml4IC4gInVzZXJtZXRhYCBXSEVSRSBgdXNlcl9pZGAgPSAnIiAuICRwcm9maWxlQXJyYXlbJ3Nlc3Npb25JRCddIC4gIicgQU5EIGBtZXRhX2tleWAgPSAnc2Vzc2lvbl90b2tlbnMnOyI7CgkJCSRyZXN1bHRzID0gJHdwZGItPmdldF92YXIoICRzcWwgKTsKCQkJJG9sZFNlc3Npb25Ub2tlbnMgPSBAdW5zZXJpYWxpemUoICRyZXN1bHRzICk7CgoJCQkvLyBBZGQgcmVtb3RlIHRva2Vucy4KCQkJaWYgKCAhIGlzX2FycmF5KCAkb2xkU2Vzc2lvblRva2VucyApICkgewoJCQkJJG9sZFNlc3Npb25Ub2tlbnMgPSBhcnJheSgpOwoJCQl9CgkJCSRuZXdTZXNzaW9uVG9rZW5zID0gYXJyYXlfbWVyZ2UoICRvbGRTZXNzaW9uVG9rZW5zLCAkcHJvZmlsZUFycmF5WydzZXNzaW9uVG9rZW5zJ10gKTsKCgkJCS8vIFJlLXNlcmlhbGl6ZS4KCQkJJG5ld1Nlc3Npb25Ub2tlbnMgPSBzZXJpYWxpemUoICRuZXdTZXNzaW9uVG9rZW5zICk7CgoJCQkvLyBTYXZlIG1lcmdlZCB0b2tlbnMgaGVyZS4KCQkJJHNxbCA9ICJVUERBVEUgYCIgLiBEQl9OQU1FIC4gImAuYCIgLiAkd3BkYi0+cHJlZml4IC4gInVzZXJtZXRhYCBTRVQgbWV0YV92YWx1ZT0gJXMgV0hFUkUgYHVzZXJfaWRgID0gJyIgLiAkcHJvZmlsZUFycmF5WydzZXNzaW9uSUQnXSAuICInIEFORCBgbWV0YV9rZXlgID0gJ3Nlc3Npb25fdG9rZW5zJzsiOwoJCQkkc3RyaW5nZWRTZXNzaW9uVG9rZW5zID0gc2VyaWFsaXplKCAkcHJvZmlsZUFycmF5WydzZXNzaW9uVG9rZW5zJ10gKTsKCgkJCWlmICggZmFsc2UgPT09ICR3cGRiLT5xdWVyeSggJHdwZGItPnByZXBhcmUoICRzcWwsICRzdHJpbmdlZFNlc3Npb25Ub2tlbnMgKSApICkgewoJCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzQzNzM0Nzg0OiBVbmFibGUgdG8gdXBkYXRlIHJlbW90ZSBzZXNzaW9uIHRva2VuLic7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSwgJGJhY2t1cFNlcmlhbCApOwoJCQkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IGZhbHNlLCAnZXJyb3InID0+ICRtZXNzYWdlICkgKTsKCQkJfQoKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVXBkYXRlZCByZW1vdGUgc2Vzc2lvbiB0b2tlbnMuJywgJGJhY2t1cFNlcmlhbCApOwoJCX0KCgkJJG1heWJlTWVzc2FnZSA9IGJhY2t1cGJ1ZGR5X2FwaTo6cnVuQmFja3VwKCAkcHJvZmlsZUFycmF5LCAkdHJpZ2dlclRpdGxlID0gJ2RlcGxveW1lbnRfcHVsbGluZycsICRiYWNrdXBNb2RlID0gJycsICRiYWNrdXBTZXJpYWwgKTsKCQlpZiAoIGVtcHR5KCAkbWF5YmVNZXNzYWdlWydzdWNjZXNzJ10gKSApIHsKCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzQ4Mzk0ODczOiBVbmFibGUgdG8gbGF1bmNoIGJhY2t1cCBhdCBzb3VyY2UuIERldGFpbHM6IGAnIC4gJG1heWJlTWVzc2FnZSAuICdgLic7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlLCAkYmFja3VwU2VyaWFsICk7CgkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkbWVzc2FnZSApICk7CgkJfSBlbHNlIHsKCQkJJGFyY2hpdmVGaWxlbmFtZSA9IGJhc2VuYW1lKCBiYWNrdXBidWRkeV9jb3JlOjpjYWxjdWxhdGVBcmNoaXZlRmlsZW5hbWUoICRiYWNrdXBTZXJpYWwsICRwcm9maWxlQXJyYXlbJ3R5cGUnXSwgJHByb2ZpbGVBcnJheSApICk7CgkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiB0cnVlLCAnYmFja3VwU2VyaWFsJyA9PiAkYmFja3VwU2VyaWFsLCAnYmFja3VwRmlsZScgPT4gJGFyY2hpdmVGaWxlbmFtZSApICk7CgkJfQoJfSAvLyBFbmQgX3ZlcmJfcnVuQmFja3VwKCkuCgoKCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9nZXRCYWNrdXBTdGF0dXMoKSB7CgkJJGJhY2t1cFNlcmlhbCA9IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnc2VyaWFsJyBdOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJyoqKiBFbmQgUmVtb3RlIEJhY2t1cCBMb2cgc2VjdGlvbicsICRiYWNrdXBTZXJpYWwgKTsgLy8gUGxhY2UgYXQgZW5kIG9mIGxvZy4KCQliYWNrdXBidWRkeV9hcGk6OmdldEJhY2t1cFN0YXR1cyggJGJhY2t1cFNlcmlhbCApOyAvLyBlY2hvcyBvdXQuIFVzZSAkcmV0dXJuUmF3ID0gdHJ1ZSBmb3IgcmVtb3RlX2FwaSBjYWxsIGZvciB0aGlzIHNwZWNpYWwgdmVyYiB0aGF0IGRvZXMgbm90IHJldHVybiBqc29uLgoKCQkvLyBGaXggbWlzc2luZyBXUCBjcm9uIGNvbnN0YW50LgoJCWlmICggIWRlZmluZWQoICdXUF9DUk9OX0xPQ0tfVElNRU9VVCcgKSApIHsKCQkJZGVmaW5lKCdXUF9DUk9OX0xPQ0tfVElNRU9VVCcsIDYwKTsgIC8vIEluIHNlY29uZHMKCQl9CgoJCWlmICggJzEnICE9IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snc2tpcF9zcGF3bl9jcm9uX2NhbGwnXSApIHsKCQkJdXBkYXRlX29wdGlvbiggJ190cmFuc2llbnRfZG9pbmdfY3JvbicsIDAgKTsgLy8gUHJldmVudCBjcm9uLWJsb2NraW5nIGZvciBuZXh0IGl0ZW0uCgkJCXNwYXduX2Nyb24oIHRpbWUoKSArIDE1MCApOyAvLyBBZGRzID4gNjAgc2Vjb25kcyB0byBnZXQgYXJvdW5kIG9uY2UgcGVyIG1pbnV0ZSBjcm9uIHJ1bm5pbmcgbGltaXQuCgkJfQoJfSAvLyBlbmQgX3ZlcmJfZ2V0QmFja3VwU3RhdHVzKCkuCgoKCgkvKiBfdmVyYl9jb25maXJtRGVwbG95bWVudCgpCgkgKgoJICogVXNlciBjb25maXJtZWQgdGhlIGRlcGxveW1lbnQgc28gY2xlYW51cCBhbnkgcmVtYWluaW5nIHRlbXBvcmFyeSBzdHVmZiBzdWNoIGFzIHRlbXAgZGIgdGFibGVzLiBOb3RlOiBpbXBvcnRidWRkeSwgYmFja3VwIGZpbGVzLCBldGMgc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIGNsZWFuZWQgdXAgYnkgaW1wb3J0YnVkZHkgaXRzZWxmIGF0IHRoaXMgcG9pbnQuCgkgKgoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9jb25maXJtRGVwbG95bWVudCgpIHsKCgkJLy8gUmVtb3ZlIFRlbXAgVGFibGVzCgkJJHNlcmlhbCA9IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnc2VyaWFsJyBdOwoJCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2NsYXNzZXMvaG91c2VrZWVwaW5nLnBocCcgKTsKCQliYWNrdXBidWRkeV9ob3VzZWtlZXBpbmc6OnJlbW92ZV90ZW1wX3RhYmxlcyggJHNlcmlhbCApOwoKCQkvLyBSZW1vdmUgaW1wb3J0YnVkeSBEaXJlY3RvcnkKCQlpZiAoIGZpbGVfZXhpc3RzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LycgKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT51bmxpbmtfcmVjdXJzaXZlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LycgKTsKCQl9CgoJCS8vIFJlbW92ZSBpbXBvcnRidWRkeSBmaWxlcwoJCSRpbXBvcnRidWRkeUZpbGVzID0gZ2xvYiggQUJTUEFUSCAuICdpbXBvcnRidWRkeSoucGhwJyApOwoJCWlmICggISBpc19hcnJheSggJGltcG9ydGJ1ZGR5RmlsZXMgKSApIHsKCQkJJGltcG9ydGJ1ZGR5RmlsZXMgPSBhcnJheSgpOwoJCX0KCQlmb3JlYWNoKCAkaW1wb3J0YnVkZHlGaWxlcyBhcyAkaW1wb3J0YnVkZHlGaWxlICkgewoJCQl1bmxpbmsoICRpbXBvcnRidWRkeUZpbGUgKTsKCQl9CgoJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiB0cnVlICkgKTsKCgl9IC8vIEVuZCBfdmVyYl9jb25maXJtRGVwbG95bWVudCgpLgoKCgkvLyBSZWNlaXZlIGJhY2t1cCBhcmNoaXZlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfc2VuZEZpbGVfYmFja3VwKCkgewoJCXNlbGY6Ol9zZW5kRmlsZXMoICdiYWNrdXAnICk7Cgl9IC8vIEVuZCBfdmVyYl9zZW5kRmlsZV9iYWNrdXAoKS4KCgoJLy8gUmVjZWl2ZSB0aGVtZSBmaWxlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfc2VuZEZpbGVfdGhlbWUoKSB7CgkJc2VsZjo6X3NlbmRGaWxlcyggJ3RoZW1lJyApOwoJfSAvLyBFbmQgX3ZlcmJfc2VuZEZpbGVfdGhlbWUoKS4KCgkvLyBSZWNlaXZlIGNoaWxkIHRoZW1lIGZpbGUuCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9zZW5kRmlsZV9jaGlsZFRoZW1lKCkgewoJCXNlbGY6Ol9zZW5kRmlsZXMoICdjaGlsZFRoZW1lJyApOwoJfSAvLyBFbmQgX3ZlcmJfc2VuZEZpbGVfY2hpbGR0aGVtZSgpLgoKCS8vIFJlY2VpdmUgcGx1Z2luIGZpbGUuCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9zZW5kRmlsZV9wbHVnaW4oKSB7CgkJc2VsZjo6X3NlbmRGaWxlcyggJ3BsdWdpbicgKTsKCX0gLy8gRW5kIF92ZXJiX3NlbmRGaWxlX3BsdWdpbigpLgoKCS8vIFJlY2VpdmUgYmFja3VwIGFyY2hpdmUuCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9zZW5kRmlsZV9tZWRpYSgpIHsKCQlzZWxmOjpfc2VuZEZpbGVzKCAnbWVkaWEnICk7Cgl9IC8vIEVuZCBfdmVyYl9zZW5kRmlsZV9tZWRpYSgpLgoKCS8vIFJlY2VpdmUgYWRkaXRpb25hbCBleHRyYSBpbmNsdXNpb24uCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9zZW5kRmlsZV9leHRyYSgpIHsKCQlzZWxmOjpfc2VuZEZpbGVzKCAnZXh0cmEnICk7Cgl9IC8vIEVuZCBfdmVyYl9zZW5kRmlsZV9leHRyYSgpLgoKCS8vIFRlc3RpbmcgZmlsZSBzZW5kIGFiaWxpdHkuIEZpbGUgaXMgdHJhbnNpZW50OyBzdG9yZWQgaW4gdGVtcCBkaXIgbW9tZW50YXJpbHkuCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfdmVyYl9zZW5kRmlsZV90ZXN0KCkgewoJCXNlbGY6Ol9zZW5kRmlsZXMoICd0ZXN0JyApOwoJfSAvLyBFbmQgX3ZlcmJfc2VuZEZpbGVfdGVzdCgpLgoKCgoJLy8gR2V0IGJhY2t1cCBhcmNoaXZlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0RmlsZV9iYWNrdXAoKSB7CgkJc2VsZjo6X2dldEZpbGUoICdiYWNrdXAnICk7Cgl9IC8vIEVuZCBfdmVyYl9nZXRGaWxlX2JhY2t1cCgpLgoKCS8vIEdldCB0aGVtZSBmaWxlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0RmlsZV90aGVtZSgpIHsKCQlzZWxmOjpfZ2V0RmlsZSggJ3RoZW1lJyApOwoJfSAvLyBFbmQgX3ZlcmJfZ2V0RmlsZV90aGVtZSgpLgoKCS8vIEdldCBjaGlsZCB0aGVtZSBmaWxlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0RmlsZV9jaGlsZFRoZW1lKCkgewoJCXNlbGY6Ol9nZXRGaWxlKCAnY2hpbGRUaGVtZScgKTsKCX0gLy8gRW5kIF92ZXJiX2dldEZpbGVfY2hpbGRUZW1lKCkuCgoJLy8gR2V0IHBsdWdpbiBmaWxlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0RmlsZV9wbHVnaW4oKSB7CgkJc2VsZjo6X2dldEZpbGUoICdwbHVnaW4nICk7Cgl9IC8vIEVuZCBfdmVyYl9nZXRGaWxlX3BsdWdpbigpLgoKCS8vIEdldCBtZWRpYSBmaWxlLgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0RmlsZV9tZWRpYSgpIHsKCQlzZWxmOjpfZ2V0RmlsZSggJ21lZGlhJyApOwoJfSAvLyBFbmQgX3ZlcmJfZ2V0RmlsZV9tZWRpYSgpLgoKCS8vIEdldCBhZGRpdGlvbmFsIGV4dHJhIGluY2x1c2lvbi4KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF92ZXJiX2dldEZpbGVfZXh0cmEoKSB7CgkJc2VsZjo6X2dldEZpbGUoICdleHRyYScgKTsKCX0gLy8gRW5kIF92ZXJiX2dldEZpbGVfZXh0cmEoKS4KCgoKCS8qIF9nZXRGaWxlUGF0aEJ5VHlwZSgpCgkgKgoJICogQ2FsY3VsYXRlcyByb290IGRpcmVjdG9yeSB0byBzdG9yZSB0aGUgc3BlY2lmaWVkIHR5cGUgaW4uIENvbnRhaW5zIHRyYWlsaW5nIHNsYXNoLiBEaWVzIGlmIHVua25vd24gZmlsZSB0eXBlIHNwZWNpZmllZCBpbiBwYXJhbXMuCgkgKgoJICogQHBhcmFtCXN0cmluZwkJJHR5cGUJCUZpbGUgdHlwZS9sb2NhdGlvbiBuYW1lIHRvIHN0b3JlIGluLiBWYWxpZCB2YWx1ZXM6IGJhY2t1cCwgbWVkaWEsIHBsdWdpbiwgdGhlbWUuCgkgKgoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfZ2V0RmlsZVBhdGhCeVR5cGUoICR0eXBlICkgewoJCWlmICggJ2JhY2t1cCcgPT0gJHR5cGUgKSB7CgkJCSRyb290RGlyID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0QmFja3VwRGlyZWN0b3J5KCk7IC8vIEluY2x1ZGUgdHJhaWxpbmcgc2xhc2guCgkJCXBiX2JhY2t1cGJ1ZGR5OjphbnRpX2RpcmVjdG9yeV9icm93c2luZyggJHJvb3REaXIsICRkaWUgPSBmYWxzZSApOwoJCX0gZWxzZWlmICggJ21lZGlhJyA9PSAkdHlwZSApIHsKCQkJJHdwX3VwbG9hZF9kaXIgPSB3cF91cGxvYWRfZGlyKCk7CgkJCSRyb290RGlyID0gJHdwX3VwbG9hZF9kaXJbJ2Jhc2VkaXInXSAuICcvJzsKCQkJdW5zZXQoICR3cF91cGxvYWRfZGlyICk7CgkJfSBlbHNlaWYgKCAncGx1Z2luJyA9PSAkdHlwZSApIHsKCQkJJHJvb3REaXIgPSB3cF9ub3JtYWxpemVfcGF0aCggV1BfUExVR0lOX0RJUiApIC4gJy8nOwoJCX0gZWxzZWlmICggJ3RoZW1lJyA9PSAkdHlwZSApIHsKCQkJJHJvb3REaXIgPSBnZXRfdGVtcGxhdGVfZGlyZWN0b3J5KCkgLiAnLyc7CgkJfSBlbHNlaWYgKCAnY2hpbGRUaGVtZScgPT0gJHR5cGUgKSB7CgkJCSRyb290RGlyID0gZ2V0X3N0eWxlc2hlZXRfZGlyZWN0b3J5KCkgLiAnLyc7CgkJfSBlbHNlaWYoICd0ZXN0JyA9PSAkdHlwZSApIHsKCQkJJHJvb3REaXIgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCk7CgkJfSBlbHNlaWYoICdleHRyYScgPT0gJHR5cGUgKSB7CgkJCSRyb290RGlyID0gQUJTUEFUSDsgLy8gaW5jbHVkZXMgdHJhaWxpbmcgc2xhc2guCgkJfSBlbHNlIHsKCQkJJGVycm9yID0gJ0Vycm9yICM4NDkzNDk4NC4gWW91IG11c3Qgc3BlY2lmeSBhIHNlbmRmaWxlIHR5cGU6IFVua25vd24gZmlsZSB0eXBlIGAnIC4gaHRtbGVudGl0aWVzKCAkdHlwZSApIC4gJ2AuJzsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGVycm9yICk7CgkJCWVycm9yX2xvZyggJ0JhY2t1cEJ1ZGR5IEFQSSBlcnJvcjogJyAuICRlcnJvciApOwoJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCX0KCQkvL2Vycm9yX2xvZyggJ3Jvb3REaXI6ICcgLiAkcm9vdERpciApOwoJCXJldHVybiAkcm9vdERpcjsKCX0gLy8gRW5kIF9nZXRGaWxlUGF0aEJ5VHlwZSgpLgoKCgkvKiBfZ2V0RmlsZSgpCgkgKgoJICogQ2FsbGluZyBzaXRlIGlzIHdhbnRpbmcgdG8gZ2V0IGEgZmlsZSBGUk9NIHRoaXMgc2l0ZS4KCSAqCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9nZXRGaWxlKCAkdHlwZSApIHsKCQkkcm9vdERpciA9IHNlbGY6Ol9nZXRGaWxlUGF0aEJ5VHlwZSggJHR5cGUgKTsgLy8gY29udGFpbnMgdHJhaWxpbmcgc2xhc2guCgkJJGZpbGVQYXRoID0gc3RyaXBzbGFzaGVzX2RlZXAoIHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnZmlsZW5hbWUnIF0gKTsKCQkkZnVsbEZpbGVuYW1lID0gJHJvb3REaXIgLiAkZmlsZVBhdGg7CgoJCSRzZWVrVG8gPSBzZWxmOjokX2luY29taW5nUGF5bG9hZFsgJ3NlZWt0bycgXTsKCQlpZiAoICEgaXNfbnVtZXJpYyggJHNlZWtUbyApICkgewoJCQkkc2Vla1RvID0gMDsKCQl9CgoJCSRtYXhQYXlsb2FkID0gc2VsZjo6JF9pbmNvbWluZ1BheWxvYWRbICdtYXhQYXlsb2FkJyBdOyAvLyBNYXggcGF5bG9hZCBpbiBieXRlcy4KCQkkbWF4UGF5bG9hZEJ5dGVzID0gJG1heFBheWxvYWQgKiAxMDI0ICogMTAyNDsKCgkJLy8gRmlsZSBleGlzdD8gKG5vdGU6IGlmIHV0ZjggdGhlbiB0aGlzIGZpcnN0IGNoZWNrIHdpbGwgZmFpbCBhbmQgaW5zaWRlIHdlIHdpbGwgY2hlY2sgZm9yIHRoZSBmaWxlIGFmdGVyIHV0ZjggZGVjb2RpbmcuKQoJCWlmICggISBmaWxlX2V4aXN0cyggJGZ1bGxGaWxlbmFtZSApICkgewoJCQkvLyBDaGVjayBpZiB1dGY4IGRlY29kaW5nIHRoZSBmaWxlbmFtZSBoZWxwcyB1cyBmaW5kIGl0LgoJCQkkdXRmX2RlY29kZWRfZmlsZW5hbWUgPSB1dGY4X2RlY29kZSggJGZpbGVQYXRoICk7CgkJCWlmICggZmlsZV9leGlzdHMoICRyb290RGlyIC4gJHV0Zl9kZWNvZGVkX2ZpbGVuYW1lICkgKSB7CgkJCQkkZnVsbEZpbGVuYW1lID0gJHJvb3REaXIgLiAkdXRmX2RlY29kZWRfZmlsZW5hbWU7CgkJCX0gZWxzZSB7CgkJCQkkbWVzc2FnZSA9ICdFcnJvciAjODM5Mjk4Mzg6IFJlcXVlc3RlZCBgJyAuICR0eXBlIC4gJ2AgZmlsZSB3aXRoIGZ1bGwgcGF0aCBgJyAuICRmdWxsRmlsZW5hbWUgLiAnYCBkb2VzIG5vdCBleGlzdC4gV2FzIGl0IGp1c3QgZGVsZXRlZD8gU2VlIGxvZyBmb3IgZGV0YWlscy4nOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkbWVzc2FnZSApICk7CgkJCX0KCQl9CgoJCSRzaXplID0gZmlsZXNpemUoICRmdWxsRmlsZW5hbWUgKTsKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaWxlIHNpemUgb2YgZmlsZSB0byBnZXQ6ICcgLiBwYl9iYWNrdXBidWRkeTo6JGZvcm1hdC0+ZmlsZV9zaXplKCAkc2l6ZSApICk7CgoJCWlmICggJHNpemUgPiAkbWF4UGF5bG9hZEJ5dGVzICkgewoJCQkkY2h1bmtzVG90YWwgPSBjZWlsKCAkc2l6ZSAvICRtYXhQYXlsb2FkQnl0ZXMgKTsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVGhpcyBmaWxlICsgZW5jb2RpbmcgZXhjZWVkcyB0aGUgbWF4aW11bSBwZXItY2h1bmsgcGF5bG9hZCBzaXplIHNvIHdpbGwgYmUgcmVhZCBpbiBhbmQgc2VudCBpbiBjaHVua3Mgb2YgJyAuIHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnbWF4UGF5bG9hZCcgXSAuICdNQiAoJyAuICRtYXhQYXlsb2FkQnl0ZXMgLiAnIGJ5dGVzKSB0b3RhbGluZyBhcHByb3hpbWF0ZWx5ICcgLiAkY2h1bmtzVG90YWwgLiAnIGNodW5rcy4nICk7CgkJfSBlbHNlIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVGhpcyBmaWxlICsgZW5jb2RpbmcgZG9lcyBub3QgZXhjZWVkIHBlci1jaHVuayBwYXlsb2FkIHNpemUgb2YgJyAuIHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnbWF4UGF5bG9hZCcgXSAuICdNQiAoJyAuIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5maWxlX3NpemUoICRtYXhQYXlsb2FkQnl0ZXMgKSAuICcpIHNvIHNlbmRpbmcgaW4gb25lIHBhc3MuJyApOwoJCX0KCQkkcHJldlBvaW50ZXIgPSAwOwoKCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdSZWFkaW5nIGluIGAnIC4gJG1heFBheWxvYWRCeXRlcyAuICdgIGJ5dGVzIGF0IGEgdGltZS4nICk7CgoJCS8vIE9wZW4gZm9yIHJlYWRpbmcuCgkJaWYgKCBmYWxzZSA9PT0gKCAkZnMgPSBmb3BlbiggJGZ1bGxGaWxlbmFtZSwgJ3JiJyApICkpIHsKCQkJJG1lc3NhZ2UgPSAnRXJyb3IgIzIzNTUzMjogVW5hYmxlIHRvIGZvcGVuIGZpbGUgYCcgLiAkZnVsbEZpbGVuYW1lIC4gJ2AuJzsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IGZhbHNlLCAnZXJyb3InID0+ICRtZXNzYWdlICkgKTsKCQl9CgoJCS8vIFNlZWsgdG8gcG9zaXRpb24gKGlmIGFwcGxpY2FibGUpLgoJCWlmICggMCAhPSAkc2Vla1RvICkgewoJCQlpZiAoIDAgIT0gZnNlZWsoICRmcywgJHNlZWtUbyApICkgewoJCQkJQGZjbG9zZSggJGZzICk7CgkJCQkkbWVzc2FnZSA9ICdFcnJvciAjNjQ2NDUzNDIyOTogVW5hYmxlIHRvIGZzZWVrIGZpbGUuJzsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQl9CgkJfQoKCQkkcmVzdW1lUG9pbnQgPSAwOwoJCSRmaWxlRG9uZSA9IGZhbHNlOwoJCSRmaWxlRGF0YSA9IGZyZWFkKCAkZnMsICRtYXhQYXlsb2FkQnl0ZXMgKTsKCQlpZiAoIGZlb2YoICRmcyApICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdSZWFkIHRvIGVuZCBvZiBmaWxlIChmZW9mIHRydWUpLiBObyBtb3JlIGNodW5rcyBsZWZ0IGFmdGVyIHRoaXMuJyApOwoJCQkkZmlsZURvbmUgPSB0cnVlOwoJCX0gZWxzZSB7CgkJCWlmICggRkFMU0UgPT09ICggJHJlc3VtZVBvaW50ID0gZnRlbGwoICRmcyApICkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzQyMzUzMjEyOiBVbmFibGUgdG8gZ2V0IGZ0ZWxsIHBvaW50ZXIgb2YgZmlsZSBoYW5kbGUuJyApOwoJCQkJQGZjbG9zZSggJGZzICk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gZWxzZSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaWxlIHBvaW50ZXIgcmVzdW1lIHBvaW50OiBgJyAuICRyZXN1bWVQb2ludCAuICdgLicgKTsKCQkJfQoJCX0KCQlAZmNsb3NlKCAkZnMgKTsKCgkJLy8gVE9ETzogSW4gZnV0dXJlIHBlcmhhcHMgcGFzcyBkYXRhIGFzIHRoZSBodHRwIHJlc3BvbnNlIGJvZHkgYW5kIHRoZXNlIGl0ZW1zIGluIGEgaHR0cCBoZWFkZXIgdG8gcHJldmVudCBwb3NzaWJsZSBjb3JydXB0aW9uIGluIHRoZSBzZXJpYWxpemVkIGRhdGEuCgkJJGZpbGUgPSBhcnJheSgKCQkJJ3N1Y2Nlc3MnICAgICAgPT4gdHJ1ZSwKCQkJJ2RhdGFsZW4nICAgICAgPT4gc3RybGVuKCAkZmlsZURhdGEgKSwKCQkJJ2RvbmUnICAgICAgICAgPT4gJGZpbGVEb25lLAoJCQknc2l6ZScgICAgICAgICA9PiAkc2l6ZSwKCQkJJ3Jlc3VtZXBvaW50JyAgPT4gJHJlc3VtZVBvaW50LAoJCQknZW5jb2RlZCcgICAgICA9PiBpc3NldCggJHV0Zl9kZWNvZGVkX2ZpbGVuYW1lICksIC8vIG9ubHkgaXNzZXQgaWYgdXRmOCB3YXMgbmVlZGVkIHRvIGZpbmQgdGhpcyBmaWxlLgoJCQknZGF0YScgICAgICAgICA9PiAkZmlsZURhdGEsCgkJKTsKCgkJc2VsZjo6X3JlcGx5KCAkZmlsZSApOwoKCX0gLy8gRW5kIF9nZXRGaWxlKCkuCgoKCgkvKiBfc2VuZEZpbGVzKCkKCSAqCgkgKiBDYWxsaW5nIHNpdGUgaXMgd2FudGluZyB0byBzZW5kIGZpbGUocykgVE8gdGhpcyBzaXRlLiBDYWxsZWQgYnkgdmFyaW91cyB2ZXJicyB0aGF0IHBhc3MgdGhlIGFwcHJvcHJpYXRlICR0eXBlIHRoYXQgZGV0ZXJtaW5lcyByb290IHBhdGguIFZhbGlkIHR5cGVzOiBiYWNrdXAsIHRoZW1lLCBwbHVnaW4sIG1lZGlhCgkgKgoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfc2VuZEZpbGVzKCAkdHlwZSA9ICcnICkgewoJCS8vZXJyb3JfbG9nKCAndHlwZTonIC4gJHR5cGUgKTsKCQkkcm9vdERpciA9IHNlbGY6Ol9nZXRGaWxlUGF0aEJ5VHlwZSggJHR5cGUgKTsgLy8gY29udGFpbnMgdHJhaWxpbmcgc2xhc2guCgkJLy9lcnJvcl9sb2coICdBUEkgc2F2aW5nIGZpbGUgdG8gZGlyOiBgJyAuICRyb290RGlyIC4gJ2AuJyApOwoKCQkkZmlsZVJlY2VpdmVDb3VudCA9IDA7CgkJJGJ5dGVzUmVjZWl2ZWQgPSAwOwoKCQlmb3JlYWNoKCBzZWxmOjokX2luY29taW5nUGF5bG9hZFsnZmlsZXMnXSBhcyAkZmlsZSApIHsKCQkJLy9lcnJvcl9sb2coICdmaWxlOiAnIC4gJGZpbGUgKTsKCQkJLy8kZmlsZSA9IHN0cl9yZXBsYWNlKCBhcnJheSggJ1xcJywgJy8nICksICcnLCBzdHJpcHNsYXNoZXNfZGVlcCggc2VsZjo6JF9pbmNvbWluZ1BheWxvYWRbICdmaWxlbmFtZScgXSApICk7CgkJCSRmaWxlUGF0aCA9ICcnOwoJCQlpZiAoIGlzc2V0KCAkZmlsZVsgJ2ZpbGVwYXRoJyBdICkgKSB7CgkJCQkkZmlsZVBhdGggPSAkZmlsZVsgJ2ZpbGVwYXRoJyBdOwoJCQl9CgkJCWlmICggJycgIT0gJGZpbGVQYXRoICkgeyAvLyBGaWxlcGF0aCBzcGVjaWZpZWQgc28gZ29lcyBpbiBhIHN1YmRpcmVjdG9yeSB1bmRlciB0aGUgcm9vdERpci4KCQkJCWlmICggJGZpbGUgIT0gYmFzZW5hbWUoICRmaWxlUGF0aCApICkgewoJCQkJCS8vIENoZWNrIGlmIHV0ZjggZGVjb2RpbmcgdGhlIGZpbGVuYW1lIGhlbHBzIG1hdGNoIGNvcnJlY3RseQoJCQkJCSR1dGZfZGVjb2RlZF9maWxlUGF0aCA9IHV0ZjhfZGVjb2RlKCAkZmlsZVBhdGggKTsKCQkJCQlpZiAoICRmaWxlID09IGJhc2VuYW1lKCAkdXRmX2RlY29kZWRfZmlsZVBhdGggKSApIHsKCQkJCQkJJGZpbGVQYXRoID0gJHN1YkZpbGVQYXRoID0gJHV0Zl9kZWNvZGVkX2ZpbGVQYXRoOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRtZXNzYWdlID0gJ0Vycm9yICM0OTM4NDQ6IFRoZSBzcGVjaWZpZWQgZmlsZW5hbWUgd2l0aGluIHRoZSBmaWxlcGF0aCBwYXJhbWV0ZXIgZG9lcyBub3QgbWF0Y2ggdGhlIHN1cHBsaWVkIGZpbGVuYW1lIHBhcmFtZXRlci4gfCBjbGVhbmZpbGU6ICcgLiAkZmlsZSAuICcgfCBmaWxlUGF0aDogfCAnIC4gJGZpbGVQYXRoOwoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOwoJCQkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQkJCX0KCQkJCX0gZWxzZSB7IC8vIEZpbGVuYW1lIHdpdGggcGF0aC4KCQkJCQkkc3ViRmlsZVBhdGggPSAkZmlsZVBhdGg7CgkJCQl9CgkJCX0gZWxzZSB7IC8vIEp1c3QgdGhlIGZpbGVuYW1lLiBObyBwYXRoLgoJCQkJJHN1YkZpbGVQYXRoID0gJGZpbGVbJ2ZpbGUnXTsKCQkJfQoKCQkJLy9lcnJvcl9sb2coICdhOicgLiAkcm9vdERpciApOwoJCQkvL2Vycm9yX2xvZyggJ2I6JyAuICRzdWJGaWxlUGF0aCApOwoJCQkkc2F2ZUZpbGUgPSAkcm9vdERpciAuICRzdWJGaWxlUGF0aDsKCQkJLy9lcnJvcl9sb2coICdzYXZlRmlsZTogJyAuICRzYXZlRmlsZSApOwoJCQkvL2Vycm9yX2xvZyggcHJpbnRfciggJGZpbGUsIHRydWUgKSApOwoKCQkJLy8gQ2FsY3VsYXRlIHNlZWsgcG9zaXRpb24uCgkJCSRzZWVrVG8gPSAkZmlsZVsgJ3NlZWt0bycgXTsKCQkJaWYgKCAhIGlzX251bWVyaWMoICRzZWVrVG8gKSApIHsKCQkJCSRzZWVrVG8gPSAwOwoJCQl9CgoJCQkvLyBDaGVjayBpZiBkaXJlY3RvcnkgZXhpc3RzICYgY3JlYXRlIGlmIG5lZWRlZC4KCQkJJHNhdmVEaXIgPSBkaXJuYW1lKCAkc2F2ZUZpbGUgKTsKCgoJCQkvLyBEZWxldGUgZXhpc3RpbmcgZGlyZWN0b3J5IGZvciBzb21lIHR5cGVzIG9mIHRyYW5zZmVycy4KCgkJCWlmICggKCAwID09ICRzZWVrVG8gKSAmJiAoIGZpbGVfZXhpc3RzKCAkc2F2ZUZpbGUgKSApICkgeyAvLyBOZXcgZmlsZSB0cmFuc2ZlciBvbmx5LiBEbyBub3QgZGVsZXRlIGV4aXN0aW5nIGZpbGUgaWYgY2h1bmtpbmcuCgkJCQlpZiAoIHRydWUgIT09IEB1bmxpbmsoICRzYXZlRmlsZSApICkgewoJCQkJCSRtZXNzYWdlID0gJ0Vycm9yICMyMzg3MjI6IFVuYWJsZSB0byBkZWxldGUgZXhpc3RpbmcgZmlsZSBgJyAuICRzYXZlRmlsZSAuICdgLic7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQkJfQoJCQl9CgoJCQlpZiAoICEgaXNfZGlyKCAkc2F2ZURpciApICkgewoJCQkJaWYgKCB0cnVlICE9PSBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0tPm1rZGlyKCAkc2F2ZURpciApICkgewoJCQkJCSRtZXNzYWdlID0gJ0Vycm9yICMzMjc4MzI6IFVuYWJsZSB0byBjcmVhdGUgZGlyZWN0b3J5IGAnIC4gJHNhdmVEaXIgLiAnYC4gQ2hlY2sgcGVybWlzc2lvbnMgb3IgbWFudWFsbHkgY3JlYXRlLiBIYWx0aW5nIHRvIHByZXNlcnZlIGRlcGxveW1lbnQgaW50ZWdyaXR5JzsKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOwoJCQkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkbWVzc2FnZSApICk7CgkJCQl9CgkJCX0KCgkJCS8vIE9wZW4vY3JlYXRlIGZpbGUgZm9yIHdyaXRlL2FwcGVuZC4KCQkJaWYgKCBmYWxzZSA9PT0gKCAkZnMgPSBmb3BlbiggJHNhdmVGaWxlLCAnYScgKSApKSB7CgkJCQkkbWVzc2FnZSA9ICdFcnJvciAjNDg5MzM5ODQ4OiBVbmFibGUgdG8gZm9wZW4gZmlsZSBgJyAuICRzYXZlRmlsZSAuICdgLic7CgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOwoJCQkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IGZhbHNlLCAnZXJyb3InID0+ICRtZXNzYWdlICkgKTsKCQkJfQoKCQkJLy8gU2VlayB0byBwb3NpdGlvbiAoaWYgYXBwbGljYWJsZSkuCgkJCWlmICggMCAhPSBmc2VlayggJGZzLCAkc2Vla1RvICkgKSB7CgkJCQlAZmNsb3NlKCAkZnMgKTsKCQkJCSRtZXNzYWdlID0gJ0Vycm9yICM4NTg0ODg0OiBVbmFibGUgdG8gZnNlZWsgZmlsZS4nOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkbWVzc2FnZSApICk7CgkJCX0KCgkJCS8vIENoZWNrIGRhdGEgbGVuZ3RoLgoJCQkkZ290TGVuZ3RoID0gc3RybGVuKCAkZmlsZVsgJ2RhdGEnIF0gKTsKCQkJaWYgKCAkZmlsZVsnZGF0YWxlbiddICE9ICRnb3RMZW5ndGggKSB7CgkJCQlAZmNsb3NlKCAkZnMgKTsKCQkJCSRtZXNzYWdlID0gJ0Vycm9yICM0MzU1NDQ1OiBSZWNlaXZlZCBkYXRhIG9mIGxlbmd0aCBgJyAuICRnb3RMZW5ndGggLiAnYCBkaWQgbm90IG1hdGNoIHNlbnQgbGVuZ3RoIG9mIGAnIC4gJGZpbGVbICdkYXRhbGVuJyBdIC4gJ2AuIERhdGEgbWF5IGhhdmUgYmVlbiB0cnVuY2F0ZWQuJzsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQl9CgoJCQkvLyBXcml0ZSB0byBmaWxlLgoJCQlpZiAoIGZhbHNlID09PSAoICRieXRlc1dyaXR0ZW4gPSBmd3JpdGUoICRmcywgJGZpbGVbICdkYXRhJyBdICkgKSApIHsKCQkJCUBmY2xvc2UoICRmcyApOwoJCQkJQHVubGluayggJHNhdmVGaWxlICk7CgkJCQkkbWVzc2FnZSA9ICdFcnJvciAjMzk4NDM5NDogRXJyb3Igd3JpdGluZyB0byBmaWxlIGAnIC4gJHNhdmVGaWxlIC4gJ2AuJzsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQl9IGVsc2UgewoJCQkJQGZjbG9zZSggJGZzICk7CgoJCQkJJG1lc3NhZ2UgPSAnV3JvdGUgYCcgLiAkYnl0ZXNXcml0dGVuIC4gJ2AgYnl0ZXMgdG8gYCcgLiAkc2F2ZUZpbGUgLiAnYC4nOwoJCQkJJGJ5dGVzUmVjZWl2ZWQgKz0gJGJ5dGVzV3JpdHRlbjsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJG1lc3NhZ2UgKTsKCgkJCQlpZiAoICggJzEnID09ICRmaWxlWyAndGVzdCcgXSApIHx8ICggJ3Rlc3QnID09ICR0eXBlICkgKSB7CgkJCQkJQHVubGluayggJHNhdmVGaWxlICk7CgkJCQl9IGVsc2UgewoJCQkJCWlmICggdHJ1ZSA9PT0gJGZpbGVbJ2RvbmUnXSApIHsKCQkJCQkJJGRlc3RGaWxlID0gQUJTUEFUSCAuIGJhc2VuYW1lKCAkc2F2ZUZpbGUgKTsKCQkJCQkJLyoKCQkJCQkJaWYgKCBmYWxzZSA9PT0gQGNvcHkoICRzYXZlRmlsZSwgJGRlc3RGaWxlICkgKSB7CgkJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzk0ODQ1NDogVW5hYmxlIHRvIGNvcHkgdGVtcG9yYXJ5IGZpbGUgYCcgLiAkc2F2ZUZpbGUgLiAnYCB0byBgJyAuICRkZXN0RmlsZSAuICdgLicgKTsKCQkJCQkJfQoJCQkJCQlAdW5saW5rKCAkc2F2ZUZpbGUgKTsKCQkJCQkJKi8KCgkJCQkJCS8vIE1lZGlhIGZpbGVzIG5lZWQgdGhlaXIgdGh1bWJuYWlscyByZWdlbmVyYXRlZCBzbyBnZXQgYXR0YWNobWVudCBJRC4KCQkJCQkJLyogQ0FOTk9UIERPIFRISVMgSEVSRSAuLi4gYmVjYXVzZSBpdGVtIG1heSBub3QgYmUgaW4gdGhlIERCIHlldC4gbmVlZCB0byB0cmFuc2ZlciB0aHVtYm5haWxzPwoJCQkJCQlpZiAoICdtZWRpYScgPT0gJHR5cGUgKSB7CgkJCQkJCQlnbG9iYWwgJHdwZGI7CgkJCQkJCQkkc3FsID0gIlNFTEVDVCBwb3N0X2lkIEZST00gYCIgLiBEQl9OQU1FIC4gImAuYCIgLiAkd3BkYi0+cHJlZml4IC4gInBvc3RtZXRhYCBXSEVSRSBgbWV0YV92YWx1ZWAgPSAlcyBBTkQgYG1ldGFfa2V5YCA9ICdfd3BfYXR0YWNoZWRfZmlsZSciOwoJCQkJCQkJJHNxbCA9ICR3cGRiLT5wcmVwYXJlKCAkc3FsLCAkZmlsZVBhdGggKTsKCQkJCQkJCWVycm9yX2xvZyggJHNxbCApOwoJCQkJCQkJJGF0dGFjaG1lbnRfaWQgPSAkd3BkYi0+Z2V0X3ZhciggJHNxbCApOwoJCQkJCQkJZXJyb3JfbG9nKCAnSUQ6ICcgLiAkYXR0YWNobWVudF9pZCApOwoJCQkJCQkJZXJyb3JfbG9nKCAnc2F2ZWZpbGU6ICcgLiAkc2F2ZUZpbGUgKTsKCQkJCQkJCXJlcXVpcmUgKCBBQlNQQVRIIC4gJ3dwLWFkbWluL2luY2x1ZGVzL2ltYWdlLnBocCcgKTsKCQkJCQkJCSRhdHRhY2hfZGF0YSA9IHdwX2dlbmVyYXRlX2F0dGFjaG1lbnRfbWV0YWRhdGEoICRhdHRhY2htZW50X2lkLCAkc2F2ZUZpbGUgKTsKCQkJCQkJCXdwX3VwZGF0ZV9hdHRhY2htZW50X21ldGFkYXRhKCAkYXR0YWNobWVudF9pZCwgICRhdHRhY2hfZGF0YSApOwoJCQkJCQl9CgkJCQkJCSovCgoJCQkJCQkkZmlsZVJlY2VpdmVDb3VudCsrOwoJCQkJCX0KCQkJCX0KCgkJCQljb250aW51ZTsKCQkJfQoJCX0KCgkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IHRydWUsICdtZXNzYWdlJyA9PiAnUmVjZWl2ZWQgYSB0b3RhbCBvZiBgJyAuICRmaWxlUmVjZWl2ZUNvdW50IC4gJyBmaWxlcywgYCcgLiAkYnl0ZXNSZWNlaXZlZCAuICdgIGJ5dGVzLicgKSApOwoKCX0gLy8gRW5kIF9zZW5kRmlsZSgpLgoKCgoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3ZlcmJfZ2V0UHJlRGVwbG95SW5mbygpIHsKCQkkc2hhMSA9IGZhbHNlOwoJCWlmICggJzEnID09IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWyAnc2hhMScgXSApIHsKCQkJJHNoYTEgPSB0cnVlOwoJCX0KCgkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IHRydWUsICdkYXRhJyA9PiBiYWNrdXBidWRkeV9hcGk6OmdldFByZURlcGxveUluZm8oICRzaGExLCBzZWxmOjokX2luY29taW5nUGF5bG9hZFsgJ2Rlc3RpbmF0aW9uU2V0dGluZ3MnIF0gKSApICk7Cgl9IC8vIEVuZCBfdmVyYl9nZXRQcmVEZXBsb3lJbmZvKCkuCgoKCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF92ZXJiX3JlbmRlckltcG9ydEJ1ZGR5KCkgewoJCSRiYWNrdXBGaWxlID0gc2VsZjo6JF9pbmNvbWluZ1BheWxvYWRbICdiYWNrdXBGaWxlJyBdOwoJCSRwYXNzd29yZCA9IG1kNSggbWQ1KCBiYWNrdXBidWRkeV9jb3JlOjpnZXRIdHRwSGVhZGVyKCAnYmFja3VwYnVkZHktYXBpLWtleScgKSApICk7CgkJJG1heF9leGVjdXRpb25fdGltZSA9IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWydtYXhfZXhlY3V0aW9uX3RpbWUnXTsKCgkJJGRvSW1wb3J0Q2xlYW51cCA9IHRydWU7CgkJaWYgKCAndHJ1ZScgPT0gc2VsZjo6JF9pbmNvbWluZ1BheWxvYWRbJ2RvSW1wb3J0Q2xlYW51cCddICkgewoJCQkkZG9JbXBvcnRDbGVhbnVwID0gdHJ1ZTsKCQl9IGVsc2VpZiAoICdmYWxzZScgPT0gc2VsZjo6JF9pbmNvbWluZ1BheWxvYWRbJ2RvSW1wb3J0Q2xlYW51cCddICkgewoJCQkkZG9JbXBvcnRDbGVhbnVwID0gZmFsc2U7CgkJfQoKCgkJLy8gU3RvcmUgdGhpcyBzZXJpYWwgaW4gc2V0dGluZ3MgdG8gY2xlYW51cCBhbnkgdGVtcCBkYiB0YWJsZXMgaW4gdGhlIGZ1dHVyZSB3aXRoIHRoaXMgc2VyaWFsIHdpdGggcGVyaW9kaWMgY2xlYW51cC4KCQkkYmFja3VwU2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRiYWNrdXBGaWxlICk7CgkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyb2xsYmFja19jbGVhbnVwcyddWyAkYmFja3VwU2VyaWFsIF0gPSB0aW1lKCk7CgkJcGJfYmFja3VwYnVkZHk6OnNhdmUoKTsKCgkJJHNldEJsb2dQdWJsaWMgPSAnJzsKCQlpZiAoICd0cnVlJyA9PSBzZWxmOjokX2luY29taW5nUGF5bG9hZFsnc2V0QmxvZ1B1YmxpYyddICkgewoJCQkkc2V0QmxvZ1B1YmxpYyA9IHRydWU7CgkJfSBlbHNlaWYgKCAnZmFsc2UnID09IHNlbGY6OiRfaW5jb21pbmdQYXlsb2FkWydzZXRCbG9nUHVibGljJ10gKSB7CgkJCSRzZXRCbG9nUHVibGljID0gZmFsc2U7CgkJfQoJCSRhZGRpdGlvbmFsU3RhdGVJbmZvID0gYXJyYXkoCgkJCSdjbGVhbnVwJyA9PiBhcnJheSgKCQkJCSdzZXRfYmxvZ19wdWJsaWMnID0+ICRzZXRCbG9nUHVibGljLAoJCQkpCgkJKTsKCQlpZiAoIGlzX251bWVyaWMoICRtYXhfZXhlY3V0aW9uX3RpbWUgKSApIHsKCQkJJGFkZGl0aW9uYWxTdGF0ZUluZm9bJ21heEV4ZWN1dGlvblRpbWUnXSA9ICRtYXhfZXhlY3V0aW9uX3RpbWU7CgkJfQoKCQkkaW1wb3J0RmlsZVNlcmlhbCA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmRlcGxveW1lbnRJbXBvcnRCdWRkeSggJHBhc3N3b3JkLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSAuICRiYWNrdXBGaWxlLCAkYWRkaXRpb25hbFN0YXRlSW5mbywgJGRvSW1wb3J0Q2xlYW51cCApOwoJCWlmICggaXNfYXJyYXkoICRpbXBvcnRGaWxlU2VyaWFsICkgKSB7CgkJCXNlbGY6Ol9yZXBseSggYXJyYXkoICdzdWNjZXNzJyA9PiBmYWxzZSwgJ2Vycm9yJyA9PiAkaW1wb3J0RmlsZVNlcmlhbFsxXSApICk7CgkJfSBlbHNlIHsKCQkJc2VsZjo6X3JlcGx5KCBhcnJheSggJ3N1Y2Nlc3MnID0+IHRydWUsICdpbXBvcnRGaWxlU2VyaWFsJyA9PiAkaW1wb3J0RmlsZVNlcmlhbCApICk7CgkJfQoKCX0gLy8gRW5kIF92ZXJiX3JlbmRlckltcG9ydEJ1ZGR5KCkuCgoKCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaW5pdF9pbmNvbWluZ19jYWxsKCkgewoJCSRrZXlfcHVibGljID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0SHR0cEhlYWRlciggJ2JhY2t1cGJ1ZGR5LWFwaS1rZXknICk7CgkJJHZlcmIgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRIdHRwSGVhZGVyKCAnYmFja3VwYnVkZHktdmVyYicgKTsKCQkkdGltZSA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEh0dHBIZWFkZXIoICdiYWNrdXBidWRkeS1ub3cnICk7CgkJJHNpZ25hdHVyZSA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEh0dHBIZWFkZXIoICdiYWNrdXBidWRkeS1zaWduYXR1cmUnICk7CgoJCS8vIFRlbXBvcmFyeSBob2xkIG9mIGluY29taW5nIHBheWxvYWQuIFJlYWRpbmcgcGhwOi8vaW5wdXQgY2xlYXJzIGl0IHNvIGl0IGNhbm5vdCBiZSByZS1yZWFkLiBXQVJOSU5HOiBEbyBOT1QgdW5zZXJpYWxpemUgdW50aWwgY29uZmlybWVkIGZyb20gdmFsaWQga2V5LgoJCWlmICggZmFsc2UgPT09ICggJF9pbmNvbWluZ1BheWxvYWQgPSBAZmlsZV9nZXRfY29udGVudHMoJ3BocDovL2lucHV0JykgKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM0Mzg5MzQ4NDM0MzogVW5hYmxlIHRvIHJlYWQgcGhwOi8vaW5wdXQgKHZhbD1mYWxzZSkuJyApOwoJCX0KCgkJJG1heEFnZSA9IDYwKjYwOyAvLyBUaW1lIGluIHNlY29uZHMgYWZ0ZXIgd2hpY2ggYSBzaWduZWQgcmVxdWVzdCBpcyBkZWVtZWQgdG9vIG9sZC4gSGVscCBwcmV2ZW50IHJlcGxheXMuIDFoci4KCQlpZiAoIDAgPT0gY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVtb3RlX2FwaSddWydrZXlzJ10gKSApIHsKCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICMzNDg0OTQ4OTM0MzogTm8gQVBJIGtleXMgZm91bmQuIFNob3VsZCBub3QgaGFwcGVuLicgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdBYm91dCB0byBjaGVjayBrZXlzLi4uJyApOwoJCWZvcmVhY2goIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVtb3RlX2FwaSddWydrZXlzJ10gYXMgJGtleSApIHsKCQkJJGtleUFyciA9IHNlbGY6OmtleV90b19hcnJheSggJGtleSApOwoJCQlpZiAoIGZhbHNlID09PSAka2V5QXJyICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGVwbG95bWVudCBpbmNvbWluZyBjYWxsOiBBUEkga2V5IGAnIC4gJGtleSAuICdgIGRpZCBOT1QgbWF0Y2guIFRyeWluZyBuZXh0IChpZiBhbnkpLi4uJyApOwoKCQkJCXNlbGY6Ol9lcnJvciggJ1dhcm5pbmcgIzgzNDk4MzQ0MzogRmFpbHVyZSBkZWNvZGluZyBrZXkuIFNlZSByZXR1cm5lZCBsb2cgZGV0YWlscy4nICk7CgkJCQljb250aW51ZTsKCQkJfQoJCQlpZiAoICRrZXlfcHVibGljID09ICRrZXlBcnJbJ2tleV9wdWJsaWMnXSApIHsgLy8gSW5jb21pbmcgcHVibGljIGtleSBtYXRjaGVzIGEgc3RvcmVkIHB1YmxpYyBrZXkuCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdEZXBsb3ltZW50IGluY29taW5nIGNhbGw6IEtleSBtYXRjaGVzLicgKTsKCgkJCQkvLyBIYXMgY2FsbCBleHBpcmVkPwoJCQkJaWYgKCAoICEgaXNfbnVtZXJpYyggJHRpbWUgKSApIHx8ICggKCB0aW1lKCkgLSAkdGltZSApID4gJG1heEFnZSApICkgewoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0RlcGxveW1lbnQgaW5jb21pbmcgY2FsbDogS2V5IHRpbWVzdGFtcCBleHBpcmVkLiBUb28gb2xkISBDdXJyZW50bHk6IGAnIC4gdGltZSgpIC4gJ2AuIEtleSB0aW1lOiBgJyAuICR0aW1lIC4gJ2AuJyApOwoKCQkJCQkkbWVzc2FnZSA9ICdFcnJvciAjNDg0NTk4NTogQVBJIGNhbGwgdGltZXN0YW1wIGlzIHRvbyBvbGQuIFZlcmlmeSB0aGUgcmVhbHRpbWUgY2xvY2sgb24gZWFjaCBzZXJ2ZXIgaXMgcmVsYXRpdmVseSBpbiBzeW5jLic7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJG1lc3NhZ2UgKTsKCQkJCQlzZWxmOjpfcmVwbHkoIGFycmF5KCAnc3VjY2VzcycgPT4gZmFsc2UsICdlcnJvcicgPT4gJG1lc3NhZ2UgKSApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0KCQkJCS8vIFZlcmlmeSBzaWduYXR1cmUuCgkJCQkkY2FsY3VsYXRlZFNpZ25hdHVyZSA9IG1kNSggJHRpbWUgLiAkdmVyYiAuICRrZXlfcHVibGljIC4gJGtleUFyclsna2V5X3NlY3JldCddIC4gJF9pbmNvbWluZ1BheWxvYWQgKTsKCQkJCWlmICggJGNhbGN1bGF0ZWRTaWduYXR1cmUgIT0gJHNpZ25hdHVyZSApIHsgLy8gS2V5IG1hdGNoZWQgYnV0IHNpZ25hdHVyZSBmYWlsZWQuIERhdGEgaGFzIGJlZW4gdGVtcGVyZWQgd2l0aCBvciBkYW1hZ2VkIGluIHRyYW5zaXQuCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0RlcGxveW1lbnQgaW5jb21pbmcgY2FsbDogS2V5IHNpZ25hdHVyZSBtYXRjaCBmYWlsZWQuJyApOwoJCQkJCXJldHVybiBmYWxzZTsKCQkJCX0gZWxzZSB7IC8vIFNpZ25hdHVyZSBnb29kLgoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdEZXBsb3ltZW50IGluY29taW5nIGNhbGw6IFNpZ25hdHVyZSBnb29kLicgKTsKCgkJCQkJaWYgKCBmYWxzZSA9PT0gKCBzZWxmOjokX2luY29taW5nUGF5bG9hZCA9IEB1bnNlcmlhbGl6ZSggJF9pbmNvbWluZ1BheWxvYWQgKSApICkgeyAvLyBDb3JydXB0IHBheWxvYWQuCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdEZXBsb3ltZW50IGluY29taW5nIGNhbGw6IFBheWxvYWQgY29ycnVwdC91bmRlY29kYWJsZS4nICk7CgoJCQkJCQlzZWxmOjokX2luY29taW5nUGF5bG9hZCA9ICcnOwoJCQkJCQkkbWVzc2FnZSA9ICdCYWNrdXBCdWRkeSBFcnJvciAjMzg5MzM4MzogVmFsaWQga2V5IGJ1dCBpbmNvbWluZyBwYXlsb2FkIHVuc2VyaWFsaXphYmxlLiBDb3JydXB0Pyc7CgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJCQkJCWVycm9yX2xvZyggJG1lc3NhZ2UgKTsKCQkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJCX0KCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRGVwbG95bWVudCBpbmNvbWluZyBjYWxsOiBLZXkgYXV0aCBzdWNjZXNzLiBQcm9jZWVkaW5nLi4uJyApOwoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ3dhcm5pbmcnLCAnV2FybmluZyAjNDg5MzQ5ODM0OiBJbmNvbWluZyBrZXkgZGlkIG5vdCBtYXRjaCBwdWJsaWMga2V5LiBPbGQga2V5IGJlaW5nIHVzZWQ/IFRoaXMgc2l0ZSBwdWJsaWMga2V5OiBgJyAuICRrZXlBcnJbJ2tleV9wdWJsaWMnXSAuICdgLiBSZWNlaXZlZDogYCcgLiAka2V5X3B1YmxpYyAuICdgLicgKTsKCQkJfQoJCX0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzgzOTM4NDk0OiBNYWRlIGl0IHRvIGVuZCBvZiBjYWxsIGluaXQuJyApOwoJCXJldHVybiBmYWxzZTsKCX0gLy8gRW5kIGluaXRfaW5jb21pbmdfY2FsbCgpLgoKCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGtleV90b19hcnJheSggJGtleSApIHsKCQkka2V5ICA9IHRyaW0oICRrZXkgKTsKCQkka2V5QiA9IGJhc2U2NF9kZWNvZGUoICRrZXkgKTsKCQlpZiAoICEgJGtleUIgKSB7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdFcnJvciAjODQ5MzQ4NzQ5ODM0OiBVbmFibGUgdG8gZGVjb2RlIGtleSBkYXRhIGAnIC4gJGtleSAuICdgLicgKTsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkka2V5QyA9IHVuc2VyaWFsaXplKCAka2V5QiApOwoJCWlmICggZmFsc2UgPT09ICRrZXlDICkgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzMyODkzNzIzMzogVW5hYmxlIHRvIHVuc2VyaWFsaXplIGtleSBkYXRhIGAnIC4gJGtleUIgLiAnYC4nICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJcmV0dXJuICRrZXlDOwoJfQoKCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHZhbGlkYXRlX2FwaV9rZXkoICRrZXkgKSB7CgkJaWYgKCAhIGRlZmluZWQoICdCQUNLVVBCVUREWV9BUElfRU5BQkxFJyApIHx8ICggVFJVRSAhPSBCQUNLVVBCVUREWV9BUElfRU5BQkxFICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJLyoKCQlpZiAoICEgZGVmaW5lZCggJ0JBQ0tVUEJVRERZX0FQSV9TQUxUJyApIHx8ICggJ0NIQU5HRU1FJyA9PSBCQUNLVVBCVUREWV9BUElfU0FMVCApIHx8ICggc3RybGVuKCBCQUNLVVBCVUREWV9BUElfU0FMVCApIDwgNSApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoJCSovCgkJaWYgKCAnJyA9PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FwaV9rZXknXSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgoJCSRrZXkgPSBzZWxmOjprZXlfdG9fYXJyYXkoICRrZXkgKTsKCQlpZiAoICRrZXkgPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydhcGlfa2V5J10gKSB7CgkJCXJldHVybiB0cnVlOwoJCX0gZWxzZSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJfSAvLyBFbmQgdmFsaWRhdGVfYXBpX2tleSgpLgoKCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdlbmVyYXRlX2tleSgpIHsKCQlpZiAoICEgZGVmaW5lZCggJ0JBQ0tVUEJVRERZX0FQSV9FTkFCTEUnICkgfHwgKCBUUlVFICE9IEJBQ0tVUEJVRERZX0FQSV9FTkFCTEUgKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQkvKgoJCWlmICggISBkZWZpbmVkKCAnQkFDS1VQQlVERFlfQVBJX1NBTFQnICkgfHwgKCAnQ0hBTkdFTUUnID09IEJBQ0tVUEJVRERZX0FQSV9TQUxUICkgfHwgKCBzdHJsZW4oIEJBQ0tVUEJVRERZX0FQSV9TQUxUICkgPCA1ICkgKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgkJKi8KCgkJJHNpdGV1cmwgPSBzaXRlX3VybCgpOwoJCSRob21ldXJsID0gaG9tZV91cmwoKTsKCQkkcmFuZCA9IHBiX2JhY2t1cGJ1ZGR5OjpyYW5kb21fc3RyaW5nKCAxMiApOwoJCSRyYW5kMiA9IHBiX2JhY2t1cGJ1ZGR5OjpyYW5kb21fc3RyaW5nKCAxMiApOwoKCQkka2V5ID0gYXJyYXkoCgkJCSdrZXlfdmVyc2lvbicgPT4gMSwKCQkJJ2tleV9wdWJsaWMnID0+IG1kNSggJHJhbmQgLiBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICRzaXRldXJsIC4gJGhvbWV1cmwgLiB0aW1lKCkgKSwKCQkJJ2tleV9zZWNyZXQnID0+IG1kNSggJHJhbmQyIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAkc2l0ZXVybCAuICRob21ldXJsIC4gdGltZSgpICksCgkJCSdrZXlfY3JlYXRlZCcgPT4gdGltZSgpLAoJCQknc2l0ZXVybCcgPT4gJHNpdGV1cmwsCgkJCSdob21ldXJsJyA9PiAkaG9tZXVybCwKCQkpOwoKCgkJcmV0dXJuIGJhc2U2NF9lbmNvZGUoIHNlcmlhbGl6ZSggJGtleSApICk7CgoJfSAvLyBFbmQgZ2VuZXJhdGVfYXBpX2tleSgpLgoKCgkvKiBfZXJyb3IoKQoJICoKCSAqIExvZ3MgZXJyb3IgbWVzc2FnZXMgZm9yIHJldHJpZXZhbCB3aXRoIGdldEVycm9ycygpLgoJICoKCSAqIEBwYXJhbQlzdHJpbmcJCSRtZXNzYWdlCUVycm9yIG1lc3NhZ2UgdG8gbG9nLgoJICogQHJldHVybgludWxsCgkgKi8KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9lcnJvciggJG1lc3NhZ2UgKSB7CgkJLy9lcnJvcl9sb2coICRtZXNzYWdlICk7CgkJc2VsZjo6JF9lcnJvcnNbXSA9ICRtZXNzYWdlOwoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRtZXNzYWdlICk7CgkJcmV0dXJuIGZhbHNlOwoJfQoKCgoJLyogZ2V0RXJyb3JzKCkKCSAqCgkgKiBHZXQgYW55IGVycm9ycyB3aGljaCBtYXkgaGF2ZSBvY2N1cnJlZC4KCSAqCgkgKiBAcmV0dXJuCWFycmF5IAkJUmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmcgZXJyb3IgbWVzc2FnZXMuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0RXJyb3JzKCkgewoJCXJldHVybiBzZWxmOjokX2Vycm9yczsKCX0gLy8gRW5kIGdldEVycm9ycygpOwoKCgp9IC8vIEVuZCBjbGFzcy4K
###PACKDATA,FILE_END,/classes/remote_api.php,importbuddy/classes/remote_api.php
###PACKDATA,FILE_START,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
Ly8gbGVhbk1vZGFsIHYxLjEuMSBieSBSYXkgU3RvbmUgLSBodHRwOi8vZmluZWx5c2xpY2VkLmNvbS5hdQovLyBNb2RpZmllZCBieSBCcmlhbiBEaUNoaWFyYSwgdXNlZCB0cmFuc2xhdGVYKC01MCUpIHRvIGNlbnRlciBtb2RhbC4KLy8gRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwKCihmdW5jdGlvbigkKXskLmZuLmV4dGVuZCh7bGVhbk1vZGFsOmZ1bmN0aW9uKG9wdGlvbnMpe3ZhciBkZWZhdWx0cz17dG9wOjEwMCxvdmVybGF5OjAuNSxjbG9zZUJ1dHRvbjpudWxsfTt2YXIgb3ZlcmxheT0kKCI8ZGl2IGlkPSdsZWFuX292ZXJsYXknPjwvZGl2PiIpOyQoImJvZHkiKS5hcHBlbmQob3ZlcmxheSk7b3B0aW9ucz0kLmV4dGVuZChkZWZhdWx0cyxvcHRpb25zKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG89b3B0aW9uczskKHRoaXMpLmNsaWNrKGZ1bmN0aW9uKGUpe3ZhciBtb2RhbF9pZD0kKHRoaXMpLmF0dHIoImhyZWYiKTskKCIjbGVhbl9vdmVybGF5IikuY2xpY2soZnVuY3Rpb24oKXtjbG9zZV9tb2RhbChtb2RhbF9pZCl9KTskKG8uY2xvc2VCdXR0b24pLmNsaWNrKGZ1bmN0aW9uKCl7Y2xvc2VfbW9kYWwobW9kYWxfaWQpfSk7dmFyIG1vZGFsX2hlaWdodD0kKG1vZGFsX2lkKS5vdXRlckhlaWdodCgpOwokKCIjbGVhbl9vdmVybGF5IikuY3NzKHsiZGlzcGxheSI6ImJsb2NrIixvcGFjaXR5OjB9KTskKCIjbGVhbl9vdmVybGF5IikuZmFkZVRvKDIwMCxvLm92ZXJsYXkpOyQobW9kYWxfaWQpLmNzcyh7ImRpc3BsYXkiOiJibG9jayIsInBvc2l0aW9uIjoiZml4ZWQiLCJvcGFjaXR5IjowLCJ6LWluZGV4IjoxMTAwMCwibGVmdCI6NTArIiUiLCJ0cmFuc2Zvcm0iOiJ0cmFuc2xhdGVYKC01MCUpIiwidG9wIjpvLnRvcCsicHgifSk7JChtb2RhbF9pZCkuZmFkZVRvKDIwMCwxKTtlLnByZXZlbnREZWZhdWx0KCl9KX0pO2Z1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXskKCIjbGVhbl9vdmVybGF5IikuZmFkZU91dCgyMDApOyQobW9kYWxfaWQpLmNzcyh7ImRpc3BsYXkiOiJub25lIn0pfX19KX0pKGpRdWVyeSk7Cg==
###PACKDATA,FILE_END,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/css/animate.css,importbuddy/css/animate.css

###PACKDATA,FILE_END,/css/animate.css,importbuddy/css/animate.css
###PACKDATA,FILE_START,/images/working.gif,importbuddy/images/working.gif
R0lGODlhKwALAPEAAPn5+SiKt5LC2CiKtyH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAKwALAAACMoSOCMuW2diD88UKG95W88uF4DaGWFmhZid93pq+pwxnLUnXh8ou+sSz+T64oCAyTBUAACH5BAkKAAAALAAAAAArAAsAAAI9xI4IyyAPYWOxmoTHrHzzmGHe94xkmJifyqFKQ0pwLLgHa82xrekkDrIBZRQab1jyfY7KTtPimixiUsevAAAh+QQJCgAAACwAAAAAKwALAAACPYSOCMswD2FjqZpqW9xv4g8KE7d54XmMpNSgqLoOpgvC60xjNonnyc7p+VKamKw1zDCMR8rp8pksYlKorgAAIfkECQoAAAAsAAAAACsACwAAAkCEjgjLltnYmJS6Bxt+sfq5ZUyoNJ9HHlEqdCfFrqn7DrE2m7Wdj/2y45FkQ13t5itKdshFExC8YCLOEBX6AhQAADs=
###PACKDATA,FILE_END,/images/working.gif,importbuddy/images/working.gif
###PACKDATA,FILE_START,/images/bullet_go.png,importbuddy/images/bullet_go.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEsSURBVDjLY/j//z8DJZhhmBuQvdj8a+p8w//xc3U5yTIgeb7h18bNUf/DZ2j8958qz0nQgPyltv9zF5v/TV9o/Ddxrv7fmvWh/1ednvi/ZLX/f9d+8b+23YI8eA0AOvn/hnPT/q89OwWsccXpCf8n7Cn5v/B41/+MpW7/TdvZ/+o2M/LjNADoZLDmvl35/zt3ZP9v3Zb2v2Fz4v+mren/Zxxq/h+zwOa/aj3DH5wGRM/W/L/y1IT/S0/0/l94rOv/vKMdQEOy/k8/1PQ/banHf8VahlfSlQwGOA0InK74z3Oi9D/nftF/1t38/+LmW/2fdrDhf9Jit//ytQzPJSsZtEiKBe1mxq/xC53/y1czPAFqVic5GoFO/ipXzfxftJJBkeyUKFzOwDm48wIAh5XH+g7drOwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/bullet_go.png,importbuddy/images/bullet_go.png
###PACKDATA,FILE_START,/images/favicon.png,importbuddy/images/favicon.png
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
###PACKDATA,FILE_END,/images/favicon.png,importbuddy/images/favicon.png
###PACKDATA,FILE_START,/images/sort_down.png,importbuddy/images/sort_down.png
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAHBJREFUeNqMkD0OABEQRmcmVChIqN3/WBJHoLVYxK7GK4TvZwIMIcANrC0xxpJSOkzOOXjvASvUBOdcOxzBoXeDRhO11p+QlBKEEKtNc2OMAcbYKxL1aTsrWE201u4lPB4zUUphzrn8r9HA2+95BBgA3YASwqCieowAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/sort_down.png,importbuddy/images/sort_down.png
###PACKDATA,FILE_START,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
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
###PACKDATA,FILE_END,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
###PACKDATA,FILE_START,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php

###PACKDATA,FILE_END,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php
###PACKDATA,FILE_START,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
MS4wLjAgLSAyMDExLTA4LTE4IC0gRHVzdGluIEJvbHRvbgoJQ3JlYXRlZCBkYnJlcGxhY2UgY2xhc3Mu
###PACKDATA,FILE_END,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
###PACKDATA,FILE_START,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
###PACKDATA,FILE_START,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
###PACKDATA,FILE_START,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
PD9waHAKLy8gVE9ETzogRXZlbnR1YWxseSBwdWxsIG91dCBhbGwgY29tbWFuZCBsaW5lIGV4ZWN1dGlvbiB0byBydW4gdGhyb3VnaCB0aGlzIGxpYnJhcnkuCi8vCQlDdXJyZW50bHkgY29kZSBpcyBkdWNwbGljYXRlZCBiZXR3ZWVuIHRoZSBsaWJyYXJpZXMgdGhhdCBydW4gY29tbWFuZCBsaW5lIGNvbW1hbmRzLgoKY2xhc3MgcGJfYmFja3VwYnVkZHlfY29tbWFuZGJ1ZGR5IHsKCQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewoJfQoJCgkvKglleGVjdXRlKCkKCSAqCQoJICoJRXhlY3V0ZSBhIGNvbW1hbmQgdmlhIHRoZSBjb21tYW5kIGxpbmUuCgkgKglFeGFtcGxlIHVzYWdlOgoJICoJCWxpc3QoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICkgPSAkdGhpcy0+ZXhlY3V0ZSggJ0NPTU1BTkRISEVSRScgKTsKCSAqCQoJICoJQHBhcmFtCQlzdHJpbmcJCSRjb21tYW5kCQlDb21tYW5kIGxpbmUgdG8gcnVuLgoJICoJQHJldHVybgkJYXJyYXkJCQkJCQlBc3NvY2lhdGl2ZSBhcnJheSBvZiB0aGUgcmVzcG9uc2Ugb3V0cHV0IGFuZCBleGlzdCBjb2RlLiBVc2Ugd2l0aCBsaXN0IHRvIGFzc2lnbiB2YXJpYWJsZXMuCgkgKgkJCQkJCQkJCQkJRm9ybWF0OiBhcnJheSggRVhFQ19PVVRQVVQsIEVYSVRfQ09ERSApOwoJICovCglwdWJsaWMgZnVuY3Rpb24gZXhlY3V0ZSggJGNvbW1hbmQgKSB7CgkJaWYgKCBzdHJpc3RyKCBQSFBfT1MsICdXSU4nICkgJiYgIXN0cmlzdHIoIFBIUF9PUywgJ0RBUldJTicgKSApIHsKCQkJLy8gV2luZG93czsgZG8gbm90aGluZy4KCQl9IGVsc2UgeyAvLyBMaW51eC9NYWMKCQkJaWYgKCAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPT0gZmFsc2UgKSAmJiAoIGluaV9nZXQoICdleGVjX2RpcicgKSAhPSAnJyApICkgeyAvLyBleGVjX2RpciBQSFAgcGF0Y2ggaW4gcGxhY2U6IGh0dHA6Ly93d3cua3liZXJkaWdpLmN6L3Byb2plY3RzL2V4ZWNkaXIvCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjX2RpciBkZXRlY3RlZC4gU2tpcHBpbmcgcGF0aCBhc3NpZ25tZW50LicgKTsKCQkJfSBlbHNlIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWNfZGlyIG5vdCBkZXRlY3RlZC4gUHJvY2VlZGluZyBub3JtYWxseS4nICk7CgkJCQkkY29tbWFuZCA9ICdQQVRIPSRQQVRIOi91c3IvYmluLzovdXNyL2xvY2FsL2Jpbi86dXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW4vOi91c3Ivc2Jpbi86L3NiaW4vOi91c3IvOi9iaW4vJyAuICc7ICcgLiAkY29tbWFuZDsKCQkJfQoJCX0KCQkKCQkvLyBPdXRwdXQgY29tbWFuZCAoc3RyaXBzIG15c3FsZHVtcCBwYXNzd29yZHMpLgoJCWlmICggc3Ryc3RyKCAkY29tbWFuZCwgJy0tcGFzc3dvcmQ9JyApICkgewoJCQkkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiA9IHN0cnBvcyggJGNvbW1hbmQsICctLXBhc3N3b3JkPScgKTsKCQkJJHBhc3N3b3JkX3BvcnRpb25fZW5kID0gc3RycG9zKCAkY29tbWFuZCwgJyAnLCAkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3Mgc3RhcnQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gLiAnYC4gcGFzcyBlbmQ6IGAnIC4gJHBhc3N3b3JkX3BvcnRpb25fZW5kIC4gJ2AnICk7CgkJCSRwYXNzd29yZF9wb3J0aW9uID0gc3Vic3RyKCAkY29tbWFuZCwgJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4sICggJHBhc3N3b3JkX3BvcnRpb25fZW5kIC0gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gKSApOwoJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ3Bhc3MgcG9ydGlvbjogYCcgLiAkcGFzc3dvcmRfcG9ydGlvbiAuICdgLicgKTsKCQkJJHVucGFzc3dvcmRlZF9jb21tYW5kID0gc3RyX3JlcGxhY2UoICRwYXNzd29yZF9wb3J0aW9uLCAnLS1wYXNzd29yZD0qSElEREVOKicsICRjb21tYW5kICk7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWMoKSBjb21tYW5kIChwYXNzd29yZCBoaWRkZW4pIGAnIC4gJHVucGFzc3dvcmRlZF9jb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJCXVuc2V0KCAkdW5wYXNzd29yZGVkX2NvbW1hbmQgKTsKCQl9IGVsc2UgewoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjKCkgY29tbWFuZCBgJyAuICRjb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7CgkJfQoJCQoJCSRleGVjX291dHB1dCA9IGFycmF5KCk7CgkJQGV4ZWMoICRjb21tYW5kLCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSk7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnZXhlYygpIGNvbW1hbmQgb3V0cHV0OiBgJyAuIGltcGxvZGUoICcsJywgJGV4ZWNfb3V0cHV0ICkgLiAnYDsgRXhpdCBjb2RlOiBgJyAuICRleGVjX2V4aXRfY29kZSAuICdgOyBFeGl0IGNvZGUgZGVzY3JpcHRpb246IGAnIC4gcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT5leGl0X2NvZGVfbG9va3VwKCAkZXhlY19leGl0X2NvZGUgKSAuICdgJyApOwoJCQoJCXJldHVybiBhcnJheSggJGV4ZWNfb3V0cHV0LCAkZXhlY19leGl0X2NvZGUgKTsKCX0gLy8gRW5kIGV4ZWN1dGUoKS4KfQ==
###PACKDATA,FILE_END,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
###PACKDATA,FILE_START,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
###PACKDATA,FILE_START,/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
###PACKDATA,FILE_START,/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php

###PACKDATA,FILE_END,/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
Mi4wLjAgLSAyMDExLTEwLTA4IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgaGlzdG9yeS50eHQuCglBZGRlZCB1bnppcCBmdW5jdGlvbmFsaXR5Lg==
###PACKDATA,FILE_END,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3piZGlyIENsYXNzCiAqCiAqICBQcm92aWRlcyBhIGRpcmVjdG9yeSBjbGFzcyBmb3IgemlwYnVkZHkgZm9yIGJ1aWxkaW5nIGEgZGlyZWN0b3J5IHRyZWUgZm9yIGJhY2t1cAogKgkKICoJVmVyc2lvbjogMS4wLjAKICoJQXV0aG9yOgogKglBdXRob3IgVVJJOgogKgogKglAcGFyYW0JCSRwYXJlbnQJCW9iamVjdAkJT3B0aW9uYWwgcGFyZW50IG9iamVjdCB3aGljaCBjYW4gcHJvdmlkZSBmdW5jdGlvbnMgZm9yIHJlcG9ydGluZywgZXRjLgogKglAcmV0dXJuCQludWxsCiAqCiAqLwppZiAoICFjbGFzc19leGlzdHMoICJwbHVnaW5idWRkeV96YmRpciIgKSApIHsKCgljbGFzcyBwbHVnaW5idWRkeV96YmRpciB7CgkKCQkvLyBzdGF0dXMgbWV0aG9kIHR5cGUgcGFyYW1ldGVyIHZhbHVlcyAtIHdvdWxkIGxpa2UgYSBjbGFzcyBmb3IgdGhpcwoJCWNvbnN0IFNUQVRVU19UWVBFX0RFVEFJTFMgPSAnZGV0YWlscyc7CgkJY29uc3QgTk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SID0gJy8nOwoJCWNvbnN0IERJUkVDVE9SWV9TRVBBUkFUT1JTID0gJy9cXCc7CgoJCXB1YmxpYyAkX3ZlcnNpb24gPSAnMS4wJzsKCgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBwYXRoIG9mIHRoaXMgZGlyZWN0b3J5IG5vZGUKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHBhdGggc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfcGF0aCA9ICIiOwogICAgICAgIAogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhYnNvbHV0ZSBwYXRocyB0byBiZSBleGNsdWRlZCwgbXVzdCBiZSAvIHRlcm1pbmF0ZWQKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIHBhdGhzX3RvX2V4Y2x1ZGUgYXJyYXkgb2Ygc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfcGF0aHNfdG9fZXhjbHVkZSA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBkaXJlY3RvcnkgbGlzdGluZyBpdGVtcyB0byBiZSBpZ25vcmVkCiAgICAgICAgICogCiAgICAgICAgICogQHZhciBpdGVtc190b19pZ25vcmUgYXJyYXkgb2Ygc3RyaW5nCiAgICAgICAgICovCiAgICAgICAgcHJvdGVjdGVkICRfaXRlbXNfdG9faWdub3JlID0gYXJyYXkoICIuIiwgIi4uIiwgIi5EU19TdG9yZSIgKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGl0ZW1zIHRoYXQgYXJlIHRlcm1pbmFscyBhbmQgd2UgY2FuIGFkZCBkaXJlY3RseSBmb3IgdGhpcyBkaXJlY3RvcnkgKGFic29sdXRlIHBhdGhzKQogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgdGVybWluYWxzIGFycmF5IG9mIHN0cmluZwogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX3Rlcm1pbmFscyA9IGFycmF5KCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBicmFuY2ggbm9kZXMgb2Ygc3Vib3JkaW5hdGUgZGlyZWN0b3JpZXMgdGhhdCBhcmUgb24gYW4gZXhjbHVzaW9uIHBhdGgKICAgICAgICAgKiAKICAgICAgICAgKiBAdmFyIGJyYW5jaGVzIGFycmF5IG9mIHN0cmluZyA9PiBwbHVnaW5idWRkeV96YmRpcgogICAgICAgICAqLwogICAgICAgIHByb3RlY3RlZCAkX2JyYW5jaGVzID0gYXJyYXkoKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogV2hldGhlciBvciBub3Qgd2UgY2FuIGNhbGwgYSBzdGF0dXMgY2FsYmFjawogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgaGF2ZV9zdGF0dXNfY2FsbGJhY2sgYm9vbAogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2hhdmVfc3RhdHVzX2NhbGxiYWNrID0gZmFsc2U7CgkJCiAgICAgICAgLyoqCiAgICAgICAgICogT2JqZWN0LT5tZXRob2QgYXJyYXkgZm9yIHN0YXR1cyBmdW5jdGlvbgogICAgICAgICAqIAogICAgICAgICAqIEB2YXIgc3RhdHVzX2NhbGxiYWNrIGFycmF5CiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfc3RhdHVzX2NhbGxiYWNrID0gYXJyYXkoKTsKCQkKCQkvKioKCQkgKglfX2NvbnN0cnVjdCgpCgkJICoJCgkJICoJRGVmYXVsdCBjb25zdHJ1Y3Rvci4KCQkgKgkKCQkgKglAcGFyYW0JCXN0cmluZwkJJHBhdGgJCQlUaGUgcGF0aCB0byBmb3JtIGEgbm9kZSBmb3IKCQkgKglAcGFyYW0JCWFycmF5CQkkZXhjbHVkZXMJCVRoZSBsaXN0IG9mIGRpcnMvZmlsZXMgdG8gZXhjbHVkZSAoYWJzb2x1dGUgcGF0aHMgd2l0aCAvIHRlcm1pbmF0b3IgZm9yIGRpcnMpCgkJICoJQHJldHVybgkJbnVsbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCAkcGF0aCwgJGV4Y2x1ZGVzID0gYXJyYXkoKSApIHsKCgkJCS8vIE5vcm1hbGl6ZSB0aGUgdHJhaWxpbmcgZGlyZWN0b3J5IHNlcGFyYXRvciBvbiB0aGUgcGF0aAoJCQkkcGF0aCA9IHJ0cmltKCAkcGF0aCwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsKCQkJCgkJCS8vIE5vcm1hbGl6ZSBwbGF0Zm9ybSBzcGVjaWZpYyBkaXJlY3Rvcnkgc2VwYXJhdG9ycyBpbiBwYXRoCgkJCSR0aGlzLT5fcGF0aCA9IHN0cl9yZXBsYWNlKCBESVJFQ1RPUllfU0VQQVJBVE9SLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IsICRwYXRoICk7CgkJCQoJCQkkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgPSAkZXhjbHVkZXM7CgkJCQoJCQkkY29udGVudCA9IHNjYW5kaXIoICR0aGlzLT5fcGF0aCApOyAvLyBHZXQgdGhlIGRpcmVjdG9yeSBjb250ZW50LCB3aWxsIGJlIHNpbXBsZSBuYW1lcwoJCQkKCQkJLy8gUHJvY2VzcyBlYWNoIGl0ZW0gZm9yIGlnbm9yaW5nLCB0cmVhdGluZyBhcyBhIHRlcm1pbmFsIG9yIGFzIGEgYnJhbmNoCgkJCWZvcmVhY2ggKCAkY29udGVudCBhcyAmJGl0ZW0gKSB7CgoJCQkJLy8gSW5pdGlhbGx5IGNoZWNrIHRoZSBzaW1wbGUgbmFtZQoJCQkJaWYgKCBpbl9hcnJheSggJGl0ZW0sICR0aGlzLT5faXRlbXNfdG9faWdub3JlICkgKSB7CgoJCQkJCS8vIFRoaXMgaXMganVzdCBmbHVmZiBpbiB0aGUgZGlyZWN0b3J5IGxpc3RpbmcKCQkJCQljb250aW51ZTsKCQkJCQkKCQkJCX0gZWxzZWlmICggaXNfZGlyKCAoICR0aGlzLT5fcGF0aCAuICRpdGVtICkgKSApIHsKCgkJCQkJLy8gSXQncyBhIGRpcmVjdG9yeSwgY2hlY2sgZm9yIG1hdGNoaW5nIGV4Y2x1c2lvbiBvciBiZWluZyBwcmVmaXggb2YgZXhjbHVzaW9uCgkJCQkJaWYgKCBpbl9hcnJheSggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCQkJCQkKCQkJCQkJLy8gRXhhY3QgbWF0Y2ggdG8gYW4gZXhjbHVzaW9uLCBleGNsdWRlIHRoaXMgZGlyZWN0b3J5IGNvbXBsZXRlbHkKCQkJCQkJY29udGludWU7CgkJCQkJCQoJCQkJCX0gZWxzZWlmICggJHRoaXMtPmluX2FycmF5X3ByZWZpeCggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCgkJCQkJCS8vIE5lZWQgYSBuZXcgbm9kZSwgYWRkIHRvIHRoZSBub2RlIGFycmF5IChhYnNvbHV0ZSBkaXIgcGF0aCBpcyBrZXkpCgkJCQkJCSR0aGlzLT5fYnJhbmNoZXNbICggJHRoaXMtPl9wYXRoIC4gJGl0ZW0gKSBdID0gbmV3IHBsdWdpbmJ1ZGR5X3piZGlyKCAoICR0aGlzLT5fcGF0aCAuICRpdGVtIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SICksICR0aGlzLT5fcGF0aHNfdG9fZXhjbHVkZSwgJHRoaXMgKTsKCQkJCQkJCgkJCQkJfSBlbHNlIHsKCQkJCQkKCQkJCQkJLy8gTmVpdGhlciBleGNsdXNpb24gbm9yIGV4Y2x1c2lvbiBwcmVmaXggc28gd2VsbCB0cmVhdCBpdCBhcyBhIHRlcm1pbmFsCgkJCQkJCSR0aGlzLT5fdGVybWluYWxzW10gPSAoICR0aGlzLT5fcGF0aCAuICRpdGVtICk7CgkJCQkJCgkJCQkJfQoJCQkJCQoJCQkJfSBlbHNlIHsKCgkJCQkJLy8gQXNzdW1lIGl0J3MgYSBmaWxlLCBjaGVjayBmb3IgbWF0Y2hpbmcgZXhjbHVzaW9uCgkJCQkJaWYgKCBpbl9hcnJheSggKCAkdGhpcy0+X3BhdGggLiAkaXRlbSApLCAkdGhpcy0+X3BhdGhzX3RvX2V4Y2x1ZGUgKSApIHsKCQkJCQkKCQkJCQkJLy8gRXhhY3QgbWF0Y2ggdG8gYW4gZXhjbHVzaW9uLCBleGNsdWRlIHRoaXMgZmlsZSBjb21wbGV0ZWx5CgkJCQkJCWNvbnRpbnVlOwoJCQkJCQkKCQkJCQl9IGVsc2UgewoJCQkJCQoJCQkJCQkvLyBOb3QgYW4gZXhjbHVzaW9uIHNvIGl0J3MgYSB0ZXJtaW5hbAoJCQkJCQkkdGhpcy0+X3Rlcm1pbmFsc1tdID0gKCAkdGhpcy0+X3BhdGggLiAkaXRlbSApOwoJCQkJCQkKCQkJCQl9CgkJCQkJCgkJCQl9CQoJCQl9CgkJCQkJCQkKCQl9CgkJCgkJLyoqCgkJICoJX19kZXN0cnVjdCgpCgkJICoJCgkJICoJRGVmYXVsdCBkZXN0cnVjdG9yLgoJCSAqCQoJCSAqCUByZXR1cm4JCW51bGwKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCApIHsKCgkJfQoJCQkJCgkJLyoqCgkJICoJc2V0X3N0YXR1c19jYWxsYmFjaygpCgkJICoKCQkgKglTZXRzIGEgcmVmZXJlbmNlIHRvIHRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHN0YXR1cyB1cGRhdGUuCgkJICogIEFyZ3VtZW50IG11c3QgYXQgbGVhc3QgYmUgYSBub24tZW1wdHkgYXJyYXkgd2l0aCAyIGVsZW1lbnRzCgkJICoKCQkgKglAcGFyYW0JCWFycmF5IAkkY2FsbGJhY2sJT2JqZWN0LT5tZXRob2QgdG8gY2FsbCBmb3Igc3RhdHVzIHVwZGF0ZXMuCgkJICoJQHJldHVybgkJbnVsbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIHNldF9zdGF0dXNfY2FsbGJhY2soICRjYWxsYmFjayA9IGFycmF5KCkgKSB7CgkJCgkJCWlmICggaXNfYXJyYXkoICRjYWxsYmFjayApICYmICFlbXB0eSggJGNhbGxiYWNrICkgJiYgKCAyID09IGNvdW50KCAkY2FsbGJhY2sgKSApICkgewoJCQkKCQkJCSR0aGlzLT5fc3RhdHVzX2NhbGxiYWNrID0gJGNhbGxiYWNrOwoJCQkJJHRoaXMtPl9oYXZlX3N0YXR1c19jYWxsYmFjayA9IHRydWU7CgoJCQl9CgkJCQoJCX0KCQkKCQkvKioKCQkgKglzdGF0dXMoKQoJCSAqCQoJCSAqCUludm9rZSBzdGF0dXMgbWV0aG9kIG9mIHBhcmVudCBpZiBpdCBleGlzdHMKCQkgKiAgTXVzdCBiZSBhdCBsZWFzdCBvbmUgcGFyYW1ldGVyIG90aGVyd2lzZSBpZ25vcmUgdGhlIGNhbGwKCQkgKgkKCQkgKglAcGFyYW0JCXN0cmluZwkJJHR5cGUJCShFeHBlY3RlZCkgU3RhdHVzIG1lc3NhZ2UgdHlwZS4KCQkgKglAcGFyYW0JCXN0cmluZwkJJG1lc3NhZ2UJKEV4cGVjdGVkKSBTdGF0dXMgbWVzc2FnZS4KCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc3RhdHVzKCkgewoJCQoJCQlpZiAoICR0aGlzLT5faGF2ZV9zdGF0dXNfY2FsbGJhY2sgJiYgKCBmdW5jX251bV9hcmdzKCkgPiAwICkgKSB7CgoJCQkJJGFyZ3MgPSBmdW5jX2dldF9hcmdzKCk7CgkJCQljYWxsX3VzZXJfZnVuY19hcnJheSggJHRoaXMtPl9zdGF0dXNfY2FsbGJhY2ssICRhcmdzICk7CgkJCQkKCQkJfQoJCQkKCQl9CgkJCgkJLyoqCgkJICoJZ2V0X3Rlcm1pbmFscygpCgkJICoJCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgdGVybWluYWxzIGZyb20gdGhpcyBkaXIgcGx1cyBzdWJvcmRpbmF0ZXMKCQkgKgkKCQkgKglAcmV0dXJuCQlhcnJheQlGbGF0IGFycmF5IG9mIHRlcm1pbmFsIGZpbGVuYW1lcyBhbmQgZGlyZWN0b3J5IG5hbWVzCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3Rlcm1pbmFscyggKSB7CgkJCgkJCS8vIE1pbmltdW0gaXMgb3VyIHRlcm1pbmFscwoJCQkkYWxsX3Rlcm1pbmFscyA9ICR0aGlzLT5fdGVybWluYWxzOwoJCQkKCQkJLy8gTm93IGFkZCB0ZXJtaW5hbHMgZnJvbSBlYWNoIHN1Ym9yZGluYXRlCgkJCWZvcmVhY2ggKCAkdGhpcy0+X2JyYW5jaGVzIGFzICRicmFuY2ggKSB7CgkJCQoJCQkJJGFsbF90ZXJtaW5hbHMgPSBhcnJheV9tZXJnZSggJGFsbF90ZXJtaW5hbHMsICRicmFuY2gtPmdldF90ZXJtaW5hbHMoKSApOwoJCQkJCgkJCX0KCQkJCgkJCXJldHVybiAkYWxsX3Rlcm1pbmFsczsKCQkJCgkJfQoJCQoJCS8qKgoJCSAqCWdldF9yZWxhdGl2ZV9leGNsdWRlcygpCgkJICoJCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgZXhjbHVzaW9ucyB3aXRoIG9wdGlvbmFsIGRpcmVjdG9yeSBwcmVmaXggcmVtb3ZlZAoJCSAqCQoJCSAqCUBwYXJhbQkJc3RyaW5nCVRoZSBiYXNlIGRpcmVjdG9yeSBwcmVmaXggdG8gYmUgcmVtb3ZlZAoJCSAqCUByZXR1cm4JCWFycmF5CUZsYXQgYXJyYXkgb2YgcmVsYXRpdmUgKHRvIHNpdGUgcm9vdCkgZXhjbHVkZWQgZmlsZW5hbWVzIGFuZCBkaXJlY3RvcnkgbmFtZXMKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfcmVsYXRpdmVfZXhjbHVkZXMoICRiYXNlID0gJycgKSB7CgkJCgkJCS8vIFRoZSBiYXNlZGlyIG11c3QgaGF2ZSBhIHRyYWlsaW5nIG5vcm1hbGl6ZWQgZGlyZWN0b3J5IHNlcGFyYXRvcgoJCQkkYmFzZWRpciA9ICggcnRyaW0oIHRyaW0oICRiYXNlICksIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsKCQkKCQkJLy8gTm9ybWFsaXplIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGgKCQkJJGJhc2VkaXIgPSBzdHJfcmVwbGFjZSggRElSRUNUT1JZX1NFUEFSQVRPUiwgc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SLCAkYmFzZWRpciApOwoJCQkKCQkJJHJlbGF0aXZlX2V4Y2x1ZGVzID0gJHRoaXMtPl9wYXRoc190b19leGNsdWRlOwoJCQkKCQkJZm9yZWFjaCAoICRyZWxhdGl2ZV9leGNsdWRlcyBhcyAmJGV4Y2x1ZGUgKSB7CgkJCQoJCQkJLy8gUmVtb3ZlIGJhc2UgcHJlZml4IGJ1dCBsZWF2ZSBsZWFkaW5nIG5vcm1hbGl6ZWQgZGlyZWN0b3J5IHNlcGFyYXRvcgoJCQkJJGV4Y2x1ZGUgPSBzdHJfcmVwbGFjZSggcnRyaW0oICRiYXNlZGlyLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgKSwgJycsICRleGNsdWRlICk7CgkJCQoJCQl9CgkJCQoJCQlyZXR1cm4gJHJlbGF0aXZlX2V4Y2x1ZGVzOwoJCQkKCQl9CgkJCgkJLyoqCgkJICoJaW5fYXJyYXlfcHJlZml4KCkKCQkgKgkKCQkgKglDaGVjayBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGEgcHJlZml4IG9mIGFueSBzdHJpbmcgaW4gdGhlIGdpdmVuIGFycmF5CgkJICoJCgkJICogIEBwYXJhbQkJc3RyaW5nCSRwcmVmaXgJCVRoZSBwcmVmaXggc3RyaW5nCgkJICogIEBwYXJhbQkJYXJyYXkJJGNhbmRpZGF0ZXMJVGhlIGFycmF5IG9mIHN0cmluZ3MKCQkgKglAcmV0dXJuCQlib29sCXRydWUgaWYgdGhlIHN0cmluZyBpcyBhIHByZWZpeCwgZmFsc2Ugb3RoZXJ3aXNlCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gaW5fYXJyYXlfcHJlZml4KCAkcHJlZml4LCBhcnJheSAkY2FuZGlkYXRlcyApIHsKCgkJCWZvcmVhY2ggKCAkY2FuZGlkYXRlcyBhcyAkY2FuZGlkYXRlICkgewoJCQkKCQkJCWlmICggISggZmFsc2UgPT09IHN0cnBvcyggJGNhbmRpZGF0ZSwgJHByZWZpeCApICkgKSB7CgoJCQkJCS8vIFdlIGZvdW5kIHRoZSBwcmVmaXgKCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQkKCQkJCX0KCQkJCQoJCQl9CgkJCQoJCQkvLyBHb3QgdGhpcyBmYXIgc28gbm90IGEgcHJlZml4CgkJCXJldHVybiBmYWxzZTsKCQkJCgkJfQoJCQoJfSAvLyBlbmQgcGx1Z2luYnVkZHlfemJkaXIgY2xhc3MuCQoJCn0KPz4=
###PACKDATA,FILE_END,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
UEsDBAoAAAAAAC8ELUHj5ZWwDAAAAAwAAAAIABwAdGVzdC50eHRVVAkAA8obUVDjG1FQdXgLAAEE+AEAAAQUAAAASGVsbG8gV29ybGQKUEsBAh4DCgAAAAAALwQtQePllbAMAAAADAAAAAgAGAAAAAAAAQAAAKSBAAAAAHRlc3QudHh0VVQFAAPKG1FQdXgLAAEE+AEAAAQUAAAAUEsFBgAAAAABAAEATgAAAE4AAAAAAA==
###PACKDATA,FILE_END,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
PD9waHAKLyoqCiAqCXBsdWdpbmJ1ZGR5X3piemlwY29yZSBDbGFzcwogKgogKiAgUHJvdmlkZXMgYW4gYWJzdHJhY3QgemlwIGNhcGFiaWxpdHkgY29yZSBjbGFzcwogKgogKglWZXJzaW9uOiAxLjAuMAogKglBdXRob3I6CiAqCUF1dGhvciBVUkk6CiAqCiAqCUBwYXJhbQkJJHBhcmVudAkJb2JqZWN0CQlPcHRpb25hbCBwYXJlbnQgb2JqZWN0IHdoaWNoIGNhbiBwcm92aWRlIGZ1bmN0aW9ucyBmb3IgcmVwb3J0aW5nLCBldGMuCiAqCUByZXR1cm4JCW51bGwKICoKICovCmlmICggIWNsYXNzX2V4aXN0cyggInBsdWdpbmJ1ZGR5X3piemlwY29yZSIgKSApIHsKCgkvKioKCSAqCXBsdWdpbmJ1ZGR5X3N0YXQgQ2xhc3MKCSAqCgkgKglDb252ZW5pZW5jZSBmb3IgYmVpbmcgYWJsZSB0byBhdWdtZW50IHRoZSBzdGF0KCkgZnVuY3Rpb24gZWl0aGVyIGluIHRoZSBldmVudAoJICoJb2YgZmFpbHVyZSBvciBmb3IgY2FzZXMgd2hlcmUgdGhlIGFjdHVhbCBmaWxlIHNpemUgcmVwb3J0ZWQgaXMgdG9vIGxhcmdlIGZvciB0aGUKCSAqCShzaWduZWQpIGludGVnZXIgdHlwZSBpbiB3aGljaCBjYXNlIHdlIGNyZWF0ZSBhbiBhZGRpdGlvbmFsIGFzc29jaWF0aXZlIGZpZWxkIGluCgkgKgl0aGUgYXJyYXkgd2hpY2ggaXMgYSBkb3VibGUgYW5kIGNvbnRhaW5zIHRoZSBmaWxlIHNpemUuCgkgKglGb3Igbm93IGl0J3MganVzdCBzb21lIHN0YXRpYyBtZXRob2RzIGJ1dCBtaWdodCBleHRlbmQgdG8gYmUgYSB0cnVlIGNsYXNzLgoJICoKCSAqCUBwYXJhbQlzdHJpbmcJCSRmaWxlbmFtZQlUaGUgbmFtZSBvZiB0aGUgZmlsZSB0byBzdGF0CgkgKglAcmV0dXJuCWFycmF5fGJvb2wJCQkJRmFsc2Ugb24gZmFpbHVyZSBvdGhlcndpc2UgYXJyYXkKCSAqCgkgKi8KCWNsYXNzIHBsdWdpbmJ1ZGR5X3N0YXQgewoKCQljb25zdCBUSElSVFlfVFdPX0JJVCA9IDMyOwoJCWNvbnN0IFNJWFRZX0ZPVVJfQklUID0gNjQ7CgoJCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNfcGhwKCAkYml0cyApIHsKCgkJCSRyZXN1bHQgPSAoICggUEhQX0lOVF9TSVpFICogOCApID09ICRiaXRzICkgPyB0cnVlIDogZmFsc2U7CgoJCQlyZXR1cm4gJHJlc3VsdDsKCgkJfQoKCQlwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHN0YXQoICRmaWxlbmFtZSApIHsKCgkJCSRyZXN1bHQgPSBmYWxzZTsKCgkJCS8vIElmIHRoZSBmaWxlIGlzIHJlYWRhYmxlIHRoZW4gd2Ugc2hvdWxkIGJlIGFibGUgdG8gc3RhdCBpdAoJCQlpZiAoIEBpc19yZWFkYWJsZSggJGZpbGVuYW1lICkgKSB7CgoJCQkJJHN0YXRzID0gQHN0YXQoICRmaWxlbmFtZSApOwoKCQkJCWlmICggZmFsc2UgIT09ICRzdGF0cyApIHsKCgkJCQkJLy8gTG9va3MgbGlrZSB3ZSBnb3Qgc29tZSB2YWxpZCBkYXRhIC0gZm9yIG5vdyBqdXN0IHByb2Nlc3MgdGhlIHNpemUKCQkJCQlpZiAoIHNlbGY6OmlzX3BocCggc2VsZjo6VEhJUlRZX1RXT19CSVQgKSApIHsKCgkJCQkJCS8vIFBIUCBpcyAzMiBiaXRzIHNvIHdlIG1heSBoYXZlIGEgZmlsZSBzaXplIHByb2JsZW0gb3ZlciAyR0IuCgkJCQkJCS8vIFRoaXMgaXMgb25lIHdheSB0byB0ZXN0IGZvciBhIGZpbGUgc2l6ZSBwcm9ibGVtIC0gdGhlcmUgYXJlIG90aGVycwoJCQkJCQlpZiAoIDAgPiAkc3RhdHNbICdzaXplJyBdICkgewoKCQkJCQkJCS8vIFVuc2lnbmVkIGxvbmcgaGFzIGJlZW4gaW50ZXJwcmV0ZWQgYXMgYSBzaWduZWQgaW50IGFuZCBoYXMgc2lnbiBiaXQKCQkJCQkJCS8vIHNldCBzbyBpcyBhcHBlYXJpbmcgYXMgbmVnYXRpdmUgLSBtYWdpY2FsbHkgY29udmVydCBpdCB0byBhIGRvdWJsZQoJCQkJCQkJLy8gTm90ZTogdGhpcyBvbmx5IHdvcmtzIHRvIGdpdmUgdXMgYW4gZXh0ZW5zaW9uIGZyb20gMkdCIHRvIDRHQiBidXQgdGhhdAoJCQkJCQkJLy8gc2hvdWxkIGJlIGVub3VnaCBhcyB0aGUgdW5kZXJseWluZyBPUyBwcm9iYWJseSBjYW4ndCBzdXBwb3J0ID40R0Igb3IKCQkJCQkJCS8vIHppcCBjb21tYW5kIGNhbm5vdCBhbnl3YXkKCQkJCQkJCSRzdGF0c1sgJ2RzaXplJyBdID0gKCAoZG91YmxlKTB4ODAwMDAwMDAgKyAoICRzdGF0c1sgJ3NpemUnIF0gJiAweDdGRkZGRkZGICkgKTsKCgkJCQkJCX0gZWxzZSB7CgoJCQkJCQkJLy8gQXNzdW1lIGl0J3MgdmFsaWQKCQkJCQkJCSRzdGF0c1sgJ2RzaXplJyBdID0gKGRvdWJsZSkkc3RhdHNbICdzaXplJyBdOwoKCQkJCQkJfQoKCQkJCQl9IGVsc2UgewoKCQkJCQkJLy8gTG9va3MgbGlrZSA2NCBiaXQgUEhQIHNvIGZpbGUgc2l6ZSBzaG91bGQgYmUgZmluZQoJCQkJCQkvLyBGb3JjZSBhZGRlZCBpdGVtIHRvIGRvdWJsZSBmb3IgY29uc2lzdGVuY3kKCQkJCQkJJHN0YXRzWyAnZHNpemUnIF0gPSAoZG91YmxlKSRzdGF0c1sgJ3NpemUnIF07CgoJCQkJCX0KCgkJCQkJLy8gQWRkIGFuIGFkZGl0aW9uYWwgaXRlbSBmb3Igc2hvcnQgb2N0YWwgcmVwcmVzZW50YXRpb24gb2YgbW9kZQoJCQkJCSRzdGF0c1sgJ21vZGVfb2N0YWxfZm91cicgXSA9IHN1YnN0ciggc3ByaW50ZiggJyVvJywgJHN0YXRzWyAnbW9kZScgXSApLCAtNCApOwoKCQkJCQkkcmVzdWx0ID0gJHN0YXRzOwoKCQkJCX0gZWxzZSB7CgoJCQkJCS8vIEhtbSwgc3RhdCgpIGZhaWxlZCBmb3Igc29tZSByZWFzb24gLSBjb3VsZCBiZSBhbiBMRlMgcHJvYmxlbSB3aXRoIHRoZQoJCQkJCS8vIHdheSBQSFAgaGFzIGJlZW4gYnVpbHQgOi0oCgkJCQkJLy8gVE9ETzogQ29uc2lkZXIgYWx0ZXJuYXRpdmVzIC0gbWF5IGJlIGFibGUgdG8gdXNlIGV4ZWMgdG8gcnVuIHRoZQoJCQkJCS8vIGNvbW1hbmQgbGluZSBzdGF0IGZ1bmN0aW9uIHdoaWNoIF9zaG91bGRfIGJlIG9rIGFuZCB3ZSBjYW4gbWFwIG91dHB1dAoJCQkJCS8vIGludG8gdGhlIHNhbWUgYXJyYXkgZm9ybWF0LiBUaGlzIGRvZXMgZGVwZW5kIG9uIGhhdmluZyBleGVjKCkgYW5kIHRoZQoJCQkJCS8vIHN0YXQgY29tbWFuZCBhdmFpbGFibGUgYW5kIGl0J3MgZGVmaW5pdGVseSBub3QgYSBuaWNlIG9wdGlvbgoJCQkJCSRyZXN1bHQgPSBmYWxzZTsKCgkJCQl9CgoJCQl9CgoJCQlyZXR1cm4gJHJlc3VsdDsKCQl9CgoJfQoKCWFic3RyYWN0IGNsYXNzIHBsdWdpbmJ1ZGR5X3piemlwY29yZSB7CgoJCS8vIHN0YXR1cyBtZXRob2QgdHlwZSBwYXJhbWV0ZXIgdmFsdWVzIC0gd291bGQgbGlrZSBhIGNsYXNzIGZvciB0aGlzCgkJY29uc3QgU1RBVFVTX1RZUEVfREVUQUlMUyAgICAgICA9ICdkZXRhaWxzJzsKCgkJLy8gQ29uc3RhbnRzIGZvciBoYW5kbGluZyBwYXRocwoJCWNvbnN0IE5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiAgPSAnLyc7CgkJY29uc3QgRElSRUNUT1JZX1NFUEFSQVRPUlMgICAgICA9ICcvXFwnOwoKCQkvLyBDb25zdGFudHMgZm9yIHJlc3VsdCBoYW5kbGluZwoJCWNvbnN0IE1BWF9FUlJPUl9MSU5FU19UT19TSE9XICAgPSAyMDsKCQljb25zdCBNQVhfV0FSTklOR19MSU5FU19UT19TSE9XID0gMjA7CgkJY29uc3QgTUFYX09USEVSX0xJTkVTX1RPX1NIT1cgICA9IDIwOwoKCQkvLyBFbnVtZXJhdGVkIHR5cGVzIHRoYXQgd2UgbmVlZCBmb3Igbm93CgkJLy8gTm90ZTogVmFsdWVzIG11c3QgYmUgc2VxdWVudGlhbAoJCWNvbnN0IE9TX1RZUEVfVU5LTk9XTiAJPQkwOwoJCWNvbnN0IE9TX1RZUEVfTklYCQk9CTE7CgkJY29uc3QgT1NfVFlQRV9XSU4JCT0JMjsKCQljb25zdCBPU19UWVBFX01BWAkJPQkyOwoKCQljb25zdCBaSVBfV0FSTklOR19VTktOT1dOICAJCQk9IDA7CgkJY29uc3QgWklQX1dBUk5JTkdfR0VORVJJQyAgCQkJPSAxOwoJCWNvbnN0IFpJUF9XQVJOSU5HX1NLSVBQRUQgIAkJCT0gMjsKCQljb25zdCBaSVBfV0FSTklOR19GSUxURVJFRCAJCQk9IDM7CgkJY29uc3QgWklQX1dBUk5JTkdfTE9OR1BBVEggCQkJPSA0OwoJCWNvbnN0IFpJUF9XQVJOSU5HX0lHTk9SRURfU1lNTElOSyAJPSA1OwoKCQljb25zdCBaSVBfT1RIRVJfVU5LTk9XTiAgICAgICAgID0gMDsKCQljb25zdCBaSVBfT1RIRVJfR0VORVJJQyAgICAgICAgID0gMTsKCQljb25zdCBaSVBfT1RIRVJfU0tJUFBFRCAgCQk9IDI7CgkJY29uc3QgWklQX09USEVSX0ZJTFRFUkVEIAkJPSAzOwoJCWNvbnN0IFpJUF9PVEhFUl9MT05HUEFUSCAJCT0gNDsKCQljb25zdCBaSVBfT1RIRVJfSUdOT1JFRF9TWU1MSU5LCT0gNTsKCgkJY29uc3QgQ09NTUFORF9VTktOT1dOX1BBVEgJPSAwOwoJCWNvbnN0IENPTU1BTkRfWklQX1BBVEgJCT0gMTsKCQljb25zdCBDT01NQU5EX1VOWklQX1BBVEgJPSAyOwoKCQlwdWJsaWMgJF92ZXJzaW9uID0gJzEuMCc7CgoKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgcGx1Z2luIHBhdGggZm9yIHRoaXMgcGx1Z2luCiAgICAgICAgICoKICAgICAgICAgKiBAdmFyICRfcGx1Z2luUGF0aCBzdHJpbmcKICAgICAgICAgKi8KICAgICAgICBwdWJsaWMgJF9wbHVnaW5QYXRoID0gJyc7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBwYXRoIG9mIHRoaXMgZGlyZWN0b3J5IG5vZGUKICAgICAgICAgKgogICAgICAgICAqIEB2YXIgcGF0aCBzdHJpbmcKICAgICAgICAgKi8KICAgICAgICBwcm90ZWN0ZWQgJF9wYXRoID0gIiI7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBhYnNvbHV0ZSBwYXRocyB0byBiZSBleGNsdWRlZCwgbXVzdCBiZSAvIHRlcm1pbmF0ZWQKICAgICAgICAgKgogICAgICAgICAqIEB2YXIgcGF0aHNfdG9fZXhjbHVkZSBhcnJheSBvZiBzdHJpbmcKICAgICAgICAgKi8KICAgICAgICBwcm90ZWN0ZWQgJF9wYXRoc190b19leGNsdWRlID0gYXJyYXkoKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIGRldGFpbHMgb2YgdGhlIG1ldGhvZAogICAgICAgICAqCiAgICAgICAgICogQHZhciBtZXRob2RfZGV0YWlscyBhcnJheQogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX21ldGhvZF9kZXRhaWxzID0gYXJyYXkoKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIHNldCBvZiBwYXRocyB3aGVyZSB0byBsb29rIGZvciBleGVjdXRhYmxlcwogICAgICAgICAqCiAgICAgICAgICogQHZhciAgZXhlY3V0YWJsZV9wYXRocwlhcnJheQogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2V4ZWN1dGFibGVfcGF0aHMgPSBhcnJheSgpOwoKICAgICAgICAvKioKICAgICAgICAgKiBBcnJheSBvZiBzdGF0dXMgaW5mb3JtYXRpb24KICAgICAgICAgKgogICAgICAgICAqIEB2YXIgc3RhdHVzIGFycmF5CiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfc3RhdHVzID0gYXJyYXkoKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogRW51bWVyYXRlZCBPUyB0eXBlCiAgICAgICAgICoKICAgICAgICAgKiBAdmFyIG9zX3R5cGUJaW50CiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfb3NfdHlwZSA9IHNlbGY6Ok9TX1RZUEVfVU5LTk9XTjsKCiAgICAgICAgLyoqCiAgICAgICAgICogQ29udmVuaWVuY2UgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIFBIUCBoYXMgZXhlY19kaXIgc2V0IG9yIG5vdAogICAgICAgICAqCiAgICAgICAgICogQHZhciBleGVjX2Rpcl9zZXQJYm9vbAogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2V4ZWNfZGlyX3NldCA9IGZhbHNlOwoKICAgICAgICAvKioKICAgICAgICAgKiBDb252ZW5pZW5jZSBib29sZWFuIGluZGljYXRpbmcgaWYgV2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBidWlsZGluZyBhcmNoaXZlcwogICAgICAgICAqCiAgICAgICAgICogQHZhciBpZ25vcmVfd2FybmluZ3MJYm9vbAogICAgICAgICAqLwoJCXByb3RlY3RlZCAkX2lnbm9yZV93YXJuaW5ncyA9IGZhbHNlOwoKICAgICAgICAvKioKICAgICAgICAgKiBDb252ZW5pZW5jZSBib29sZWFuIGluZGljYXRpbmcgaWYgc3ltbGlua3Mgc2hvdWxkIGJlIGlnbm9yZWQvbm90LWZvbGxvd2VkIHdoZW4gYnVpbGRpbmcgYXJjaGl2ZXMKICAgICAgICAgKgogICAgICAgICAqIEB2YXIgaWdub3JlX3N5bWxpbmtzCWJvb2wKICAgICAgICAgKi8KCQlwcm90ZWN0ZWQgJF9pZ25vcmVfc3ltbGlua3MgPSBmYWxzZTsKCiAgICAgICAgIC8qKgogICAgICAgICAqIENvbnZlbmllbmNlIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBjb21wcmVzc2lvbiBzaG91bCBkYmUgdXNlZCB3aGVuIGJ1aWxkaW5nIGFyY2hpdmVzCiAgICAgICAgICoKICAgICAgICAgKiBAdmFyIGNvbXByZXNzaW9uCWJvb2wKICAgICAgICAgKi8KCQlwcm90ZWN0ZWQgJF9jb21wcmVzc2lvbiA9IGZhbHNlOwoKICAgICAgIC8qKgogICAgICAgICAqIFVzZWQgdG8gdHJhbnNsYXRlIG91ciB3YXJuaW5ncyByZWFzb25zIGludG8gYSBsb25nZXIgZGVzY3JpcHRpb24KICAgICAgICAgKgogICAgICAgICAqIEB2YXIgYXJyYXkKICAgICAgICAgKi8KCQlwdWJsaWMgc3RhdGljICRfd2FybmluZ19kZXNjID0gYXJyYXkoIHNlbGY6OlpJUF9XQVJOSU5HX1VOS05PV04gIAkJCT0+ICd3YXJuaW5nIHJlYXNvbiB1bmtub3duJywKCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9XQVJOSU5HX0dFTkVSSUMgIAkJCT0+ICdnZW5lcmFsIHByb2JsZW0gYXMgaW5kaWNhdGVkJywKCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9XQVJOSU5HX1NLSVBQRUQgIAkJCT0+ICdmaWxlIHVucmVhZGFibGUgb3IgZG9lcyBub3QgZXhpc3QnLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX1dBUk5JTkdfRklMVEVSRUQgCQkJPT4gJ2ZpbGUgZmlsdGVyZWQnLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX1dBUk5JTkdfTE9OR1BBVEggCQkJPT4gJ2ZpbGVuYW1lIHBhdGggdG9vIGxvbmcnLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX1dBUk5JTkdfSUdOT1JFRF9TWU1MSU5LICAJPT4gJ2ZpbGUgaXMgYSBzeW1saW5rIGFuZCBpcyBpZ25vcmVkIGJhc2VkIG9uIHNldHRpbmdzJywKCQkJCQkJCQkJCQkgKTsKCgkJcHVibGljIHN0YXRpYyAkX290aGVyX2Rlc2MgICA9IGFycmF5KCBzZWxmOjpaSVBfT1RIRVJfVU5LTk9XTiAJCQk9PiAnb3RoZXIgcmVhc29uIHVua25vd24nLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX09USEVSX0dFTkVSSUMgCQkJPT4gJ290aGVyIHByb2JsZW0gYXMgaW5kaWNhdGVkJywKCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9PVEhFUl9TS0lQUEVEIAkJCT0+ICdmaWxlIHVucmVhZGFibGUgb3IgZG9lcyBub3QgZXhpc3QnLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX09USEVSX0ZJTFRFUkVECQkJPT4gJ2ZpbGUgZmlsdGVyZWQnLAoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX09USEVSX0xPTkdQQVRIIAkJCT0+ICdmaWxlbmFtZSBwYXRoIHRvbyBsb25nJywKCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9PVEhFUl9JR05PUkVEX1NZTUxJTksJPT4gJ2ZpbGUgaXMgYSBzeW1saW5rIGFuZCBpcyBpZ25vcmVkIGJhc2VkIG9uIHNldHRpbmdzJywKCQkJCQkJCQkJCQkgKTsKCiAgICAgICAgLyoqCiAgICAgICAgICogVGhlIFNlcnZlciBBUEkgdGhhdCBpcyBpbiB1c2UKICAgICAgICAgKgogICAgICAgICAqIEB2YXIgc3RyaW5nCiAgICAgICAgICovCgkJcHJvdGVjdGVkICRfc2FwaV9uYW1lID0gIiI7CgoJCS8qKgoJCSAqCV9fY29uc3RydWN0KCkKCQkgKgoJCSAqCURlZmF1bHQgY29uc3RydWN0b3IuCgkJICoKCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CgoJCQkvLyBNYWtlIHN1cmUgd2Uga25vdyB3aGF0IHdlIGFyZSBydW5uaW5nIG9uIGZvciBsYXRlcgoJCQkkdGhpcy0+c2V0X29zX3R5cGUoKTsKCgkJCS8vIERlcml2ZSB3aGV0aGVyIHdlIGFyZSBpZ25vcmluZyBXYXJuaW5ncyBvciBub3QgKGV4cGVjdGVkIHRvIGJlIG92ZXJyaWRkZW4gYnkgdXNlcikKCQkJJHRoaXMtPnNldF9pZ25vcmVfd2FybmluZ3MoKTsKCgkJCS8vIERlcml2ZSB3aGV0aGVyIHdlIGFyZSBpZ25vcmluZy9ub3QtZm9sbG93aW5nIHN5bWxpbmtzIG9yIG5vdCAoZXhwZWN0ZWQgdG8gYmUgb3ZlcnJpZGRlbiBieSB1c2VyKQoJCQkkdGhpcy0+c2V0X2lnbm9yZV9zeW1saW5rcygpOwoKCQkJLy8gRGVyaXZlIHdoZXRoZXIgY29tcHJlc3Npb24gc2hvdWxkIGJlIHVzZWQgKGV4cGVjdGVkIHRvIGJlIG92ZXJyaWRkZW4gYnkgdXNlcikKCQkJJHRoaXMtPnNldF9jb21wcmVzc2lvbigpOwoKCQkJLy8gU3BlY2lmaWMgbWV0aG9kIGNvbnN0cnVjdG9yIHdpbGwgb3ZlcnJpZGUgc29tZSBvZiB0aGVzZSBhbmQgdGhlIHRlc3RzIG1heSBvdmVycmlkZSBvdGhlcnMKCQkJJHRoaXMtPl9tZXRob2RfZGV0YWlsc1sgJ2F0dHInIF0gPSBhcnJheSggJ25hbWUnID0+ICdVbmtub3duIE1ldGhvZCcsCgkJCQkJCQkJCQkJCQkgICdjb21wYXRpYmlsaXR5JyA9PiBmYWxzZSAsCgkJCQkJCQkJCQkJCQkgICdpc19jaGVja2VyJyA9PiBmYWxzZSwKCQkJCQkJCQkJCQkJCSAgJ2lzX2xpc3RlcicgPT4gZmFsc2UsCgkJCQkJCQkJCQkJCQkgICdpc19hcmNoaXZlcicgPT4gZmFsc2UsCgkJCQkJCQkJCQkJCQkgICdpc191bmFyY2hpdmVyJyA9PiBmYWxzZSwKCQkJCQkJCQkJCQkJCSAgJ2lzX2NvbW1lbnRlcicgPT4gZmFsc2UsCgkJCQkJCQkJCQkJCQkgICdpc196aXBwZXInID0+IGZhbHNlLAoJCQkJCQkJCQkJCQkJICAnaXNfdW56aXBwZXInID0+IGZhbHNlLAoJCQkJCQkJCQkJCQkJICAnaXNfZXh0cmFjdG9yJyA9PiBmYWxzZSwKCQkJCQkJCQkJCQkJCSAgJ2Nhbl9hZGRfdmlydHVhbF9maWxlJyA9PiBmYWxzZQoJCQkJCQkJCQkJCQkJICk7CgoJCQkvLyBNdXN0IF9ub3RfIGRlZmF1bHQgJ3BhdGgnIHZhbHVlcyBiZWNhdXNlIHdlIHRlc3Qgd2hldGhlciBzZXQgb3Igbm90IHRvIGRlY2lkZSB3aGV0aGVyIHRvIHVzZQoJCQkkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAncGFyYW0nIF0gPSBhcnJheSggLy8gJ3BhdGgnID0+ICcnLAoJCQkJCQkJCQkJCQkJICAgJ3ppcCcgPT4gYXJyYXkoIC8vICdwYXRoJyA9PiAnJywKCQkJCQkJCQkJCQkJCSAgIAkJJ3ZlcnNpb24nID0+IGFycmF5KCAnbWFqb3InID0+IDAsICdtaW5vcicgPT4gMCApLAoJCQkJCQkJCQkJCQkJICAgCQknb3B0aW9ucycgPT4gJycsCgkJCQkJCQkJCQkJCQkgICAJCSdpbmZvJyA9PiAnJyApLAoJCQkJCQkJCQkJCQkJICAgJ3VuemlwJyA9PiBhcnJheSggLy8gJ3BhdGgnID0+ICcnLAoJCQkJCQkJCQkJCQkJICAgCQkndmVyc2lvbicgPT4gYXJyYXkoICdtYWpvcicgPT4gMCwgJ21pbm9yJyA9PiAwICksCgkJCQkJCQkJCQkJCQkgICAJCSdvcHRpb25zJyA9PiAnJywKCQkJCQkJCQkJCQkJCSAgIAkJJ2luZm8nID0+ICcnICkKCQkJCQkJCQkJCQkJCSApOwoKCQl9CgoJCS8qKgoJCSAqCV9fZGVzdHJ1Y3QoKQoJCSAqCgkJICoJRGVmYXVsdCBkZXN0cnVjdG9yLgoJCSAqCgkJICoJQHJldHVybgkJbnVsbAoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIF9fZGVzdHJ1Y3QoICkgewoKCQl9CgoJCS8qKgoJCSAqCXNldF9vc190eXBlKCkKCQkgKgoJCSAqCVNldHMgdGhlIGlkZW50aWZpZXIgZm9yIHRoZSBPUyB0eXBlIHRoYXQgd2UgYXJlIHJ1bm5pbmcgb24gdGhhdCBjYW4gdGhlbiBiZSB1c2VkIGZvcgoJCSAqCU9TIHNwZWNpZmljIHByb2Nlc3NpbmcuIElmIG5vIGVudW1lcmF0ZWQgdHlwZSB2YWx1ZSBpcyBwYXNzZWQgaW4gdGhlbiBkZWR1Y2UgdGhlCgkJICoJdmFsdWUgdG8gc2V0IGZyb20gc3lzdGVtIGluZm9ybWF0aW9uLgoJCSAqCU5vdGU6IEN1cnJlbnRseSB1c2VzIFBIUF9PUyB3aGljaCBzdHJpY3RseSBzcGVha2luZyBpcyB0aGUgT1MgdGhhdCBQSFAgd2FzIGJ1aWx0IG9uCgkJICoJd2hlcmVhcyBwaHBfdW5hbWUoKSBjb3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSB0aGUgYWN0dWFsIE9TIGJlaW5nIHJ1biBvbiBpZiB3ZSByZWFsbHkKCQkgKgluZWVkIHRoYXQgKGFuZCBzb21ldGltZXMgaXQgaGFzIHRvIHJldmVydCBiYWNrIHRvIGp1c3QgcmV0dXJuaW5nIHRoZSBQSFBfT1MgdmFsdWUgaWYKCQkgKgl0aGUgT1MgdW5hbWUgbGlicmFyeSBkb2Vzbid0IGV4aXN0IG9yIGlzbid0IHdvcmtpbmcgcHJvcGVybHkuCgkJICoKCQkgKglAcGFyYW0JCSRvc190eXBlCWludAkJT1MgdHlwZSB0byBzZXQgKGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZHVjZWQgdHlwZSkKCQkgKgoJCSAqLwoJCSBwdWJsaWMgZnVuY3Rpb24gc2V0X29zX3R5cGUoICRvc190eXBlID0gUEhQX0lOVF9NQVggKSB7CgoJCSAJLy8gQ2hlY2sgaWYgd2UgaGF2ZSBiZWVuIGdpdmVuIGEgdmFsaWQgZW51bWVyYXRlZCB2YWx1ZQoJCSAJaWYgKCAoIHNlbGY6Ok9TX1RZUEVfVU5LTk9XTiA8ICRvc190eXBlICkgJiYgKCBzZWxmOjpPU19UWVBFX01BWCA+PSAkb3NfdHlwZSApICkgewoKCQkgCQkkdGhpcy0+X29zX3R5cGUgPSAkb3NfdHlwZTsKCgkJIAl9IGVsc2UgewoKCQkgCQkvLyBVc2UgVUMgZm9yIGVhc2UgLSB0aGlzIF9zaG91bGQgbm90PyBjYXVzZSBhbnkgYW1iaWd1aXR5CgkJIAkJJG9zX25hbWUgPSBzdHJ0b3VwcGVyKCBQSFBfT1MgKTsKCgkJIAkJLy8gQ3VycmVudGx5IHdlJ2xsIGFzc3VtZSBhbnl0aGluZyB0aGF0IGRvZXNuJ3QgbG9vayBsaWtlIFdpbmRvd3MgaXMgKm5peCBiYXNlZAoJCSAJCWlmICggc3Vic3RyKCAkb3NfbmFtZSwgMCwgMyApID09PSAnV0lOJykgewoKCQkgCQkJJHRoaXMtPl9vc190eXBlID0gc2VsZjo6T1NfVFlQRV9XSU47CgoJCSAJCX0gZWxzZSB7CgoJCSAJCQkkdGhpcy0+X29zX3R5cGUgPSBzZWxmOjpPU19UWVBFX05JWDsKCgkJIAkJfQoKCQkgCX0KCgkJIAlyZXR1cm4gJHRoaXM7CgoJCSB9CgoJCS8qKgoJCSAqCWdldF9vc190eXBlKCkKCQkgKgoJCSAqCUdldHMgdGhlIGVudW1lcmF0ZWQgaWRlbnRpZmllciBmb3IgdGhlIE9TIHR5cGUgdGhhdCB3ZSBhcmUgcnVubmluZyBvbgoJCSAqCgkJICoJQHJldHVybgkJaW50CQlFbnVtZXJhdGVkIE9TIHR5cGUgdmFsdWUKCQkgKgoJCSAqLwoJCSBwdWJsaWMgZnVuY3Rpb24gZ2V0X29zX3R5cGUoICkgewoKCQkJcmV0dXJuICR0aGlzLT5fb3NfdHlwZTsKCgkJIH0KCgkJLyoqCgkJICoJc2V0X2V4ZWNfZGlyX2ZsYWcoKQoJCSAqCgkJICoJQ2hlY2tzIHdoZXRoZXIgZXhlY19kaXIgaXMgc2V0IGluIFBIUCBlbnZpcm9ubWVudCBhbmQgc2V0cyBpbnRlcm5hbCBmbGFnCgkJICoKCQkgKglAcmV0dXJuCQlib29sCQlUcnVlIGlzIGV4ZWNfZGlyIGlzIHNldCBhbmQgbm90LWVtcHR5CgkJICoKCQkgKi8KCQkgcHVibGljIGZ1bmN0aW9uIHNldF9leGVjX2Rpcl9mbGFnKCApIHsKCgkJIAkkZXhlY19kaXIgPSAnJzsKCQkgCSRyZXN1bHQgPSBmYWxzZTsKCgkJIAlpZiAoICggZmFsc2UgIT09ICggJGV4ZWNfZGlyID0gaW5pX2dldCggJ2V4ZWNfZGlyJyApICkgKSAmJiAoICcnICE9IHRyaW0oICRleGVjX2RpciApICkgKSB7CgoJCSAJCSRyZXN1bHQgPSB0cnVlOwoKCQkgCX0gZWxzZSB7CgoJCSAJCSRyZXN1bHQgPSBmYWxzZTsKCgkJIAl9CgoJCSAJJHRoaXMtPl9leGVjX2Rpcl9zZXQgPSAkcmVzdWx0OwoKCQkJcmV0dXJuICR0aGlzOwoKCQkgfQoKCQkvKioKCQkgKglnZXRfZXhlY19kaXJfZmxhZygpCgkJICoKCQkgKglHZXRzIHRoZSBmbGFnIGluZGljYXRpbmcgdGhlIHN0YXR1cyBvZiBleGVjX2RpciBzZXR0aW5nCgkJICoKCQkgKglAcmV0dXJuCQlib29sCQlWYWx1ZSBvZiAkX2V4ZWNfZGlyX3NldAoJCSAqCgkJICovCgkJIHB1YmxpYyBmdW5jdGlvbiBnZXRfZXhlY19kaXJfZmxhZygpIHsKCgkJCXJldHVybiAkdGhpcy0+X2V4ZWNfZGlyX3NldDsKCgkJIH0KCgkJLyoqCgkJICoJc2V0X2lnbm9yZV93YXJuaW5ncygpCgkJICoKCQkgKglDaGVja3MgY29uZGl0aW9ucyB0byBzZWUgaWYgd2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBhcmNoaXZlcyBhcmUKCQkgKgliZWluZyBidWlsdC4KCQkgKgoJCSAqCUBwYXJhbQkJYm9vbAkkaWdub3JlCUZhbHNlIHRvIG5vdCBpZ25vcmUgd2FybmluZ3MsIFRydWUgdG8gZm9yY2UgaWdub3JlCgkJICoJQHJldHVybgkJYm9vbAkJCVRydWUgaWYgY29uZGl0aW9ucyBpbmRpY2F0ZSB3YXJuaW5ncyBzaG91bGQgYmUgaWdub3JlZCwgZmFsc2Ugb3RoZXJ3aXNlCgkJICoKCQkgKi8KCQkgcHVibGljIGZ1bmN0aW9uIHNldF9pZ25vcmVfd2FybmluZ3MoICRpZ25vcmUgPSBudWxsICkgewoKCQkgCSR0aGlzLT5faWdub3JlX3dhcm5pbmdzID0gKCBpc19ib29sKCAkaWdub3JlICkgKSA/ICRpZ25vcmUgOiBmYWxzZSA7CgoJCQlyZXR1cm4gJHRoaXM7CgoJCSB9CgoJCS8qKgoJCSAqCWdldF9pZ25vcmVfd2FybmluZ3MoKQoJCSAqCgkJICoJR2V0cyB0aGUgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgd2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBidWlsZGluZyBhcmNoaXZlcwoJCSAqCgkJICoJQHJldHVybgkJYm9vbAkJVmFsdWUgb2YgJF9pZ25vcmVfd2FybmluZ3MKCQkgKgoJCSAqLwoJCSBwdWJsaWMgZnVuY3Rpb24gZ2V0X2lnbm9yZV93YXJuaW5ncygpIHsKCgkJCXJldHVybiAkdGhpcy0+X2lnbm9yZV93YXJuaW5nczsKCgkJIH0KCgkJLyoqCgkJICoJc2V0X2lnbm9yZV9zeW5saW5rcygpCgkJICoKCQkgKglDaGVja3MgY29uZGl0aW9ucyB0byBzZWUgaWYgc3ltbGlua3Mgc2hvdWxkIGJlIGlnbm9yZWQvbm90LWZvbGxvd2VkIHdoZW4gYXJjaGl2ZXMgYXJlCgkJICoJYmVpbmcgYnVpbHQuCgkJICoKCQkgKglAcGFyYW0JCWJvb2wJJGlnbm9yZQlGYWxzZSB0byBub3QgaWdub3JlIHN5bWxpbmtzLCBUcnVlIHRvIGZvcmNlIGlnbm9yZQoJCSAqCUByZXR1cm4JCWJvb2wJCQlUcnVlIGlmIGNvbmRpdGlvbnMgaW5kaWNhdGUgc3ltbGlua3Mgc2hvdWxkIGJlIGlnbm9yZWQvbm90LWZvbGxvd2VkLCBmYWxzZSBvdGhlcndpc2UKCQkgKgoJCSAqLwoJCSBwdWJsaWMgZnVuY3Rpb24gc2V0X2lnbm9yZV9zeW1saW5rcyggJGlnbm9yZSA9IG51bGwgKSB7CgoJCSAJJHRoaXMtPl9pZ25vcmVfc3ltbGlua3MgPSAgKCBpc19ib29sKCAkaWdub3JlICkgKSA/ICRpZ25vcmUgOiB0cnVlIDsKCgkJCXJldHVybiAkdGhpczsKCgkJIH0KCgkJLyoqCgkJICoJZ2V0X2lnbm9yZV9zeW1saW5rcygpCgkJICoKCQkgKglUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgb3B0aW9uIHRvIGlnbm9yZSBzeW1saW5rcyBpcyBzZXQuIEluIHRoaXMgY29udGV4dCBpZ25vcmluZwoJCSAqCW1lYW5zIG5vdCBmb2xsb3dpbmcgYnV0IHRoZSBzeW1saW5rIGl0c2VsZiBpcyByZWNvcmRlZCBpbiB0aGUgYmFja3VwCgkJICoKCQkgKglAcmV0dXJuCQlib29sCQkJCVZhbHVlIG9mICRfaWdub3JlX3N5bWxpbmtzCgkJICoKCQkgKi8KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gZ2V0X2lnbm9yZV9zeW1saW5rcygpIHsKCgkJCXJldHVybiAkdGhpcy0+X2lnbm9yZV9zeW1saW5rczsKCgkJfQoKCQkvKioKCQkgKglzZXRfY29tcHJlc3Npb24oKQoJCSAqCgkJICoJQ2hlY2tzIGNvbmRpdGlvbnMgdG8gc2VlIGlmIGNvbXByZXNzaW9uIHNob3VsZCBiZSB1c2VkIHdoZW4gYnVpbGRpbmcgYXJjaGl2ZS4KCQkgKgoJCSAqCUBwYXJhbQkJYm9vbAkkY29tcHJlc3Npb24JRmFsc2UgdG8gcHJvaGliaXQgY29tcHJlc3Npb24sIFRydWUgdG8gZm9yY2UgY29tcHJlc3Npb24KCQkgKglAcmV0dXJuCQlib29sCQkJCQlUcnVlIGlmIGNvbmRpdGlvbnMgaW5kaWNhdGUgY29tcHJlc3Npb24gc2hvdWxkIGJlIHVzZWQsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJIHB1YmxpYyBmdW5jdGlvbiBzZXRfY29tcHJlc3Npb24oICRjb21wcmVzc2lvbiA9IG51bGwgKSB7CgoJCSAJJHRoaXMtPl9jb21wcmVzc2lvbiA9ICAoIGlzX2Jvb2woICRjb21wcmVzc2lvbiApICkgPyAkY29tcHJlc3Npb24gOiB0cnVlIDsKCgkJCXJldHVybiAkdGhpczsKCgkJIH0KCgkJLyoqCgkJICoJZ2V0X2NvbXByZXNzaW9uKCkKCQkgKgoJCSAqCVRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBvcHRpb24gdG8gdXNlIGNvbXByZXNzaW9uIGlzIHNldC4KCQkgKgoJCSAqCUByZXR1cm4JCWJvb2wJCQkJVmFsdWUgb2YgJF9jb21wcmVzc2lvbgoJCSAqCgkJICovCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF9jb21wcmVzc2lvbigpIHsKCgkJCXJldHVybiAkdGhpcy0+X2NvbXByZXNzaW9uOwoKCQl9CgoJCS8qKgoJCSAqCXNldF9zYXBpX25hbWUoKQoJCSAqCgkJICoJU2V0cyB0aGUgc2FwaSBuYW1lIHRvIHRoYXQgZ2l2ZW4gb3IgbGVhdmUgZW1wdHkKCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJJG5hbWUJQSBzYXBpIG5hbWUgdG8gc2V0IChkZWZhdWx0IGVtcHR5KQoJCSAqCUByZXR1cm4Jb2JqZWN0CQkJVGhpcyBvYmplY3QKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X3NhcGlfbmFtZSggJHNhcGlfbmFtZSA9ICIiICkgewoKCQkJJHRoaXMtPl9zYXBpX25hbWUgPSAkc2FwaV9uYW1lOwoKCQkJcmV0dXJuICR0aGlzOwoKCQl9CgoJCS8qKgoJCSAqCWdldF9zYXBpX25hbWUoKQoJCSAqCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgc2FwaSBuYW1lCgkJICoKCQkgKglAcmV0dXJuCXN0cmluZwkJCVRoZSBzdG9yZWQgc2FwaSBuYW1lCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIGdldF9zYXBpX25hbWUoKSB7CgoJCQlyZXR1cm4gJHRoaXMtPl9zYXBpX25hbWU7CgoJCX0KCgkJLyoqCgkJICoJZ2V0X3N0YXR1cygpCgkJICoKCQkgKglSZXR1cm5zIHRoZSBzdGF0dXMgYXJyYXkKCQkgKgoJCSAqCUByZXR1cm4JCWFycmF5CVRoZSBzdGF0dXMgYXJyYXkKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfc3RhdHVzKCkgewoKCQkJcmV0dXJuICR0aGlzLT5fc3RhdHVzOwoKCQl9CgoJCS8qKgoJCSAqCWxvZ19hcmNoaXZlX2ZpbGVfc3RhdHMoKQoJCSAqCgkJICoJUHJvZHVjZWQgYSBzdGF0dXMgbG9nIGVudHJ5IGZvciB0aGUgYXJjaGl2ZSBmaWxlIHN0YXRzCgkJICoKCQkgKglAcGFyYW0Jc3RyaW5nCSRmaWxlCVRoZSBmaWxlIHRvIHN0YXQgYW5kIGFuZCBsb2cKCQkgKglAcmV0dXJuCgkJICoKCQkgKi8KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gbG9nX2FyY2hpdmVfZmlsZV9zdGF0cyggJGZpbGUgKSB7CgoJCQkvLyBHZXQgdGhlIGZpbGUgc3RhdHMgc28gd2UgY2FuIGxvZyBzb21lIGluZm9ybWF0aW9uCgkJCSRmaWxlX3N0YXRzID0gcGx1Z2luYnVkZHlfc3RhdDo6c3RhdCggJGZpbGUgKTsKCgkJCS8vIE9ubHkgbG9nIGFueXRoaW5nIGlmIHdlIGdvdCBzb21lIHZhbGlkIGZpbGUgc3RhdHMKCQkJaWYgKCBmYWxzZSAhPT0gJGZpbGVfc3RhdHMgKSB7CgoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXyggJ1ppcCBBcmNoaXZlIGZpbGUgc2l6ZTogJTEkcyBieXRlcywgb3duZWQgYnkgdXNlcjpncm91cCAlMiRzOiUzJHMgd2l0aCBwZXJtaXNzaW9ucyAlNCRzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICRmaWxlX3N0YXRzWyAnZHNpemUnIF0sICRmaWxlX3N0YXRzWyAndWlkJyBdLCAkZmlsZV9zdGF0c1sgJ2dpZCcgXSwgJGZpbGVfc3RhdHNbICdtb2RlX29jdGFsX2ZvdXInIF0gKSApOwoKCQkJfQoKCQl9CgoJCS8qKgoJCSAqCWdldF9tZXRob2RfdGFnKCkKCQkgKgoJCSAqCVJldHVybnMgdGhlIChzdGF0aWMpIG1ldGhvZCB0YWcKCQkgKgoJCSAqCUByZXR1cm4JCXN0cmluZyBUaGUgbWV0aG9kIHRhZwoJCSAqCgkJICovCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGdldF9tZXRob2RfdGFnKCk7CgoJCS8qKgoJCSAqCWdldF9pc19jb21wYXRpYmlsaXR5X21ldGhvZCgpCgkJICoKCQkgKglSZXR1cm5zIHRoZSAoc3RhdGljKSBpc19jb21wYXRpYmlsaXR5X21ldGhvZCBib29sZWFuCgkJICoKCQkgKglAcmV0dXJuCQlib29sCgkJICoKCQkgKi8KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZ2V0X2lzX2NvbXBhdGliaWxpdHlfbWV0aG9kKCk7CgoJCS8qKgoJCSAqCWdldF9tZXRob2RfZGV0YWlscygpCgkJICoKCQkgKglSZXR1cm5zIHRoZSBkZXRhaWxzIGFycmF5CgkJICoKCQkgKglAcmV0dXJuCQlhcnJheQoJCSAqCgkJICovCgkJcHVibGljIGZ1bmN0aW9uIGdldF9tZXRob2RfZGV0YWlscygpIHsKCgkJCXJldHVybiAkdGhpcy0+X21ldGhvZF9kZXRhaWxzOwoKCQl9CgoJCS8qKgoJCSAqCXNldF9tZXRob2RfZGV0YWlscygpCgkJICoKCQkgKglTZXRzIHRoZSBpbnRlcm5hbCAoc2V0dGFibGUpIGRldGFpbHMKCQkgKgoJCSAqCUBwYXJhbQkJYXJyYXkKCQkgKglAcmV0dXJuCQludWxsCgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X21ldGhvZF9kZXRhaWxzKCBhcnJheSAkZGV0YWlscywgJG1lcmdlID0gdHJ1ZSApIHsKCgkJCWlmICggdHJ1ZSA9PT0gJG1lcmdlICkgewoKCQkJCSR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdhdHRyJyBdID0gYXJyYXlfbWVyZ2UoICR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdhdHRyJyBdLCAkZGV0YWlsc1sgJ2F0dHInIF0gKTsKCQkJCSR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdwYXJhbScgXSA9IGFycmF5X21lcmdlKCAkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAncGFyYW0nIF0sICRkZXRhaWxzWyAncGFyYW0nIF0gKTsKCgkJCX0gZWxzZSB7CgoJCQkJJHRoaXMtPl9tZXRob2RfZGV0YWlscyA9ICRkZXRhaWxzOwoKCQkJfQoKCQkJcmV0dXJuICR0aGlzOwoKCQl9CgoJCS8qKgoJCSAqCWdldF9leGVjdXRhYmxlX3BhdGhzKCkKCQkgKgoJCSAqCVJldHVybnMgdGhlIGV4ZWN1dGFibGVfcGF0aHMgYXJyYXkKCQkgKgoJCSAqCUByZXR1cm4JCWFycmF5CgkJICoKCQkgKi8KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2V4ZWN1dGFibGVfcGF0aHMoKSB7CgoJCQlyZXR1cm4gJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzOwoKCQl9CgoJCS8qKgoJCSAqCXNldF9leGVjdXRhYmxlX3BhdGhzKCkKCQkgKgoJCSAqCVNldHMgdGhlIGV4ZWN1dGFibGVfcGF0aHMgYXJyYXkgc28gY2FuIGJlIHVzZWQgdG8gYXVnbWVudCBvciBvdmVycmlkZSB0aGUgZGVmYXVsdAoJCSAqCgkJICoJQHBhcmFtCQkkcGF0aHMJYXJyYXkJUGF0aHMgdG8gc2V0IG9yIG1lcmdlCgkJICoJQHBhcmFtCQkkbWVyZ2UJYm9vbAlUcnVlIChkZWZhdWx0KSBpZiBtZXJnaW5nIHBhdGhzIHdpdGggY3VycmVudCBwYXRocwoJCSAqCUBwYXJhbQkJJGJlZm9yZQlib29sCVRydWUgKGRlZmF1bHQpIGlmIHBhdGhzIHRvIGJlIHByZXBlbmRlZAoJCSAqCUByZXR1cm4JCW51bGwKCQkgKgoJCSAqLwoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfZXhlY3V0YWJsZV9wYXRocyggYXJyYXkgJHBhdGhzLCAkbWVyZ2UgPSB0cnVlLCAkYmVmb3JlID0gdHJ1ZSApIHsKCgkJCWlmICggdHJ1ZSA9PT0gJG1lcmdlICkgewoKCQkJCWlmICggdHJ1ZSA9PT0gJGJlZm9yZSApIHsKCgkJCQkJJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzID0gYXJyYXlfbWVyZ2UoICRwYXRocywgJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzICk7CgoJCQkJfSBlbHNlIHsKCgkJCQkJJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzID0gYXJyYXlfbWVyZ2UoICR0aGlzLT5fZXhlY3V0YWJsZV9wYXRocywgJHBhdGhzICk7CgoJCQkJfQoKCQkJfSBlbHNlIHsKCgkJCQkkdGhpcy0+X2V4ZWN1dGFibGVfcGF0aHMgPSAkcGF0aHM7CgoJCQl9CgoJCQlyZXR1cm4gJHRoaXM7CgoJCX0KCgkJLyoqCgkJICoJZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoKQoJCSAqCgkJICoJUmVjdXJzaXZlbHkgZGVsZXRlIGEgZGlyZWN0b3J5IGFuZCBpdCdzIGNvbnRlbnQKCQkgKgoJCSAqCUBwYXJhbQkJc3RyaW5nCSRkaXJlY3RvcnkJRGlyZWN0b3J5IHRvIGRlbGV0ZQoJCSAqCUByZXR1cm4JCWJvb2wJCQkJVHJ1ZSBpZiBvcGVyYXRpb24gZnVsbHkgc3VjY2Vzc2Z1bCwgb3RoZXJ3aXNlIGZhbHNlCgkJICoKCQkgKi8KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICRkaXJlY3RvcnkgKSB7CgkJCWlmICggJycgPT0gJGRpcmVjdG9yeSApIHsKCQkJCWVycm9yX2xvZyggJ0JhY2t1cEJ1ZGR5IEVycm9yICM0NzM4NDNjOiBIYWx0ZWQgZW1wdHkgZGlyZWN0b3J5IGRlbGV0aW9uLicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoKCQkJLy8gUmVtb3ZlIGFueSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yIHNvIHdlIGtub3cgd2hlcmUgd2UgYXJlCgkJCSRkaXJlY3RvcnkgPSBydHJpbSggJGRpcmVjdG9yeSwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKTsKCgkJCS8vIE5vbi1leGlzdGVudCBkaXJlY3Rvcnkgc28gcHJldGVuZCB3ZSBkZWxldGVkIGl0IG9rCgkJCWlmICggIWZpbGVfZXhpc3RzKCAkZGlyZWN0b3J5ICkgKSB7CgoJCQkJcmV0dXJuIHRydWU7CgoJCQl9CgoJCQkvLyBNYWtlIHN1cmUgaXQgd2Fzbid0IGp1c3QgYSBmaWxlIG9yIGxpbmsgLSBpZiBzbyBqdXN0IGRlbGV0ZSBpdCBhbmQgcmV0dXJuCgkJCWlmICggIWlzX2RpciggJGRpcmVjdG9yeSApIHx8IGlzX2xpbmsoICRkaXJlY3RvcnkgKSApIHsKCgkJCQlyZXR1cm4gQHVubGluayggJGRpcmVjdG9yeSApOwoKCQkJfQoKCQkJLy8gU28gaXQgaXMgYSBkaXJlY3Rvcnkgc28gcHJvY2VzcyBjb250ZW50CgkJCWZvcmVhY2ggKCBzY2FuZGlyKCAkZGlyZWN0b3J5ICkgYXMgJGl0ZW0gKSB7CgoJCQkJLy8gU2tpcCB0aGUgdGhpcyBhbmQgcGFyZW50IGRpcmVjdG9yaWVzCgkJCQlpZiAoICRpdGVtID09ICcuJyB8fCAkaXRlbSA9PSAnLi4nICkgewoKCQkJCQljb250aW51ZTsKCgkJCQl9CgoJCQkJLy8gRGVsZXRlIHRoZSBpdGVtIGlmIHdlIGNhbgoJCQkJaWYgKCAhJHRoaXMtPmRlbGV0ZV9kaXJlY3RvcnlfcmVjdXJzaXZlKCAkZGlyZWN0b3J5IC4gIi8iIC4gJGl0ZW0gKSApIHsKCgkJCQkJLy8gVE9ETzogU3VwcG9zZWRseSBjaGFuZ2UgdGhlIHBlcm1zIG9uIHRoZSBpdGVtIHNvIHdlIGNhbiBkZWxldGUgaXQ/CgkJCQkJQGNobW9kKCAkZGlyZWN0b3J5IC4gIi8iIC4gJGl0ZW0sIDA3NzcgKTsKCgkJCQkJaWYgKCAhJHRoaXMtPmRlbGV0ZV9kaXJlY3RvcnlfcmVjdXJzaXZlKCAkZGlyZWN0b3J5IC4gIi8iIC4gJGl0ZW0gKSApIHsKCgkJCQkJCXJldHVybiBmYWxzZTsKCgkJCQkJfQoKCQkJCX0KCgkJCX0KCgkJCXJldHVybiBAcm1kaXIoICRkaXJlY3RvcnkgKTsKCgkJfQoKCQkvKglfcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSgpCgkJICoKCQkgKglmdW5jdGlvbiBkZXNjcmlwdGlvbgoJCSAqCgkJICoJQHBhcmFtCQlzdHJpbmcJCSRmaWxlCQkJRmlsZSB0byB3cml0ZSBleGNsdXNpb25zIGludG8uCgkJICoJQHBhcmFtCQlhcnJheQkJJGV4Y2x1c2lvbnMJCUFycmF5IG9mIGRpcmVjdG9yaWVzL3BhdGhzIHRvIGV4Y2x1ZGUuIE9uZSBwZXIgbGluZS4KCQkgKglAcGFyYW0JCWF0cmluZwkJJHJvb3QJCQlSb290IGRpcmVjdG9yeSB0byBleGNsdWRlIHJlbGF0aXZlIHRvLgoJCSAqCUByZXR1cm4JCW51bGwKCQkgKi8KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gX3JlbmRlcl9leGNsdXNpb25zX2ZpbGUoICRmaWxlLCAkZXhjbHVzaW9ucywgJHJvb3QgPSAnJyApIHsKCQkJaWYgKCAnJyA9PSAkcm9vdCApIHsKCQkJCSRyb290ID0gQUJTUEFUSDsKCQkJfSBlbHNlIHsKCQkJCSRyb290ID0gcnRyaW0oICRyb290LCBESVJFQ1RPUllfU0VQQVJBVE9SICkgLiBESVJFQ1RPUllfU0VQQVJBVE9SOwoJCQl9CgoJCQkvLyBBcnJheSBmb3IgY2xlYW5lZCB1cCBleGNsdXNpb25zIGxpc3QKCQkJJHNhbml0aXplZF9leGNsdXNpb25zID0gYXJyYXkoKTsKCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NyZWF0aW5nIGJhY2t1cCBleGNsdXNpb25zIGZpbGUgYCcgLiAkZmlsZSAuICdgLicgKTsKCQkJLy8kZXhjbHVzaW9ucyA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmdldF9kaXJlY3RvcnlfZXhjbHVzaW9ucygpOwoKCQkJLy8gVGVzdCBlYWNoIGV4Y2x1c2lvbiBmb3IgdmFsaWRpdHkgKHByZXNlbmNlKSBhbmQgZHJvcCB0aG9zZSBub3QgYWN0dWFsbHkgcHJlc2VudAoJCQlmb3JlYWNoKCAkZXhjbHVzaW9ucyBhcyAkZXhjbHVzaW9uICkgewoKCQkJCS8vIE1ha2Ugc3VyZSBwbGF0Zm9ybSBzcGVjaWZpYyBkaXJlY3Rvcnkgc2VwYXJhdG9ycyBhcmUgdXNlZCAoY291bGQgaGF2ZSBtaWdyYXRlZCBmcm9tIGRpZmZlcmVudCBwbGF0Zm9ybSkKCQkJCSRleGNsdXNpb24gPSBwcmVnX3JlcGxhY2UoICd8WycgLiBhZGRzbGFzaGVzKCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApIC4gJ10rfCcsIERJUkVDVE9SWV9TRVBBUkFUT1IsICRleGNsdXNpb24gKTsKCgkJCQkvLyBESVJFQ1RPUlkuCgkJCQlpZiAoIGlzX2RpciggJHJvb3QgLiBsdHJpbSggJGV4Y2x1c2lvbiwgRElSRUNUT1JZX1NFUEFSQVRPUiApICkgKSB7CgoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0V4Y2x1ZGluZyBkaXJlY3RvcnkgYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOwoKCQkJCQkvLyBOZWVkIHRvIGFkZCB0aGUgd2lsZGNhcmQgc28gdGhhdCB6aXAgd2lsbCBleGNsdWRlIHRoZSBkaXJlY3RvcnkgYW5kIGNvbnRlbnQKCQkJCQkkZXhjbHVzaW9uID0gcnRyaW0oICRleGNsdXNpb24sIERJUkVDVE9SWV9TRVBBUkFUT1IgKSAuIERJUkVDVE9SWV9TRVBBUkFUT1IgLiAnKic7CgoJCQkJLy8gRklMRS4KCQkJCX0gZWxzZWlmICggaXNfZmlsZSggJHJvb3QgLiBsdHJpbSggJGV4Y2x1c2lvbiwgRElSRUNUT1JZX1NFUEFSQVRPUiApICkgKSB7CgoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0V4Y2x1ZGluZyBmaWxlIGAnIC4gJGV4Y2x1c2lvbiAuICdgLicgKTsKCgkJCQkvLyBTWU1CT0xJQyBMSU5LLgoJCQkJfSBlbHNlaWYgKCBpc19saW5rKCAkcm9vdCAuIGx0cmltKCAkZXhjbHVzaW9uLCBESVJFQ1RPUllfU0VQQVJBVE9SICkgKSApIHsKCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRXhjbHVkaW5nIHN5bWJvbGljIGxpbmsgYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOwoKCQkJCS8vIERPRVMgTk9UIEVYSVNULgoJCQkJfSBlbHNlIHsKCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnT21pdHRpbmcgZXhjbHVzaW9uIGFzIGZpbGUvZGlyZWN0b3J5IGRvZXMgbm90IGN1cnJlbnRseSBleGlzdDogYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOwoKCQkJCQkvLyBTa2lwIHRvIG5leHQgZXhjbHVzaW9uCgkJCQkJY29udGludWU7CgoJCQkJfQoKCQkJCS8vIFdlIGhhdmUgYSB2YWxpZCBleGNsdWRlIHNvIGFkZCBpdAoJCQkJJHNhbml0aXplZF9leGNsdXNpb25zW10gPSAkZXhjbHVzaW9uOwoKCQkJfQoKCQkJLy8gUHV0IHRoZSBleGNsdXNpb25zIHRvIGEgZmlsZSBhcyBhIHN0cmluZwoJCQlmaWxlX3B1dF9jb250ZW50cyggJGZpbGUsIGltcGxvZGUoIFBIUF9FT0wsICRzYW5pdGl6ZWRfZXhjbHVzaW9ucyApIC4gUEhQX0VPTCApOwoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdCYWNrdXAgZXhjbHVzaW9ucyBmaWxlIGNyZWF0ZWQuJyApOwoKCQl9IC8vIEVuZCByZW5kZXJfZXhjbHVzaW9uc19maWxlKCkuCgoJCS8qKgoJCSAqCXNsYXNoaWZ5KCkKCQkgKgoJCSAqCUEgZnVuY3Rpb24gdG8gYWRkIGEgc2xhc2ggdG8gdGhlIGVuZCBvZiBhIHBhdGguIEl0IGlzIG11Y2ggbGlrZSB0aGUgV29yZFByZXNzIHRyYWlsaW5nc2xhc2hpdCgpCgkJICoJYnV0IGFsbG93cyBmb3Igbm90IGFkZGluZyBhIHNsYXNoIHRvIGFuIGVtcHR5IHBhdGguIFdpbGwgYWRkIGEgbm9ybWFsaXplZCBzbGFzaCB1bmxlc3Mgb3ZlcnJpZGRlbgoJCSAqCU5vdGU6IFdpbGwgbm90IHByb2Nlc3MgYW55IGVtYmVkZGVkIGRpcmVjdG9yeSBzZXBhcmF0b3JzCgkJICoKCQkgKglAcGFyYW0Jc3RyaW5nCSRwYXRoCQkJCQlUaGUgcGF0aCB0byBhZGQgYSB0cmFpbGluZyBzbGFzaCB0bwoJCSAqCUBwYXJhbQlib29sCSRpZ25vcmVfZW1wdHkJCQlUcnVlIChkZWZhdWx0KSBpZiBzaG91bGQgX25vdF8gYWRkIGEgdHJhaWxpbmcgc2xhc2ggdG8gYW4gZW1wdHkgcGF0aAoJCSAqCUBwYXJhbQlib29sCSR1c2Vfbm9ybWFsaXplZF9zbGFzaAlUcnVlIChkZWZhdWx0KSB0byBhZGQgYSBub3JtYWxpemVkIHNsYXNoLCBvdGhlcndpc2UgYWRkIHBsYXRmb3JtIHNlcGFyYXRvcgoJCSAqCUByZXR1cm4Jc3RyaW5nCQkJCQkJCVRoZSBwYXRoIHdpdGggdHJhaWxpbmcgc2xhc2ggb3B0aW9uYWxseSBhZGRlZAoJCSAqCgkJICovCgoJCSBwcm90ZWN0ZWQgZnVuY3Rpb24gc2xhc2hpZnkoICRwYXRoLCAkaWdub3JlX2VtcHR5ID0gdHJ1ZSwgJHVzZV9ub3JtYWxpemVkX3NsYXNoID0gdHJ1ZSApIHsKCgkJIAkvLyBDaGVjayBpZiBpdCBpcyBlbXB0eSBub3cgYmVmb3JlIHdlIG1heSByZW1vdmUgYSBzaW5nbGUgc2xhc2gKCQkgCWlmICggISAoIGVtcHR5KCAkcGF0aCApICYmICggdHJ1ZSA9PT0gJGlnbm9yZV9lbXB0eSApICkgKSB7CgoJCQkJLy8gRmlyc3QgcmVtb3ZlIGFueSB0cmFpbGluZyBzbGFzaCB0aGF0IG1heSBiZSBwcmVzZW50CgkJCQkkcGF0aCA9ICR0aGlzLT51bnNsYXNoaWZ5KCAkcGF0aCApOwoKCQkJCWlmICggdHJ1ZSA9PT0gJHVzZV9ub3JtYWxpemVkX3NsYXNoICkgewoKCQkJCQkkcGF0aCA9ICRwYXRoIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SOwoKCQkJCX0gZWxzZSB7CgoJCQkJCSRwYXRoID0gJHBhdGggLiBESVJFQ1RPUllfU0VQQVJBVE9SOwoKCQkJCX0KCgkJIAl9CgoJCSAJcmV0dXJuICRwYXRoOwoKCQkgfQoKCQkvKioKCQkgKgl1bnNsYXNoaWZ5KCkKCQkgKgoJCSAqCUEgZnVuY3Rpb24gdG8gcmVtb3ZlIGEgc2xhc2ggdG8gdGhlIGVuZCBvZiBhIHBhdGguIEl0IGlzIG11Y2ggbGlrZSB0aGUgV29yZFByZXNzIHVudHJhaWxpbmdzbGFzaGl0KCkKCQkgKglidXQgY29wZXMgd2l0aCBlaXRoZXIgZm9ybSBvZiB0cmFpbGluZyBzbGFzaC4KCQkgKglOb3RlOiBXaWxsIG5vdCBwcm9jZXNzIGFueSBlbWJlZGRlZCBkaXJlY3Rvcnkgc2VwYXJhdG9ycyBhbmQgbWF5IHByb2R1Y2UgYW4gZW1wdHkgcGF0aC4KCQkgKgoJCSAqCUBwYXJhbQlzdHJpbmcJJHBhdGgJCQkJCVRoZSBwYXRoIHRvIHJlbW92ZSBhIHRyYWlsaW5nIHNsYXNoIGZyb20KCQkgKglAcGFyYW0JYm9vbAkkaWdub3JlX2VtcHR5CQkJVHJ1ZSAoZGVmYXVsdCkgaWYgc2hvdWxkIHByb2NlZWQgZXZlbiBpZiB3aWxsIHByb2R1Y2UgYW4gZW1wdHkgcGF0aAoJCSAqCUByZXR1cm4Jc3RyaW5nCQkJCQkJCVRoZSBwYXRoIHdpdGggdHJhaWxpbmcgc2xhc2ggcmVtb3ZlZAoJCSAqCgkJICovCgoJCSBwcm90ZWN0ZWQgZnVuY3Rpb24gdW5zbGFzaGlmeSggJHBhdGgsICRpZ25vcmVfZW1wdHkgPSB0cnVlICkgewoKCQkgCS8vIENyZWF0ZSBhIGNhbmRpZGF0ZSBwYXRoIHRvIG9wdGlvbmFsbHkgcmV0dXJuCgkJIAkkY2FuZGlkYXRlX3BhdGggPSBydHJpbSggJHBhdGgsIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICk7CgoJCSAJLy8gSWYgY2FuZGlkYXRlIGlzbid0IGVtcHR5IG9yIHdlJ3JlIGlnbm9yaW5nIGl0IGJlaW5nIGVtcHR5IGFueXdheQoJCSAJaWYgKCAhZW1wdHkoICRjYW5kaWRhdGVfcGF0aCApIHx8ICggdHJ1ZSA9PT0gJGlnbm9yZV9lbXB0eSApICkgewoKCQkJCSRwYXRoID0gJGNhbmRpZGF0ZV9wYXRoOwoKCQkgCX0KCgkJIAlyZXR1cm4gJHBhdGg7CgoJCSB9CgoJCS8qKgoJCSAqCWxvZ196aXBfcmVwb3J0cygpCgkJICoKCQkgKglBIGZ1bmN0aW9uIHRvIHByb2Nlc3MgcmVwb3J0cyBwYXJzZWQgZnJvbSB0aGUgemlwIHByb2Nlc3Mgb3V0cHV0IGFuZCBsb2cgdGhlbSBhbmQgb3B0aW9uYWxseQoJCSAqCXNlbmQgdG8gYSBmaWxlIGlmIHRoZXJlIGFyZSBhIGxvdCBvZiByZXBvcnRzLiBJZiB0aGUgbnVtYmVyIG9mIHJlcG9ydHMgaXMgc3VjaCB0aGF0IHRoZXkgcmVxdWlyZQoJCSAqCXRvIGJlIHdyaXR0ZW4gdG8gYSBmaWxlIHRoZW4gYWxsIHRoZSByZXBvcnRzIHdpbGwgYmUgd3JpdHRlbiB0byB0aGUgZmlsZSwgbm90IGp1c3QgdGhlIG92ZXJmbG93LgouCQkgKgoJCSAqCUBwYXJhbQlhcnJheQkkcmVwb3J0c19sb2cJCQlhcnJheSBjb250YWluaW5nIHRoZSB0eXBlIG9mIHJlcG9ydHMgdG8gbG9nCgkJICoJQHBhcmFtCWFycmF5CSRyZXBvcnRzX2Rlc2MJCQlhcnJheSBjb250YWluaW5nIHRleHQgZGVzY3JpcHRpb24gb2YgcmVwb3J0IHJlYXNvbgoJCSAqCUBwYXJhbQlzdHJpbmcJJHJlcG9ydF9wcmVmaXgJCQlhIHByZWZpeCBzdHJpbmcgdG8gZ28gYmVmb3JlIHRoZSByZXBvcnQgdGV4dAoJCSAqCUBwYXJhbQlpbnRlZ2VyCSRyZXBvcnRfbGluZXNfdG9fc2hvdwl0aGUgbnVtYmVyIG9mIHJlcG9ydHMgdG8gc2hvdyBpbiBsb2cgYmVmb3JlIG92ZXJmbG93aW5nIHRvIGEgZmlsZQoJCSAqCUBwYXJhbQlzdHJpbmcJJHJlcG9ydF9maWxlCQkJb3ZlcmZsb3cgZmlsZSBpZiB0b28gbWFueSByZXBvcnRzIHRvIHNob3cgZGlyZWN0bHkgaW4gbG9nCgkJICoJQHJldHVybglOL0EJCQkJCQkJCUN1cnJlbnRseSBubyByZXR1cm4gcGFyYW1ldGVyCgkJICoKCQkgKi8KCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGxvZ196aXBfcmVwb3J0cyggJHJlcG9ydHNfbG9nLCAkcmVwb3J0X2Rlc2MsICRyZXBvcnRfcHJlZml4LCAkcmVwb3J0X2xpbmVzX3RvX3Nob3csICRyZXBvcnRzX2ZpbGUgKSB7CgoJCQkkcmVwb3J0cyA9IGFycmF5KCk7CgkJCSRyZXBvcnRzX2NvdW50ID0gMDsKCQkJJHJlc3VsdCA9IGZhbHNlOwoKCQkJLy8gTWFrZSBzdXJlIHdlIGNsZWFyIHVwIGFudCBwcmV2aW91cyByZXBvcnRzIGZpbGUgdGhhdCBtYXkgc3RpbGwgYmUgcHJlc2VudAoJCQlpZiAoIEBmaWxlX2V4aXN0cyggJHJlcG9ydHNfZmlsZSApICkgewoKCQkJCUB1bmxpbmsoICRyZXBvcnRzX2ZpbGUgKTsKCgkJCX0KCgkJCS8vIFBhcnNlIHRoZSByZXBvcnRzIGFycmF5IGludG8gYW4gb3JkZXJlZCBhcnJheSBiYXNlZCBvbiBpZCAobG9nIGxpbmUgbnVtYmVyKSBhcyBzb3J0IGtleQoJCQlmb3JlYWNoICggJHJlcG9ydHNfbG9nIGFzICRyZWFzb24gPT4gJHJlcG9ydCApIHsKCgkJCQlmb3JlYWNoICggJHJlcG9ydCBhcyAkaWQgPT4gJGZpbGVuYW1lICkgewoKCQkJCQkkcmVwb3J0c1sgJGlkIF0gPSBzcHJpbnRmKCBfXyggJyUxJHM6ICglMiRzKTogJTMkcycgLiBQSFBfRU9MLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkcmVwb3J0X3ByZWZpeCwgJHJlcG9ydF9kZXNjWyAkcmVhc29uIF0sICRmaWxlbmFtZSApOwoKCQkJCX0KCgkJCX0KCgkJCS8vIE1ha2Ugc3VyZSBhcnJheSBpcyBub3cgb3JkZXJlZCBieSB0aGUgbnVtZXJpYyBsb2cgbGluZSBudW1iZXIga2V5CgkJCSRyZXN1bHQgPSBrc29ydCggJHJlcG9ydHMsIFNPUlRfTlVNRVJJQyApOwoKCQkJLy8gQWx3YXlzIHNob3cgdGhlIGZpcnN0IG51bWJlciBvZiBsaW5lcyBpbiB0aGUgbG9nCgkJCSRzaG93X2xpbmVzID0gYXJyYXlfc2xpY2UoICRyZXBvcnRzLCAwLCAkcmVwb3J0X2xpbmVzX3RvX3Nob3csIHRydWUgKTsKCgkJCWZvcmVhY2ggKCAkc2hvd19saW5lcyBhcyAkbGluZSApIHsKCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnWmlwIHByb2Nlc3MgcmVwb3J0ZWQ6ICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbGluZSApOwoKCQkJfQoKCQkJLy8gSWYgdGhlcmUgd2VyZSBtb3JlIGxpbmVzIHRoZW4gb3V0cHV0IHRoZSB3aG9sZSB0byB0aGUgcmVwb3J0IGZpbGUKCQkJJHJlcG9ydHNfY291bnQgPSBzaXplb2YoICRyZXBvcnRzICk7CgkJCWlmICggJHJlcG9ydHNfY291bnQgID4gJHJlcG9ydF9saW5lc190b19zaG93ICkgewoKCQkJCUBmaWxlX3B1dF9jb250ZW50cyggJHJlcG9ydHNfZmlsZSwgJHJlcG9ydHMgKTsKCgkJCQlpZiAoIEBmaWxlX2V4aXN0cyggJHJlcG9ydHNfZmlsZSApICkgewoKCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnWmlwIHByb2Nlc3MgcmVwb3J0ZWQgJTEkcyBtb3JlICUyJHMgcmVwb3J0JTMkcyAtIHBsZWFzZSByZXZpZXcgaW46ICU0JHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAoICRyZXBvcnRzX2NvdW50IC0gJHJlcG9ydF9saW5lc190b19zaG93ICksICRyZXBvcnRfcHJlZml4LCAoICggMSA9PSAkcmVwb3J0c19jb3VudCApID8gJycgOiAncycgKSwgJHJlcG9ydHNfZmlsZSApICk7CgoJCQkJfQoKCQkJfQoKCQl9CgoJCS8qKgoJCSAqCWlzX2F2YWlsYWJsZSgpCgkJICoKCQkgKglBIGZ1bmN0aW9uIHRoYXQgdGVzdHMgZm9yIHRoZSBhdmFpbGFiaWxpdHkgb2YgdGhlIHNwZWNpZmljIG1ldGhvZCBhbmQgaXRzIGF2YWlsYWJsZSBtb2Rlcy4gV2lsbCB0ZXN0IGZvcgoJCSAqICBtdWx0aXBsZSBtb2RlcyAoemlwICYgdW56aXApIGFuZCBvbmx5IHJldHVybiBmYWxzZSBpZiBuZWl0aGVyIGlzIGF2YWlsYWJsZS4gQWN0dWFsIGF2YWlsYWJsZSBtb2RlcyB3aWxsCgkJICogIGJlIGluZGljYXRlZCBpbiB0aGUgbWV0aG9kIGF0dHJpYnV0ZXMuCgkJICoKCQkgKglAcGFyYW0JCXN0cmluZwkkdGVtcGRpcglUZW1wb3JhcnkgZGlyZWN0b3J5IHRvIHVzZSBmb3IgYW55IHRlc3QgZmlsZXMgKG11c3QgYmUgd3JpdGVhYmxlKQoJCSAqCUByZXR1cm4JCWJvb2wJCQkJVHJ1ZSBpZiB0aGUgbWV0aG9kIGlzIGF2YWlsYWJsZSBmb3IgYXQgbGVhc3Qgb25lIG1vZGUsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGlzX2F2YWlsYWJsZSggJHRlbXBkaXIgKTsKCgkJLyoqCgkJICoJYWRkX3ZpcnR1YWxfZmlsZSgpCgkJICoKCQkgKglBIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIGEgdmlydHVhbCBmaWxlIHRvIGJlIGFkZGVkIHRvIGEgemlwIGFyY2hpdmUKCQkgKgoJCSAqCVRoZSB2aXJ0dWFsIGZpbGUgZGVzY3JpcHRvciBpcyBhbiBhcnJheSBvZiBkZXNjcmlwdG9yIGFycmF5KHMpIHRoYXQgcHJvdmlkZSBhIGZpbGVuYW1lCgkJICoJZm9yIHRoZSB2aXJ0dWFsIGZpbGUgdG8gYmUgYWRkZWQgKGNhbiBpbmNsdWRlIHBhdGggcHJlZml4KSBhbmQgYSBzdHJpbmcgdGhhdCBjb250YWlucyB0aGUKCQkgKglmaWxlIGNvbnRlbnQgKGNhbiBiZSBlbXB0eSBidXQgbXVzdCBiZSBwcmVzZW50KS4gRm9yIGV4YW1wbGU6CgkJICoJYXJyYXkoIGFycmF5KCAnZmlsZW5hbWUnID0+ICdzb21lZmlsZS50eHQnLCAnY29udGVudCcgPT4gJ0EgVGV4dCBTdHJpbmcnICkgKQoJCSAqCU5vdGUgdGhhdCB0aGUgYWN0dWFsIHppcCBmaWxlIHRvIHdoaWNoIHRoZSBmaWxlIGlzIGFkZGVkIGlzIGZvcm1lZCBmcm9tIHRoZSBmaWxlbmFlbSBmcm9tCgkJICoJdGhlICR6aXAgcGFyYW1ldGVyIGFwcGFlbmRlZCB0byB0aGUgJHRlbXBkaXIgZGlyZWN0b3J5IHBhdGguIFRoaXMgaXMgc2xpZ2h0bHkgY2x1bmt5IGFuZAoJCSAqCW1heSBiZSBjaGFuZ2VkIGF0IHNvbWUgbGF0ZXIgZGF0ZS4KCQkgKgoJCSAqCUBwYXJhbQkJc3RyaW5nCSR6aXAJCQkJCQlGdWxsIHBhdGggJiBmaWxlbmFtZSBvZiBaSVAgQXJjaGl2ZSBmaWxlIHRvIGFkZCBmaWxlIHRvCgkJICoJQHBhcmFtCQlhcnJheQkkdmlydHVhbF9maWxlX2Rlc2NyaXB0b3IJRnVsbCBkZXNjcmlwdG9yIG9mIGZpbGUocykgdG8gYWRkIHRvIFpJUCBBcmNoaXZlIGZpbGUKCQkgKglAcGFyYW0JCXN0cmluZwkkdGVtcGRpcgkJCQkJRnVsbCBwYXRoIG9mIGRpcmVjdG9yeSBmb3IgdGVtcG9yYXJ5IHVzYWdlCgkJICoJQHJldHVybgkJYm9vbAkJCQkJCQkJVHJ1ZSBpZiB0aGUgYWRkaXRpb24gd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGFkZF92aXJ0dWFsX2ZpbGUoICR6aXAsICR2aXJ0dWFsX2ZpbGVfZGVzY3JpcHRvciwgJHRlbXBkaXIgKTsKCgkJLyoqCgkJICoJY3JlYXRlKCkKCQkgKgoJCSAqCUEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIGFyY2hpdmUgZmlsZQoJCSAqCgkJICoJVGhlICRleGNsdWRlcyB3aWxsIGJlIGEgbGlzdCBvciByZWxhdGl2ZSBwYXRoIGV4Y2x1ZGVzIGlmIHRoZSAkbGlzdG1ha2VyIG9iamVjdCBpcyBOVUxMIG90aGVyd2lzZQoJCSAqCXdpbGwgYmUgYWJzb2x1dGUgcGF0aCBleGNsdWRlcyBhbmQgcmVsYXRpdmUgcGF0aCBleGNsdWRlcyBjYW4gYmUgaGFkIGZyb20gdGhlICRsaXN0bWFrZXIgb2JqZWN0CgkJICoKCQkgKglAcGFyYW0JCXN0cmluZwkkemlwCQkJRnVsbCBwYXRoICYgZmlsZW5hbWUgb2YgWklQIEFyY2hpdmUgZmlsZSB0byBjcmVhdGUKCQkgKglAcGFyYW0JCXN0cmluZwkkZGlyCQkJRnVsbCBwYXRoIG9mIGRpcmVjdG9yeSB0byBhZGQgdG8gWklQIEFyY2hpdmUgZmlsZQoJCSAqCUBwYXJhbWUJCWFycmF5CSRleGNsdWRlcwkJTGlzdCBvZiBlaXRoZXIgYWJzb2x1dGUgcGF0aCBleGNsdXNpb25zIG9yIHJlbGF0aXZlIGV4Y2x1c2lvbnMKCQkgKglAcGFyYW0JCXN0cmluZwkkdGVtcGRpcgkJRnVsbCBwYXRoIG9mIGRpcmVjdG9yeSBmb3IgdGVtcG9yYXJ5IHVzYWdlCgkJICoJQHBhcmFtCQlvYmplY3QJJGxpc3RtYWtlcgkJVGhlIG9iamVjdCBmcm9tIHdoaWNoIHdlIGNhbiBnZXQgYW4gaW5jbHVzaW9ucyBsaXN0CgkJICoJQHJldHVybgkJYm9vbAkJCQkJVHJ1ZSBpZiB0aGUgY3JlYXRpb24gd2FzIHN1Y2Nlc3NmdWwsIGZhbHNlIG90aGVyd2lzZQoJCSAqCgkJICovCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGNyZWF0ZSggJHppcCwgJGRpciwgJGV4Y2x1ZGVzLCAkdGVtcGRpciwgJGxpc3RtYWtlciA9IE5VTEwgKTsKCgkJLyoqCgkJICoJZXh0cmFjdCgpCgkJICoKCQkgKglFeHRyYWN0cyB0aGUgY29udGVudHMgb2YgYSB6aXAgZmlsZSB0byB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeSB1c2luZyB0aGUgYmVzdCB1bnppcCBtZXRob2RzIHBvc3NpYmxlLgoJCSAqCgkJICoJQHBhcmFtCXN0cmluZwkJJHppcF9maWxlCQkJCQlGdWxsIHBhdGggJiBmaWxlbmFtZSBvZiBaSVAgZmlsZSB0byBleHRyYWN0IGZyb20uCgkJICoJQHBhcmFtCXN0cmluZwkJJGRlc3RpbmF0aW9uX2RpcmVjdG9yeQkJRnVsbCBkaXJlY3RvcnkgcGF0aCB0byBleHRyYWN0IGludG8uCgkJICoJQHBhcmFtCWFycmF5CQkkaXRlbXMJCQkJCQlNYXBwaW5nIG9mIHdoYXQgdG8gZXh0cmFjdCBhbmQgdG8gd2hhdAoJCSAqCUByZXR1cm4JYm9vbAkJCQkJCQkJCXRydWUgb24gc3VjY2VzcyAoYWxsIGV4dHJhY3Rpb25zIHN1Y2Nlc3NmdWwpLCBmYWxzZSBvdGhlcndpc2UKCQkgKi8KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZXh0cmFjdCggJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5ID0gJycsICRpdGVtcyA9IGFycmF5KCkgKTsKCgkJLyoqCgkJICoJZmlsZV9leGlzdHMoKQoJCSAqCgkJICoJVGVzdHMgd2hldGhlciBhIGZpbGUgKHdpdGggcGF0aCkgZXhpc3RzIGluIHRoZSBnaXZlbiB6aXAgZmlsZQoJCSAqCUlmIGxlYXZlX29wZW4gaXMgdHJ1ZSB0aGVuIHRoZSB6aXAgb2JqZWN0IHdpbGwgYmUgbGVmdCBvcGVuIGZvciBmYXN0ZXIgY2hlY2tpbmcgZm9yIHN1YnNlcXVlbnQgZmlsZXMgd2l0aGluIHRoaXMgemlwCgkJICoKCQkgKglAcGFyYW0JCXN0cmluZwkkemlwX2ZpbGUJCVRoZSB6aXAgZmlsZSB0byBjaGVjawoJCSAqCUBwYXJhbQkJc3RyaW5nCSRsb2NhdGVfZmlsZQlUaGUgZmlsZSB0byB0ZXN0IGZvcgoJCSAqCUBwYXJhbQkJYm9vbAkkbGVhdmVfb3BlbgkJT3B0aW9uYWw6IFRydWUgaWYgdGhlIHppcCBmaWxlIHNob3VsZCBiZSBsZWZ0IG9wZW4KCQkgKglAcmV0dXJuCQlib29sCQkJCQlUcnVlIGlmIHRoZSBmaWxlIGlzIGZvdW5kIGluIHRoZSB6aXAgb3RoZXJ3aXNlIGZhbHNlCgkJICoKCQkgKi8KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZmlsZV9leGlzdHMoICR6aXBfZmlsZSwgJGxvY2F0ZV9maWxlLCAkbGVhdmVfb3BlbiA9IGZhbHNlICk7CgoJCS8qCWdldF9maWxlX2xpc3QoKQoJCSAqCgkJICoJR2V0IGFuIGFycmF5IG9mIGFsbCBmaWxlcyBpbiBhIHppcCBmaWxlIHdpdGggc29tZSBmaWxlIHByb3BlcnRpZXMuCgkJICoKCQkgKglAcGFyYW0JCXN0cmluZwkJJHppcF9maWxlCVRoZSBmaWxlIHRvIGxpc3QgdGhlIGNvbnRlbnQgb2YKCQkgKglAcmV0dXJuCQlib29sfGFycmF5CQkJCWZhbHNlIG9uIGZhaWx1cmUsIG90aGVyd2lzZSBhcnJheSBvZiBmaWxlIHByb3BlcnRpZXMgKG1heSBiZSBlbXB0eSkKCQkgKi8KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZ2V0X2ZpbGVfbGlzdCggJHppcF9maWxlICk7CgoJCS8qCWdldF9maWxlX2NvbnRlbnRzKCkKCQkgKgoJCSAqCUdldCBhbiBhcnJheSBvZiBhbGwgZmlsZXMgaW4gYSB6aXAgZmlsZSB3aXRoIHNvbWUgZmlsZSBwcm9wZXJ0aWVzLgoJCSAqCgkJICoJQHBhcmFtCQlzdHJpbmcJCSR6aXBfZmlsZQlUaGUgZmlsZSB0byBsaXN0IHRoZSBjb250ZW50IG9mCgkJICoJQHBhcmFtICAgICAgc3RyaW5nICAgICAgJGZpbGVfcGF0aCAgVGhlIHBhdGggdG8gdGhlIGZpbGUgdG8gZ2V0IGNvbnRlbnRzLgoJCSAqCUByZXR1cm4JCWJvb2x8YXJyYXkJCQkJZmFsc2Ugb24gZmFpbHVyZSwgb3RoZXJ3aXNlIGFycmF5IG9mIGZpbGUgcHJvcGVydGllcyAobWF5IGJlIGVtcHR5KQoJCSAqLwoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBnZXRfZmlsZV9jb250ZW50cyggJHppcF9maWxlLCAkZmlsZV9wYXRoICk7CgoJCS8qCXNldF9jb21tZW50KCkKCQkgKgoJCSAqCVJldHJpZXZlIGFyY2hpdmUgY29tbWVudC4KCQkgKgoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJJHppcF9maWxlCQlGaWxlbmFtZSBvZiBhcmNoaXZlIHRvIHNldCBjb21tZW50IG9uLgoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJJGNvbW1lbnQJCUNvbW1lbnQgdG8gYXBwbHkgdG8gYXJjaGl2ZS4KCQkgKglAcmV0dXJuCQlib29sCQkJCQkJCXRydWUgb24gc3VjY2Vzcywgb3RoZXJ3aXNlIGZhbHNlLgoJCSAqLwoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBzZXRfY29tbWVudCggJHppcF9maWxlLCAkY29tbWVudCApOwoKCQkvKglnZXRfY29tbWVudCgpCgkJICoKCQkgKglSZXRyaWV2ZSBhcmNoaXZlIGNvbW1lbnQuCgkJICoKCQkgKglAcGFyYW0JCXN0cmluZwkJJHppcF9maWxlCQlGaWxlbmFtZSBvZiBhcmNoaXZlIHRvIHJldHJpZXZlIGNvbW1lbnQgZnJvbS4KCQkgKglAcmV0dXJuCQlib29sfHN0cmluZwkJCQkJZmFsc2Ugb24gZmFpbHVyZSwgWmlwIGNvbW1lbnQgb3RoZXJ3aXNlLgoJCSAqLwoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBnZXRfY29tbWVudCggJHppcF9maWxlICk7CgoKCX0gLy8gZW5kIHBsdWdpbmJ1ZGR5X3piemlwY29yZSBjbGFzcy4KCn0KPz4K
###PACKDATA,FILE_END,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
###PACKDATA,FILE_START,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php

###PACKDATA,FILE_END,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php

###PACKDATA,FILE_END,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php
###PACKDATA,FILE_START,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
PD9waHAKLyoqCiAqIE1hbmFnZSBzb20gZWNwYW5lbCBzZXR0aW5ncy4KICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkvY1BhbmVsCiAqLwoKLyoKRVhBTVBMRToKCnJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi9jcGFuZWwvY3BhbmVsLnBocCcgKTsKCiRjcGFuZWxfdXNlciA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndXNlcicgKTsKJGNwYW5lbF9wYXNzd29yZCA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFzcycgKTsKJGNwYW5lbF9ob3N0ID0gImZvby5jb20iOwokZGJfbmFtZSA9ICdhcHBsZXMnOwokZGJfdXNlciA9ICdvcmFuZ2VzJzsKJGRiX3Bhc3MgPSAnYmFuYW5hcyc7CiRjcmVhdGVfZGJfcmVzdWx0ID0gcGJfYmFja3VwYnVkZHlfY3BhbmVsOjpjcmVhdGVfZGIoICRjcGFuZWxfdXNlciwgJGNwYW5lbF9wYXNzd29yZCwgJGNwYW5lbF9ob3N0LCAkZGJfbmFtZSwgJGRiX3VzZXIsICRkYl9wYXNzICk7CgppZiAoICRjcmVhdGVfZGJfcmVzdWx0ID09PSB0cnVlICkgewoJZWNobyAnU3VjY2VzcyEgQ3JlYXRlZCBkYXRhYmFzZSwgdXNlciwgYW5kIGFzc2lnbmVkIHVzZWQgdG8gZGF0YWJhc2UuJzsKfSBlbHNlIHsKCWVjaG8gJ0Vycm9yKHMpOjxicj48cHJlPicgLiBwcmludF9yKCAkY3JlYXRlX2RiX3Jlc3VsdCwgdHJ1ZSApIC4gJzwvcHJlPic7Cn0KCiovCgovKioKICogQ3BhbmVsIENsYXNzCiAqCiAqIE1hbmFnZSBzb21lIGNwYW5lbCBzZXR0aW5ncy4KICovCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2NwYW5lbCB7CgoJLyoqCgkgKiBDcmVhdGUgYSBkYXRhYmFzZSBhbmQgYXNzaWduIGEgdXNlciB0byBpdCB3aXRoIGFsbCBwcml2aWxhZ2VzLgoJICoKCSAqIFRPRE86IFVzZSBtb3JlIHJvYnVzdCB0aGFuIGZpbGVfZ2V0X2NvbnRlbnRzKCkuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkY3BhbmVsX3VzZXIgICAgICBjUGFuZWwgdXNlcm5hbWUuCgkgKiBAcGFyYW0gc3RyaW5nICRjcGFuZWxfcGFzc3dvcmQgIGNQYW5lbCBwYXNzd29yZC4KCSAqIEBwYXJhbSBzdHJpbmcgJGNwYW5lbF9ob3N0ICAgICAgY1BhbmVsIGhvc3RuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkZGJfbmFtZSAgICAgICAgICBEYXRhYmFzZSBuYW1lLgoJICogQHBhcmFtIHN0cmluZyAkZGJfdXNlciAgICAgICAgICBEYXRhYmFzZSB1c2VybmFtZS4KCSAqIEBwYXJhbSBzdHJpbmcgJGRiX3VzZXJwYXNzICAgICAgRGF0YWJhc2UgcGFzc3dvcmQuCgkgKiBAcGFyYW0gaW50ICAgICRjcGFuZWxfcG9ydCAgICAgIGNQYW5lbCBwb3J0IG51bWJlci4KCSAqIEBwYXJhbSBzdHJpbmcgJGNwYW5lbF9wcm90b2NvbCAgY1BhbmVsIHByb3RvY29sLgoJICoKCSAqIEByZXR1cm4gdHJ1ZXxhcnJheSAgQm9vbGVhbiB0cnVlIG9uIHN1Y2Nlc3MsIGVsc2UgYW4gYXJyYXkgb2YgZXJyb3JzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGNyZWF0ZV9kYiggJGNwYW5lbF91c2VyLCAkY3BhbmVsX3Bhc3N3b3JkLCAkY3BhbmVsX2hvc3QsICRkYl9uYW1lLCAkZGJfdXNlciwgJGRiX3VzZXJwYXNzLCAkY3BhbmVsX3BvcnQgPSAnMjA4MicsICRjcGFuZWxfcHJvdG9jb2wgPSAnaHR0cDovLycgKSB7CgkJJGNwYW5lbF9za2luID0gJ3gzJzsKCQkkZXJyb3JzICAgICAgPSBhcnJheSgpOwoKCQkkY3BhbmVsX3Bhc3N3b3JkID0gdXJsZW5jb2RlKCAkY3BhbmVsX3Bhc3N3b3JkICk7IC8vIFBhc3Mgb2Z0ZW4gaGFzIHNwZWNpYWwgY2hhcnMgc28gZW5jb2RlLgoKCQkvLyBDYWxjdWxhdGUgYmFzZSBVUkwuCgkJJGJhc2VfdXJsID0gInskY3BhbmVsX3Byb3RvY29sfXskY3BhbmVsX3VzZXJ9OnskY3BhbmVsX3Bhc3N3b3JkfUB7JGNwYW5lbF9ob3N0fTp7JGNwYW5lbF9wb3J0fS9leGVjdXRlL015c3FsIjsKCgkJLy8gR2VuZXJhdGUgY3JlYXRlIGRhdGFiYXNlIFVSTC4KCQkkY3JlYXRlX2RhdGFiYXNlX3VybCA9ICRiYXNlX3VybCAuICIvY3JlYXRlX2RhdGFiYXNlP25hbWU9eyRjcGFuZWxfdXNlcn1feyRkYl9uYW1lfSI7CgoJCS8vIENyZWF0ZSByZXF1ZXN0IGNvcmUgb2JqIGZvciBjb25uZWN0aW5nIHRvIEhUVFAuCgkJJHJlcXVlc3QgPSBuZXcgUmVxdWVzdENvcmUoICRjcmVhdGVfZGF0YWJhc2VfdXJsICk7CgkJdHJ5IHsKCQkJJHJlc3VsdCA9ICRyZXF1ZXN0LT5zZW5kX3JlcXVlc3QoIHRydWUgKTsKCQl9IGNhdGNoICggRXhjZXB0aW9uICRlICkgewoJCQlpZiAoIHN0cmlzdHIoICRlLT5nZXRNZXNzYWdlKCksICdjb3VsZG5cJ3QgY29ubmVjdCB0byBob3N0JyApICE9PSBmYWxzZSApIHsKCQkJCSRlcnJvcnNbXSA9IGVzY19odG1sX18oICdVbmFibGUgdG8gY29ubmVjdCB0byBob3N0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJGNwYW5lbF9ob3N0IC4gJ2AgJyAuIGVzY19odG1sX18oICdvbiBwb3J0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIGAnIC4gJGNwYW5lbF9wb3J0IC4gJ2AuICcgLiBlc2NfaHRtbF9fKCAnVmVyaWZ5IHRoZSBjUGFuZWwgZG9tYWluL1VSTCBhbmQgbWFrZSBzdXJlIHRoZSBzZXJ2ZXIgaXMgYWJsZSB0byBpbml0aWF0ZSBvdXRnb2luZyBodHRwIGNvbm5lY3Rpb25zIG9uIHBvcnQgJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkY3BhbmVsX3BvcnQgLiAnLiAnIC4gZXNjX2h0bWxfXyggJ1NvbWUgaG9zdHMgYmxvY2sgdGhpcy4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCXJldHVybiAkZXJyb3JzOwoJCQl9CgkJCSRlcnJvcnNbXSA9IGVzY19odG1sX18oICdDYXVnaHQgZXhjZXB0aW9uOiAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICRlLT5nZXRNZXNzYWdlKCkgLiAnLiAnIC4gZXNjX2h0bWxfXyggJ0Z1bGwgVVJMOiAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICRjcmVhdGVfZGF0YWJhc2VfdXJsOwoJCQlyZXR1cm4gJGVycm9yczsKCQl9CgoJCS8vIEdlbmVyYXRlIGNyZWF0ZSBkYXRhYmFzZSB1c2VyIFVSTC4KCQkkY3JlYXRlX3VzZXJfdXJsID0gJGJhc2VfdXJsIC4gIi9jcmVhdGVfdXNlcj9uYW1lPXskY3BhbmVsX3VzZXJ9X3skZGJfdXNlcn0mcGFzc3dvcmQ9eyRkYl91c2VycGFzc30iOwoKCQkvLyBHZW5lcmF0ZSBhc3NpZ24gdXNlciBkYXRhYmFzZSBhY2Nlc3MgVVJMLgoJCSRhc3NpZ25fdXNlcl91cmwgPSAkYmFzZV91cmwgLiAiL3NldF9wcml2aWxlZ2VzX29uX2RhdGFiYXNlP3VzZXI9eyRjcGFuZWxfdXNlcn1feyRkYl91c2VyfSZkYXRhYmFzZT17JGNwYW5lbF91c2VyfV97JGRiX25hbWV9JnByaXZpbGVnZXM9QUxMIjsKCgkJaWYgKCBmYWxzZSA9PT0gJHJlc3VsdC0+aXNPSygpICkgewoJCQkkZXJyb3JzW10gPSBlc2NfaHRtbF9fKCAnVW5hYmxlIHRvIGNyZWF0ZSBkYXRhYmFzZSAtIHJlc3BvbnNlIHN0YXR1cyBjb2RlOiAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICRyZXN1bHQtPnN0YXR1czsKCQl9IGVsc2UgewoJCQkkcmVzdWx0X2FycmF5ID0ganNvbl9kZWNvZGUoICRyZXN1bHQtPmJvZHksIHRydWUgKTsKCQkJaWYgKCBpc3NldCggJHJlc3VsdF9hcnJheVsnc3RhdHVzJ10gKSAmJiAwID09ICRyZXN1bHRfYXJyYXlbJ3N0YXR1cyddICkgewoJCQkJLy8gc3RhdHVzID0gMCBtZWFucyBhIGZhaWx1cmUuCgkJCQkkZXJyb3JzW10gPSBlc2NfaHRtbF9fKCAnVW5hYmxlIHRvIGNyZWF0ZSBkYXRhYmFzZTonLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCWlmICggaXNzZXQoICRyZXN1bHRfYXJyYXlbJ2Vycm9ycyddICkgJiYgKCBpc19hcnJheSggJHJlc3VsdF9hcnJheVsnZXJyb3JzJ10gKSApICkgewoJCQkJCWZvcmVhY2ggKCAkcmVzdWx0X2FycmF5WydlcnJvcnMnXSBhcyAkZXJyb3IgKSB7CgkJCQkJCSRlcnJvcnNbXSA9ICRlcnJvcjsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCS8vIFJ1biBjcmVhdGUgZGF0YWJhc2UgdXNlci4KCQlpZiAoIGNvdW50KCAkZXJyb3JzICkgPT09IDAgKSB7CgkJCSRyZXF1ZXN0ID0gbmV3IFJlcXVlc3RDb3JlKCAkY3JlYXRlX3VzZXJfdXJsICk7CgkJCXRyeSB7CgkJCQkkcmVzdWx0ID0gJHJlcXVlc3QtPnNlbmRfcmVxdWVzdCggdHJ1ZSApOwoJCQl9IGNhdGNoICggRXhjZXB0aW9uICRlICkgewoJCQkJJGVycm9yc1tdID0gZXNjX2h0bWxfXyggJ0NhdWdodCBleGNlcHRpb246ICcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJGUtPmdldE1lc3NhZ2UoKTsKCQkJCXJldHVybiAkZXJyb3JzOwoJCQl9CgoJCQlpZiAoIGZhbHNlID09PSAkcmVzdWx0LT5pc09LKCkgKSB7CgkJCQkkZXJyb3JzW10gPSBlc2NfaHRtbF9fKCAnVW5hYmxlIHRvIGNyZWFldCB1c2VyIC0gcmVzcG9uc2Ugc3RhdHVzIGNvZGU6ICcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJHJlc3VsdC0+c3RhdHVzOwoJCQl9IGVsc2UgewoJCQkJJHJlc3VsdF9hcnJheSA9IGpzb25fZGVjb2RlKCAkcmVzdWx0LT5ib2R5LCB0cnVlICk7CgkJCQlpZiAoIGlzc2V0KCAkcmVzdWx0X2FycmF5WydzdGF0dXMnXSApICYmIDAgPT0gJHJlc3VsdF9hcnJheVsnc3RhdHVzJ10gKSB7CgkJCQkJLy8gc3RhdHVzID0gMCBtZWFucyBhIGZhaWx1cmUuCgkJCQkJJGVycm9yc1tdID0gZXNjX2h0bWxfXyggJ1VuYWJsZSB0byBjcmVhdGUgdXNlcjonLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCQlpZiAoIGlzc2V0KCAkcmVzdWx0X2FycmF5WydlcnJvcnMnXSApICYmICggaXNfYXJyYXkoICRyZXN1bHRfYXJyYXlbJ2Vycm9ycyddICkgKSApIHsKCQkJCQkJZm9yZWFjaCAoICRyZXN1bHRfYXJyYXlbJ2Vycm9ycyddIGFzICRlcnJvciApIHsKCQkJCQkJCSRlcnJvcnNbXSA9ICRlcnJvcjsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJLy8gUnVuIGFzc2lnbiB1c2VyIHRvIGRhdGFiYXNlLgoJCWlmICggY291bnQoICRlcnJvcnMgKSA9PT0gMCApIHsKCQkJJHJlcXVlc3QgPSBuZXcgUmVxdWVzdENvcmUoICRhc3NpZ25fdXNlcl91cmwgKTsKCQkJdHJ5IHsKCQkJCSRyZXN1bHQgPSAkcmVxdWVzdC0+c2VuZF9yZXF1ZXN0KCB0cnVlICk7CgkJCX0gY2F0Y2ggKCBFeGNlcHRpb24gJGUgKSB7CgkJCQkkZXJyb3JzW10gPSBlc2NfaHRtbF9fKCAnQ2F1Z2h0IGV4Y2VwdGlvbjogJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkZS0+Z2V0TWVzc2FnZSgpOwoJCQkJcmV0dXJuICRlcnJvcnM7CgkJCX0KCgkJCWlmICggZmFsc2UgPT09ICRyZXN1bHQtPmlzT0soKSApIHsKCQkJCSRlcnJvcnNbXSA9IGVzY19odG1sX18oICdVbmFibGUgdG8gc2V0IHByaXZpbGVnZXMgZm9yIHVzZXIgLSByZXNwb25zZSBzdGF0dXMgY29kZTogJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkcmVzdWx0LT5zdGF0dXM7CgkJCX0gZWxzZSB7CgkJCQkkcmVzdWx0X2FycmF5ID0ganNvbl9kZWNvZGUoICRyZXN1bHQtPmJvZHksIHRydWUgKTsKCQkJCWlmICggaXNzZXQoICRyZXN1bHRfYXJyYXlbJ3N0YXR1cyddICkgJiYgKCAwID09ICRyZXN1bHRfYXJyYXlbJ3N0YXR1cyddICkgKSB7CgkJCQkJLy8gc3RhdHVzID0gMCBtZWFucyBhIGZhaWx1cmUuCgkJCQkJJGVycm9yc1tdID0gZXNjX2h0bWxfXyggJ1VuYWJsZSB0byBzZXQgcHJpdmlsZWdlcyBmb3IgdXNlcjonLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCQlpZiAoIGlzc2V0KCAkcmVzdWx0X2FycmF5WydlcnJvcnMnXSApICYmICggaXNfYXJyYXkoICRyZXN1bHRfYXJyYXlbJ2Vycm9ycyddICkgKSApIHsKCQkJCQkJZm9yZWFjaCAoICRyZXN1bHRfYXJyYXlbJ2Vycm9ycyddIGFzICRlcnJvciApIHsKCQkJCQkJCSRlcnJvcnNbXSA9ICRlcnJvcjsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCBjb3VudCggJGVycm9ycyApID4gMCApIHsgLy8gT25lIG9yIG1vcmUgZXJyb3JzLgoJCQlyZXR1cm4gJGVycm9yczsKCQl9IGVsc2UgewoJCQlyZXR1cm4gdHJ1ZTsgLy8gU3VjY2VzcyEKCQl9CgoJfQoKfSAvLyBlbmQgY2xhc3MuCg==
###PACKDATA,FILE_END,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
###PACKDATA,FILE_START,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
###PACKDATA,FILE_START,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
PD9waHAKLyoqCiAqIEZyYW1ld29yayBmb3IgaGFuZGxpbmcgYWxsIHBsdWdpbiBmdW5jdGlvYWxpdHksIGFyY2hpdGVjdHVyZSwgZXRjLgogKiAkc2V0dGluZ3MgdmFyaWFibGUgaXMgZXhwZWN0ZWQgdG8gYmUgaW4gdGhlIHNhbWUgc2NvcGUgb2YgdGhpcyBmaWxlIGFuZCBwcmV2aW91c2x5IHBvcHVsYXRlZCB3aXRoIGFsbCBwbHVnaW4gc2V0dGluZ3MuCiAqCiAqIEBhdXRob3IgRHVzdGluIEJvbHRvbgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKiBAc3VicGFja2FnZSBQbHVnaW5CdWRkeQogKi8KCi8qKgogKiBQbHVnaW5CdWRkeSBDbGFzcwogKi8KY2xhc3MgcGJfYmFja3VwYnVkZHkgewoKCS8qKgoJICogUGx1Z2luQnVkZHkgRnJhbWV3b3JrIFZlcnNpb24KCSAqCgkgKiBAdmFyIHN0cmluZwoJICovCglwcml2YXRlIHN0YXRpYyAkcGJmcmFtZXdvcmtfdmVyc2lvbiA9ICcxLjAuMjgnOwoKCS8qKgoJICogTWljcm90aW1lIHdoZW4gaW5pdCgpIHdhcyBmaXJzdCBydW4uCgkgKgoJICogQHZhciBmbG9hdAoJICovCglwdWJsaWMgc3RhdGljICRzdGFydF90aW1lOwoKCS8qKgoJICogU3RvcmVzIGFsbCBvcHRpb25zIGZvciBwbHVnaW4gdGhhdCB3aWxsIGNoYW5nZSBzdWNoIGFzIHVzZXIgZGVmaW5lZCBzZXR0aW5ncy4KCSAqCgkgKiBAdmFyIGFycmF5CgkgKi8KCXB1YmxpYyBzdGF0aWMgJG9wdGlvbnM7CgoJLyoqCgkgKiBVc2VyIGludGVyZmFjZSBjbGFzcyBmb3IgcmFwaWRseSBjb25zdHJ1Y3RpbmcgV1Atc3R5bGVkIEdVSXMuCgkgKgoJICogUkVNT1ZFRC4gTm93IGFkZGVkIGF0IHJ1bnRpbWUgd2hlbiBpbml0X2NsYXNzX2NvbnRyb2xsZXIoKSBjYWxsZWQKCSAqCgkgKiBAdmFyIG9iamVjdAoJICovCglwdWJsaWMgc3RhdGljICR1aTsKCgkvKioKCSAqIENsYXNzIGZvciBtYW5pcHVsYXRpbmcgJiBpbnRlcmZhY2luZyBmaWxlIHN5c3RlbS4KCSAqCgkgKiBAdmFyIG9iamVjdAoJICovCglwdWJsaWMgc3RhdGljICRmaWxlc3lzdGVtOwoKCS8qKgoJICogQ2xhc3MgZm9yIGZvcm1hdHRpbmcgZGF0YSBvciB0ZXh0IGluIGh1bWFuIGZyaWVuZGx5IGZvcm1zLgoJICoKCSAqIEB2YXIgb2JqZWN0CgkgKi8KCXB1YmxpYyBzdGF0aWMgJGZvcm1hdDsKCgkvKioKCSAqIEFycmF5IGhvbGRlciBmb3IgdXNlci1kZWZpbmVkIGNsYXNzZXMgbmVlZGVkIGdsb2JhbGx5IGJ5IHBsdWdpbi4gU2V0L2dldCB3aXRoICRjbGFzc1snY2xhc3Nfc2x1ZyddLgoJICoKCSAqIEB2YXIgYXJyYXkKCSAqLwoJcHVibGljIHN0YXRpYyAkY2xhc3NlcyA9IGFycmF5KCk7CgoJLyoqCgkgKiBBcnJheSBob2xkZXIgZm9yIHVzZXItZGVmaW5lZCB2YXJpYWJsZXMgbmVlZGVkIGdsb2JhbGx5IGJ5IHBsdWdpbi4KCSAqIFNldC9nZXQgd2l0aCAkdmFyaWFibGVzWyd2YXJfbmFtZSddLiBVc2VmdWwgZm9yIHRoaW5ncyBzdWNoIGFzIGFuIGluc3RhbmNlIGNvdW50ZXIgdGhhdCBpbmNyZW1lbnRzLgoJICoKCSAqIEB2YXIgYXJyYXkKCSAqLwoJcHVibGljIHN0YXRpYyAkdmFyaWFibGVzID0gYXJyYXkoKTsKCgoJLyoqCgkgKiBEZWZhdWx0IGZyYW1ld29yayBzZXR0aW5ncyBmb3IgdGhpcyBwbHVnaW4uCgkgKiBOT1QgdGhlIHNhbWUgYXMgb3B0aW9ucy4KCSAqCgkgKiBBY2Nlc3MgdmlhIHNlbGY6OnNldHRpbmdzKCkuCgkgKgoJICogQHZhciBhcnJheQoJICovCglwcml2YXRlIHN0YXRpYyAkX3NldHRpbmdzID0gYXJyYXkoCgkJJ3NsdWcnICAgICAgICAgICAgPT4gJycsCgkJJ3NlcmllcycgICAgICAgICAgPT4gJycsCgkJJ2RlZmF1bHRfb3B0aW9ucycgPT4gJycsCgkJJ2xvZ19zZXJpYWwnICAgICAgPT4gJycsCgkJJ2luaXQnICAgICAgICAgICAgPT4gJycsCgkpOwoKCS8qKgoJICogSG9sZHMgYWRtaW4gcGFnZSBzZXR0aW5ncyBmb3IgYWRkaW5nIHRvIHRoZSBhZG1pbiBtZW51IG9uIGEgaG9vayBsYXRlci4KCSAqCgkgKiBAdmFyIGFycmF5CgkgKi8KCXByaXZhdGUgc3RhdGljICRfcGFnZV9zZXR0aW5nczsKCgkvKioKCSAqIFNlcmlhbCBmb3Igd3JpdGluZyB0aGUgc3RhdHVzIGZvciB0aGlzIHBhZ2UgbG9hZC4KCSAqCgkgKiBAdmFyIHN0cmluZwoJICovCglwdWJsaWMgc3RhdGljICRfc3RhdHVzX3NlcmlhbCA9ICcnOwoKCS8qKgoJICogV2hldGhlciBvciBub3QgZmx1c2goKSBoYXMgYmVlbiBjYWxsZWQgeWV0IG9yIG5vdC4KCSAqCgkgKiBAdmFyIGJvb2wKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgJF9oYXNfZmx1c2hlZCA9IGZhbHNlOwoKCS8qKgoJICogQ29udHJvbGxlciBvYmplY3RzLiBTZWU6IC9jb250cm9sbGVycy8gZGlyZWN0b3J5LgoJICovCgoJLyoqCgkgKiBDb250cm9sbGVyIGZvciBXb3JkUHJlc3MgYWN0aW9ucy4KCSAqCgkgKiBAdmFyIG9iamVjdAoJICovCglwcml2YXRlIHN0YXRpYyAkX2FjdGlvbnM7CgoJLyoqCgkgKiBDb250cm9sbGVyIGZvciBXb3JkUHJlc3MgQUpBWCBhY3Rpb25zLgoJICoKCSAqIEB2YXIgb2JqZWN0CgkgKi8KCXB1YmxpYyBzdGF0aWMgJF9hamF4OwoKCS8qKgoJICogQ29udHJvbGxlciBmb3IgV29yZFByZXNzIHNjaGVkdWxlZCBjcm9ucy4KCSAqCgkgKiBAdmFyIG9iamVjdAoJICovCglwcml2YXRlIHN0YXRpYyAkX2Nyb247CgoJLyoqCgkgKiBDb250cm9sbGVyIGZvciBXb3JkUHJlc3MgYWRtaW4gZGFzaGJvYXJkIGl0ZW1zLgoJICoKCSAqIEB2YXIgb2JqZWN0CgkgKi8KCXByaXZhdGUgc3RhdGljICRfZGFzaGJvYXJkOwoKCS8qKgoJICogQ29udHJvbGxlciBmb3IgV29yZFByZXNzIGZpbHRlcnMuCgkgKgoJICogQHZhciBvYmplY3QKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgJF9maWx0ZXJzOwoKCS8qKgoJICogQ29udHJvbGxlciBmb3IgV29yZFByZXNzIHNob3J0Y29kZXMuCgkgKgoJICogQHZhciBvYmplY3QKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgJF9zaG9ydGNvZGVzOwoKCS8qKgoJICogQ29udHJvbGxlciBmb3IgV29yZFByZXNzIHdpZGdldHMuCgkgKi8KCS8vIHByaXZhdGUgc3RhdGljICRfd2lkZ2V0czsKCgkvKioKCSAqIENvbnRyb2xsZXIgZm9yIFdvcmRQcmVzcyBwYWdlcy4gU2VlIC9jb250cm9sbGVycy9wYWdlcy8gZGlyZWN0b3J5LgoJICoKCSAqIEB2YXIgb2JqZWN0CgkgKi8KCXByaXZhdGUgc3RhdGljICRfcGFnZXM7CgoJLyoqCgkgKiBMb2NhbCBwYXRoIHRvIHBsdWdpbi4KCSAqIEV4OiAvdXNlcnMvcGIvd3d3L3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4gKG5vIHRyYWlsaW5nIHNsYXNoKQoJICoKCSAqIEBzZWUgcGx1Z2luYnVkZHk6cGx1Z2luX3BhdGgoKQoJICoKCSAqIEB2YXIgc3RyaW5nCgkgKi8KCXByaXZhdGUgc3RhdGljICRfcGx1Z2luX3BhdGg7CgoJLyoqCgkgKiBVUkwgdG8gcGx1Z2luIGRpcmVjdG9yeS4KCSAqIEV4OiBodHRwOi8vcGx1Z2luYnVkZHkuY29tL3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4vICh3aXRoIHRyYWlsaW5nIHNsYXNoKQoJICoKCSAqIEBzZWUgc2VsZjo6cGx1Z2luX3VybCgpCgkgKgoJICogQHZhciBzdHJpbmcKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgJF9wbHVnaW5fdXJsOwoKCS8qKgoJICogUmV0dXJucyBVUkwgdG8gdGhlIGN1cnJlbnQgYWRtaW4gcGFnZSBpZiBvbiBhIHBsdWdpbiBwYWdlLgoJICogRXg6IGh0dHA6Ly9wbHVnaW5idWRkeS5jb20vd3AtYWRtaW4vaW5kZXgucGhwP3BhZ2U9cGJfbXlwbHVnaW4KCSAqCgkgKiBAc2VlIHNlbGY6OnBhZ2VfbGluaygpCgkgKgoJICogQHZhciBzdHJpbmcKCSAqLwoJcHJpdmF0ZSBzdGF0aWMgJF9zZWxmX2xpbms7CgoJLyoqCgkgKiBESVNBQkxFRC4gVXNpbmcgY3JlYXRlX2Z1bmN0aW9uKCkgdG8gYnlwYXNzIG5lZWQgZm9yIHRoaXMuIEN1cnJlbnRseSBvbmx5IGhvbGRpbmcgY2FsbGJhY2sgZm9yIHRoZSBhZG1pbiBtZW51LgoJICogTm90ZTogVHJ5IG5vdCB0byB1c2UgY3JlYXRlX2Z1bmN0aW9uKCkuCgkgKgoJICogQHNlZSBwbHVnaW5idWRkeV9jYWxsYmFja3MgY2xhc3MKCSAqCgkgKiBAdmFyIGFycmF5CgkgKi8KCS8vIHByaXZhdGUgc3RhdGljICRfY2FsbGJhY2tzOwoKCS8qKgoJICogSG9sZHMgdGFnIGFuZCB0aXRsZSBmb3IgdW5jb25zdHJ1Y3RlZCBkYXNoYm9hcmQgd2lkZ2V0cyB0ZW1wb3JhcmlseS4KCSAqCgkgKiBAdmFyIGFycmF5CgkgKi8KCXB1YmxpYyBzdGF0aWMgJF9kYXNoYm9hcmRfd2lkZ2V0czsKCgkvKioKCSAqIENvbnRhaW5zIHVwZGF0ZXIgb2JqZWN0IChpZiBlbmFibGVkKSBvZiB0aGUgbW9zdCB1cCB0byBkYXRlIHVwZGF0ZXIgZm91bmQuIFBvcHVsYXRlZCBvbiBpbml0IGhvb2suCgkgKgoJICogQHZhciBvYmplY3QKCSAqLwoJcHVibGljIHN0YXRpYyAkX3VwZGF0ZXI7CgoJLyoqCgkgKiBJZiB1bmFibGUgdG8gd3JpdGUgdG8gbG9nIHRoZW4gc2tpcCBhbGwgZnV0dXJlIGF0dGVtcHRzLgoJICoKCSAqIEB2YXIgYm9vbAoJICovCglwcml2YXRlIHN0YXRpYyAkX3NraXBsb2c7CgoJLyoqCgkgKiBDb25zdHJ1Y3RvciBmb3IgdGhpcyBzdGF0aWMgY2xhc3MuCgkgKgoJICogQ2FsbGVkIGZyb20gdGhlIHBsdWdpbidzIGluaXQgKG9yIG90aGVyIGRlZmluZWQgaW4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSkgZmlsZS4KCSAqCgkgKiBAcGFyYW0gYXJyYXkgICRwbHVnaW5idWRkeV9zZXR0aW5ncyAgQXJyYXkgb2YgcGx1Z2luIHNldHRpbmdzIHN1Y2ggYXMgc2x1ZywgZGVmYXVsdCBvcHRpb25zLgoJICogQHBhcmFtIHN0cmluZyAkcGx1Z2luYnVkZHlfaW5pdCAgICAgIEluaXQgZmlsZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpbml0KCAkcGx1Z2luYnVkZHlfc2V0dGluZ3MsICRwbHVnaW5idWRkeV9pbml0ID0gJ2luaXQucGhwJyApIHsKCQlzZWxmOjokc3RhcnRfdGltZSA9IG1pY3JvdGltZSggdHJ1ZSApOwoJCXNlbGY6OiRfc2V0dGluZ3MgID0gYXJyYXlfbWVyZ2UoIChhcnJheSkgc2VsZjo6JF9zZXR0aW5ncywgKGFycmF5KSAkcGx1Z2luYnVkZHlfc2V0dGluZ3MgKTsgLy8gTWVyZ2Ugc2V0dGluZ3Mgb3ZlciBmcmFtZXdvcmsgZGVmYXVsdHMuCgoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAncGx1Z2luX2Rpcl91cmwnICkgKSB7IC8vIFVSTCBhbmQgcGF0aCBmdW5jdGlvbnMgYXZhaWxhYmxlIChub3QgaW4gSW1wb3J0QnVkZHkgYnV0IGluc2lkZSBXb3JkUHJlc3MpLgoJCQlzZWxmOjokX3BsdWdpbl9wYXRoID0gcnRyaW0oIHBsdWdpbl9kaXJfcGF0aCggZGlybmFtZSggX19GSUxFX18gKSApLCAnL1xcJyApOwoJCQlzZWxmOjokX3BsdWdpbl91cmwgID0gcnRyaW0oIHBsdWdpbl9kaXJfdXJsKCBkaXJuYW1lKCBfX0ZJTEVfXyApICksICcvXFwnICk7CgkJfSBlbHNlIHsgLy8gR2VuZXJhdGUgVVJMIGFuZCBwYXRocyBvbGQgd2F5IChvbGQgV29yZFByZXNzIHZlcnNpb25zIG9yIGluc2lkZSBJbXBvcnRCdWRkeSkuCgkJCXNlbGY6OiRfcGx1Z2luX3BhdGggPSBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICk7CgkJCSRyZWxhdGl2ZV9wYXRoICAgICAgPSBsdHJpbSggc3RyX3JlcGxhY2UoICdcXCcsICcvJywgc3RyX3JlcGxhY2UoIHJ0cmltKCBBQlNQQVRILCAnXFxcLycgKSwgJycsIHNlbGY6OiRfcGx1Z2luX3BhdGggKSApLCAnXFxcLycgKTsKCQkJaWYgKCBwYl9pc19zdGFuZGFsb25lKCkgKSB7CgkJCQlzZWxmOjokX3BsdWdpbl91cmwgPSAnaW1wb3J0YnVkZHknOyAvLyBSZWxhdGl2ZSBpbXBvcnRidWRkeSBwYXRoLgoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgZnVsbCBwYXRoLgoJCQkJc2VsZjo6JF9wbHVnaW5fdXJsID0gc2l0ZV91cmwoKSAuICcvJyAuIGx0cmltKCAkcmVsYXRpdmVfcGF0aCwgJy8nICk7CgkJCQlpZiAoIGlzc2V0KCAkX1NFUlZFUlsnSFRUUFMnXSApICYmICdvbicgPT09ICRfU0VSVkVSWydIVFRQUyddICkgeyAvLyBIYW5kbGUgaHR0cHMgVVJMcyBwcm9wZXJseS4KCQkJCQlzZWxmOjokX3BsdWdpbl91cmwgPSBzdHJfcmVwbGFjZSggJ2h0dHA6Ly8nLCAnaHR0cHM6Ly8nLCBzZWxmOjokX3BsdWdpbl91cmwgKTsKCQkJCX0KCQkJfQoJCX0KCgkJaWYgKCBpc3NldCggJF9HRVRbJ3BhZ2UnXSApICkgeyAvLyBJZiBpbiBhbiBhZG1pbiBwYWdlIHRoZW4gYXBwZW5kIHBhZ2UgcXVlcnlzdHJpbmcuCgkJCSRhcnIgICAgICAgICAgICAgID0gZXhwbG9kZSggJz8nLCAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSApOyAvLyBhdm9pZCByZWZlcmVuY2UgZXJyb3IgYnkgc2V0dGluZyBoZXJlLgoJCQlzZWxmOjokX3NlbGZfbGluayA9IGFycmF5X3NoaWZ0KCAkYXJyICkgLiAnP3BhZ2U9JyAuIGh0bWxlbnRpdGllcyggJF9HRVRbJ3BhZ2UnXSApOwoJCQl1bnNldCggJGFyciApOwoJCX0KCgkJLy8gU2V0IHRoZSBpbml0IGZpbGUuCgkJc2VsZjo6JF9zZXR0aW5nc1snaW5pdCddID0gJHBsdWdpbmJ1ZGR5X2luaXQ7CgoJCS8vIGZpbGVzeXN0ZW0gY2xhc3MgY29udHJvbGxlci4KCQlpZiAoIGlzc2V0KCBzZWxmOjokX3NldHRpbmdzWydtb2R1bGVzJ11bJ2ZpbGVzeXN0ZW0nXSApICYmIHRydWUgPT09IHNlbGY6OiRfc2V0dGluZ3NbJ21vZHVsZXMnXVsnZmlsZXN5c3RlbSddICkgewoJCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICdmaWxlc3lzdGVtJyApOwoJCX0KCQkvLyBmb3JtYXQgY2xhc3MgY29udHJvbGxlci4KCQlpZiAoIGlzc2V0KCBzZWxmOjokX3NldHRpbmdzWydtb2R1bGVzJ11bJ2Zvcm1hdCddICkgJiYgdHJ1ZSA9PT0gc2VsZjo6JF9zZXR0aW5nc1snbW9kdWxlcyddWydmb3JtYXQnXSApIHsKCQkJc2VsZjo6aW5pdF9jbGFzc19jb250cm9sbGVyKCAnZm9ybWF0JyApOwoJCX0KCgkJaWYgKCBpc19hZG1pbigpICkgewoKCQkJLy8gTG9hZCBVSSBzeXN0ZW0uCgkJCXNlbGY6OmluaXRfY2xhc3NfY29udHJvbGxlciggJ3VpJyApOwoKCQkJLy8gTG9hZCBhY3RpdmF0aW9uIGhvb2sgaWYgaW4gYWRtaW4gYW5kIGFjdGl2YXRpb24gZmlsZSBleGlzdHMuCgkJCWlmICggZmlsZV9leGlzdHMoIHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL2NvbnRyb2xsZXJzL2FjdGl2YXRpb24ucGhwJyApICkgewoJCQkJcmVnaXN0ZXJfYWN0aXZhdGlvbl9ob29rKCBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy8nIC4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSwgYXJyYXkoICdwYl9iYWNrdXBidWRkeScsICdsb2FkX2FjdGl2YXRpb25fY29udHJvbGxlcicgKSApOyAvLyBSdW4gc29tZSBjb2RlIHdoZW4gcGx1Z2luIGlzIGFjdGl2YXRlZCBpbiBkYXNoYm9hcmQuCgkJCX0KCQl9CgoJfSAvLyBFbmQgaW5pdCgpLgoKCS8qKgoJICogTG9hZHMgQWN0aXZhdGlvbiBDb250cm9sbGVyCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9hY3RpdmF0aW9uX2NvbnRyb2xsZXIoKSB7CgkJLy8gUmVwbGFjZSBhIHBhdGggc3RhcnRpbmcgd2l0aCBcXCB0byBiZSBcXFxcIHNvIHRoYXQgd2hlbiBjcmVhdGVfZnVuY3Rpb24gcGFyc2VzIHRoZSBiYWNrc2xhc2ggaXQgd2lsbCByZXR1cm4gYmFjayB0byBcXC4KCQkkZXNjYXBlZF9wbHVnaW5fcGF0aCA9IHByZWdfcmVwbGFjZSggJyNeXFxcXFxcXFwjJywgJ1xcXFxcXFxcXFxcXFxcXFwnLCBzZWxmOjokX3BsdWdpbl9wYXRoICk7CgkJcmVxdWlyZV9vbmNlICRlc2NhcGVkX3BsdWdpbl9wYXRoIC4gJy9jb250cm9sbGVycy9hY3RpdmF0aW9uLnBocCc7Cgl9CgoJLyoqCgkgKiBSZXR1cm5zIGxvY2FsIHBhdGggdG8gcGx1Z2luLkV4OiAvdXNlcnMvcGIvd3d3L3dwLWNvbnRlbnQvcGx1Z2lucy9teV9wbHVnaW4gKG5vIHRyYWlsaW5nIHNsYXNoKQoJICoKCSAqIEByZXR1cm4gc3RyaW5nIFBsdWdpbiBwYXRoIGRpcmVjdG9yeSAobm8gdHJhaWxpbmcgc2xhc2gpLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHBsdWdpbl9wYXRoKCkgewoJCXJldHVybiBzZWxmOjokX3BsdWdpbl9wYXRoOwoJfSAvLyBFbmQgcGx1Z2luX3BhdGgoKS4KCgkvKioKCSAqIFJldHVybnMgVVJMIHRvIHBsdWdpbiBkaXJlY3RvcnkuCgkgKiBFeDogaHR0cDovL3BsdWdpbmJ1ZGR5LmNvbS93cC1jb250ZW50L3BsdWdpbnMvbXlfcGx1Z2luLyAod2l0aCB0cmFpbGluZyBzbGFzaCkKCSAqCgkgKiBAcmV0dXJuIHN0cmluZyAgUGx1Z2luIHBhdGggVVJMICh3aXRoIHRyYWlsaW5nIHNsYXNoKS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBwbHVnaW5fdXJsKCkgewoJCXJldHVybiBzZWxmOjokX3BsdWdpbl91cmw7Cgl9IC8vIEVuZCBwbHVnaW5fdXJsKCkuCgoJLyoqCgkgKiBSZXR1cm5zIFVSTCB0byB0aGUgY3VycmVudCBhZG1pbiBwYWdlIGlmIG9uIGEgcGx1Z2luIHBhZ2UuCgkgKiBFeDogaHR0cDovL3BsdWdpbmJ1ZGR5LmNvbS93cC1hZG1pbi9pbmRleC5waHA/cGFnZT1wYl9teXBsdWdpbgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICBQbHVnaW4gcGFnZSBVUkwgKHdpdGggdHJhaWxpbmcgc2xhc2gpLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHBhZ2VfdXJsKCkgewoJCXJldHVybiBzZWxmOjokX3NlbGZfbGluazsKCX0gLy8gRW5kIHBhZ2VfdXJsKCkuCgoJLyoqCgkgKiBSZXR1cm5zIHRoZSBhZG1pbi1zaWRlIEFKQVggVVJMLiBQcm9wZXJseSBoYW5kbGVzIHByZWZpeGluZyBhbmQgZXZlcnl0aGluZyBmb3IgUEIgZnJhbWV3b3JrLgoJICoKCSAqIEB0b2RvIHByb3ZpZGUgbm9uLWFkbWluLXNpZGUgZnVuY3Rpb25hbGl0eT8KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR0YWcgIFRhZyAvIHNsdWcgb2YgQUpBWC4KCSAqCgkgKiBAcmV0dXJuIHN0cmluZyAgVVJMIGZvciBBSkFYLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFqYXhfdXJsKCAkdGFnICkgewoJCXJldHVybiBhZG1pbl91cmwoICdhZG1pbi1hamF4LnBocD9hY3Rpb249cGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfYmFja3VwYnVkZHkmZnVuY3Rpb249JyAuICR0YWcgKTsKCX0gLy8gRW5kIGFqYXhfdXJsKCkuCgoJLyoqCgkgKiBSZXRyaWV2ZXMgbWlzYyBwbHVnaW4gc2V0dGluZ3MgYm90aCBwYXNzZWQgZnJvbSB0aGUgaW5pdCBmaWxlICggZGVmaW5lZCBpbiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdpbml0JyApICkgaW50byBzZWxmOjokX3NldHRpbmdzCgkgKgoJICogQWxzbyBwbHVnaW4gc2V0dGluZ3MgZGVmaW5lZCBpbiB0aGUgaW5pdCBmaWxlICggZGVmaW5lZCBpbiBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICdpbml0JyApICkgaGVhZGVyIGluY2x1ZGluZzoKCSAqIG5hbWUsIHRpdGxlLCBkZXNjcmlwdGlvbiwgYXV0aG9yLCBhdXRob3J1cmksIHZlcnNpb24sIHBsdWdpbnVyaSBPUiB1cmwsIHRleHRkb21haW4sIGRvbWFpbnBhdGgsIG5ldHdvcmsuCgkgKgoJICogQHNlZSBzZWxmOjppbml0KCkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR0eXBlICBUeXBlIG9mIHNldHRpbmcgdG8gcmV0cmlldmUuCgkgKgoJICogQHJldHVybiBtaXhlZCBWYWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhhdCBzZXR0aW5ncy4gTnVsbCBpZiBub3QgZm91bmQuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc2V0dGluZ3MoICR0eXBlICkgewoJCWlmICggaXNzZXQoIHNlbGY6OiRfc2V0dGluZ3NbICR0eXBlIF0gKSApIHsKCQkJcmV0dXJuIHNlbGY6OiRfc2V0dGluZ3NbICR0eXBlIF07CgkJfQoKCQlpZiAoIHBiX2lzX3N0YW5kYWxvbmUoKSApIHsKCQkJaWYgKCAndmVyc2lvbicgPT0gJHR5cGUgKSB7CgkJCQlyZXR1cm4gUEJfQkJfVkVSU0lPTjsKCQkJfQoJCX0KCgkJLy8gVGhlIHZhcmlhYmxlIGRvZXMgbm90IGV4aXN0IHNvIGNoZWNrIHRvIHNlZSBpZiBpdCBjYW4gYmUgZXh0cmFjdGVkIGZyb20gdGhlIHBsdWdpbidzIGhlYWRlci4KCQlpZiAoICEgaXNzZXQoIHNlbGY6OiRfc2V0dGluZ3NbJ25hbWUnXSApIHx8ICcnID09IHNlbGY6OiRfc2V0dGluZ3NbJ25hbWUnXSApIHsKCQkJaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ2dldF9wbHVnaW5fZGF0YScgKSApIHsKCQkJCXJlcXVpcmVfb25jZSBBQlNQQVRIIC4gJ3dwLWFkbWluL2luY2x1ZGVzL3BsdWdpbi5waHAnOwoJCQl9CgkJCSRpbmZvICAgICAgICA9IGFycmF5X2NoYW5nZV9rZXlfY2FzZSggZ2V0X3BsdWdpbl9kYXRhKCBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy8nIC4gcGJfYmFja3VwYnVkZHk6OnNldHRpbmdzKCAnaW5pdCcgKSwgZmFsc2UsIGZhbHNlICksIENBU0VfTE9XRVIgKTsKCQkJJGluZm9bJ3VybCddID0gJGluZm9bJ3BsdWdpbnVyaSddOwoJCQl1bnNldCggJGluZm9bJ3BsdWdpbnVyaSddICk7CgkJCXNlbGY6OiRfc2V0dGluZ3MgPSBhcnJheV9tZXJnZSggc2VsZjo6JF9zZXR0aW5ncywgJGluZm8gKTsKCQl9CgoJCS8vIFRyeSB0byByZXR1cm4gc2V0dGluZyBvdGhlcndpc2UgdGhyb3cgYW4gZXJyb3IuCgkJaWYgKCBpc3NldCggc2VsZjo6JF9zZXR0aW5nc1sgJHR5cGUgXSApICkgewoJCQlyZXR1cm4gc2VsZjo6JF9zZXR0aW5nc1sgJHR5cGUgXTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gJ3tVbmtub3duIHNldHRpbmdzKCkgdmFyaWFibGUgYCcgLiAkdHlwZSAuICdgfSc7CgkJfQoJfSAvLyBFbmQgc2V0dGluZ3MoKS4KCgkvKioKCSAqIFJldHVybnMgd2hldGhlciBhIG5vdCBhIHZhcmlhYmxlIGlzIGJsYW5rIChlbXB0eSBzdHJpbmcsIG51bGwsIHVuZGVmaW5lZCkgb3Igbm90LgoJICogQmUgc3VyZSB0byBzdXBwcmVzcyBlcnJvcnMgaWYgdXNpbmcgdGhpcyBmdW5jdGlvbiB3aGVyZSBpbmRleGVzIG1heSBiZSBub24tZXhpc3RhbnQgd2l0aCBAIHNpZ24uCgkgKgoJICogQHBhcmFtIG1peGVkICR2YWx1ZSAgVmFyaWFibGUgdG8gZGV0ZXJtaW5lIGlmIGl0IGlzIGJsYW5rIG9yIG5vdC4KCSAqCgkgKiBAcmV0dXJuIGJvb2xlYW4gIFRydWUgaWYgdmFyaWFibGUgaXMgc2V0IGFuZCBpcyBub3QgYW4gZW1wdHkgc3RyaW5nLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGJsYW5rKCAkdmFsdWUgKSB7CgkJcmV0dXJuIGVtcHR5KCAkdmFsdWUgKSAmJiAhIGlzX251bWVyaWMoICR2YWx1ZSApOwoJfSAvLyBFbmQgYmxhbmsoKS4KCgkvKioKCSAqIFJldHVybnMgJF9QT1NUIHZhbHVlIGlmIGF2YWlsYWJsZSwgZWxzZSByZXR1cm5zIGEgYmxhbmsuIFByZXZlbnRzIGhhdmluZyB0byBjaGVjayBpc3NldCBmaXJzdC4gU3RyaXBzIFdQJ3MgYWRkZWQgc2xhc2hlcy4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR2YWx1ZSAgS2V5IG9mIFBPU1QgdmFyaWFibGUgdG8gY2hlY2suCgkgKgoJICogQHJldHVybiBtaXhlZCAgVmFsdWUgb2YgUE9TVCB2YXJpYWJsZSBpZiBzZXQuIElmIG5vdCBzZXQgcmV0dXJucyBhIGJsYW5rIHN0cmluZyAnJy4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBfUE9TVCggJHZhbHVlID0gbnVsbCApIHsKCQlpZiAoICcnID09ICR2YWx1ZSB8fCBudWxsID09ICR2YWx1ZSApIHsgLy8gUmVxdWVzdGluZyAkX1BPU1QgdmFyaWFibGUuCgkJCWlmICggcGJfaXNfc3RhbmRhbG9uZSgpICYmICEgZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSApIHsgLy8gSWYgaW4gSW1wb3J0QnVkZHkgbW9kZSBBTkQgbWFnaWMgcXVvdGVzIGlzIG5vdCBvbiwgZG9udCBzdHJpcC4gV1AgZXNjYXBlcyBmb3IgdXMgaWYgbWFnaWMgcXVvdGVzIGFyZSBvZmYuCgkJCQlyZXR1cm4gJF9QT1NUOwoJCQl9CgkJCXJldHVybiBzdHJpcHNsYXNoZXNfZGVlcCggJF9QT1NUICk7CgkJfSBlbHNlIHsKCQkJJHBvc3RfdmFsdWUgPSAnJzsKCQkJaWYgKCBpc3NldCggJF9QT1NUWyAkdmFsdWUgXSApICkgewoJCQkJJHBvc3RfdmFsdWUgPSAkX1BPU1RbICR2YWx1ZSBdOwoJCQl9CgkJCWlmICggcGJfaXNfc3RhbmRhbG9uZSgpICYmICEgZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSApIHsgLy8gSWYgaW4gSW1wb3J0QnVkZHkgbW9kZSBBTkQgbWFnaWMgcXVvdGVzIGlzIG5vdCBvbiwgZG9udCBzdHJpcC4gV1AgZXNjYXBlcyBmb3IgdXMgaWYgbWFnaWMgcXVvdGVzIGFyZSBvZmYuCgkJCQlyZXR1cm4gJHBvc3RfdmFsdWU7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gc3RyaXBzbGFzaGVzX2RlZXAoICRwb3N0X3ZhbHVlICk7IC8vIFJlbW92ZSBXb3JkUHJlc3MnIG1hZ2ljLXF1b3Rlcy1zdHlsZSBlc2NhcGluZyBvZiBkYXRhLgoJCQl9CgkJfQoJfSAvLyBFbmQgX1BPU1QoKS4KCgkvKioKCSAqIFJldHVybnMgJF9HRVQgdmFsdWUgaWYgYXZhaWxhYmxlLCBlbHNlIHJldHVybnMgYSBibGFuay4gUHJldmVudHMgaGF2aW5nIHRvIGNoZWNrIGlzc2V0IGZpcnN0LgoJICoKCSAqIEB0b2RvIERvIHdlIG5lZWQgdG8gc3RyaXBzbGFzaGVzX2RlZXAoKSBvbiBHRVQgdmFycyBhbHNvIGxpa2UgUE9TVHM/CgkgKgoJICogQHBhcmFtIHN0cmluZyAkdmFsdWUgIEtleSBvZiBQT1NUIHZhcmlhYmxlIHRvIGNoZWNrLgoJICoKCSAqIEByZXR1cm4gbWl4ZWQgIFZhbHVlIG9mIFBPU1QgdmFyaWFibGUgaWYgc2V0LiBJZiBub3Qgc2V0IHJldHVybnMgYSBibGFuayBzdHJpbmcgJycuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gX0dFVCggJHZhbHVlID0gJycgKSB7CgkJaWYgKCAnJyA9PSAkdmFsdWUgfHwgbnVsbCA9PSAkdmFsdWUgKSB7IC8vIFJlcXVlc3RpbmcgJF9HRVQgdmFyaWFibGUuCgkJCWlmICggcGJfaXNfc3RhbmRhbG9uZSgpICYmICEgZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSApIHsgLy8gSWYgaW4gSW1wb3J0QnVkZHkgbW9kZSBBTkQgbWFnaWMgcXVvdGVzIGlzIG5vdCBvbiwgZG9udCBzdHJpcC4gV1AgZXNjYXBlcyBmb3IgdXMgaWYgbWFnaWMgcXVvdGVzIGFyZSBvZmYuCgkJCQlyZXR1cm4gJF9HRVQ7CgkJCX0KCQkJcmV0dXJuIHN0cmlwc2xhc2hlc19kZWVwKCAkX0dFVCApOwoJCX0gZWxzZSB7CgkJCSRnZXRfdmFsdWUgPSAnJzsKCQkJaWYgKCBpc3NldCggJF9HRVRbICR2YWx1ZSBdICkgKSB7CgkJCQkkZ2V0X3ZhbHVlID0gJF9HRVRbICR2YWx1ZSBdOwoJCQl9CgkJCWlmICggcGJfaXNfc3RhbmRhbG9uZSgpICYmICEgZ2V0X21hZ2ljX3F1b3Rlc19ncGMoKSApIHsgLy8gSWYgaW4gSW1wb3J0QnVkZHkgbW9kZSBBTkQgbWFnaWMgcXVvdGVzIGlzIG5vdCBvbiwgZG9udCBzdHJpcC4gV1AgZXNjYXBlcyBmb3IgdXMgaWYgbWFnaWMgcXVvdGVzIGFyZSBvZmYuCgkJCQlyZXR1cm4gJGdldF92YWx1ZTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBzdHJpcHNsYXNoZXNfZGVlcCggJGdldF92YWx1ZSApOyAvLyBSZW1vdmUgV29yZFByZXNzJyBtYWdpYy1xdW90ZXMtc3R5bGUgZXNjYXBpbmcgb2YgZGF0YS4KCQkJfQoJCX0KCX0gLy8gRW5kIF9HRVQoKS4KCgkvKioKCSAqIEdyYWJzICYgcmV0dXJucyBhIHJlZmVyZW5jZSB0byBhIHNwZWNpZmllZCBwb2ludCBpbiB0aGUgb3B0aW9ucyBhcnJheS4KCSAqIEV4IHVzYWdlOiAkZ3JvdXAgPSAmc2VsZjo6Z2V0X2dyb3VwKCAnZ3JvdXBzIycgLiAkX0dFVFsnZWRpdCddICk7CgkgKgoJICogQHBhcmFtIHN0cmluZyAkc2F2ZXBvaW50X3Jvb3QgIFBhdGggaW4gdGhlIGFycmF5IHRvIHJldHVybiBhIHJlZmVyZW5jZSB0by4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeDogZ3JvdXBzIzUgd2lsbCBncmFiIHNlbGY6OiRvcHRpb25zWydncm91cHMnXVs1XS4KCSAqCgkgKiBAcmV0dXJuIG1peGVkICBWYWx1ZSB3aXRoaW4gdGhlIGFycmF5IGF0IHRoZSBzcGVjaWZpZWQgcG9pbnQuCgkgKiAgICAgICAgICAgICAgICBDYW4gYmUgdXNlZCBhcyBhIHJlZmVyZW5jZS4gU2VlIGV4YW1wbGUgaW4gZGVzY3JpcHRpb24uCgkgKiAgICAgICAgICAgICAgICBOT1RFOiBSZXR1cm5zIGZhbHNlIGlmIG5vdCBmb3VuZC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiAmZ2V0X2dyb3VwKCAkc2F2ZXBvaW50X3Jvb3QgKSB7CgkJaWYgKCAnJyA9PSAkc2F2ZXBvaW50X3Jvb3QgKSB7IC8vIFJvb3Qgd2FzIHJlcXVlc3RlZC4KCQkJJHJldHVybiA9ICZzZWxmOjokb3B0aW9uczsKCQkJcmV0dXJuICRyZXR1cm47CgkJfQoKCQkkc2F2ZXBvaW50X3N1YnNlY3Rpb24gPSAmc2VsZjo6JG9wdGlvbnM7CgkJJHNhdmVwb2ludF9sZXZlbHMgICAgID0gZXhwbG9kZSggJyMnLCAkc2F2ZXBvaW50X3Jvb3QgKTsKCQlmb3JlYWNoICggJHNhdmVwb2ludF9sZXZlbHMgYXMgJHNhdmVwb2ludF9sZXZlbCApIHsKCQkJaWYgKCBpc3NldCggJHNhdmVwb2ludF9zdWJzZWN0aW9uWyAkc2F2ZXBvaW50X2xldmVsIF0gKSApIHsKCQkJCSRzYXZlcG9pbnRfc3Vic2VjdGlvbiA9ICYkc2F2ZXBvaW50X3N1YnNlY3Rpb25bICRzYXZlcG9pbnRfbGV2ZWwgXTsKCQkJfSBlbHNlIHsKCQkJCWVjaG8gJ3tFcnJvciAjNDQ4OTA0NTogSW52YWxpZCBhcnJheSBpbiBwYXRoOiBgJyAuICRzYXZlcG9pbnRfcm9vdCAuICdgfSc7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQl9CgoJCXJldHVybiAkc2F2ZXBvaW50X3N1YnNlY3Rpb247Cgl9IC8vIEVuZCBnZXRfZ3JvdXAoKS4KCgkvKioKCSAqIExvYWQgZnJvbSBCYWNrdXAKCSAqCgkgKiBAdG9kbyBpMThuLgoJICoKCSAqIEByZXR1cm4gbWl4ZWQgICRzZXR0aW5ncyBvciBmYWxzZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBsb2FkX2Zyb21fYmFja3VwKCkgewoJCSRyZXN0b3JlX2ZhaWxfbWVzc2FnZSAgICA9ICdFcnJvciAjODQ5Mzg5NDM6IFlvdXIgQmFja3VwQnVkZHkgU2V0dGluZ3Mgd2VyZSBkZXRlY3RlZCBhcyBtaXNzaW5nIG9yIGNvcnJ1cHQuIEJhY2t1cEJ1ZGR5IGhhcyBhdHRlbXB0ZWQgdG8gbG9hZCBCYWNrdXBCdWRkeSBzZXR0aW5ncyBmcm9tIGl0cyBzZXR0aW5ncyBiYWNrdXAgZmlsZSBidXQgZmFpbGVkLiBWZXJpZnkgeW91ciBCYWNrdXBCdWRkeSBzZXR0aW5ncyBhcmUgc3RpbGwgaW50YWN0IGFuZCB2YWxpZC4gVGhpcyBjb3VsZCBoYXZlIGJlZW4gY2F1c2VkIGJ5IGEgZGF0YWJhc2UgZXJyb3Igb3IgY29ycnVwdGlvbi4nOwoJCSRyZXN0b3JlX3N1Y2Nlc3NfbWVzc2FnZSA9ICdXYXJuaW5nICM4OTQzODQ6IFlvdXIgQmFja3VwQnVkZHkgU2V0dGluZ3Mgd2VyZSBkZXRlY3RlZCBhcyBtaXNzaW5nIG9yIGNvcnJ1cHQuIEJhY2t1cEJ1ZGR5IGhhcyByZXN0b3JlZCB5b3VyIHByZXZpb3VzIEJhY2t1cEJ1ZGR5IHNldHRpbmdzIGZyb20gaXRzIHNldHRpbmdzIGJhY2t1cCBmaWxlLiBQbGVhc2UgdmVyaWZ5IHlvdXIgcmVzdG9yZWQgQmFja3VwQnVkZHkgc2V0dGluZ3MgbG9vayBva2F5LiBUaGlzIGNvdWxkIGhhdmUgYmVlbiBjYXVzZWQgYnkgYSBkYXRhYmFzZSBlcnJvciBvciBjb3JydXB0aW9uLic7CgoJCXJlcXVpcmVfb25jZSBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvY2xhc3Nlcy9jb3JlLnBocCc7CgkJJGJhY2t1cF9kaXIgICAgICAgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKTsKCQkkZXhpc3RpbmdfYmFja3VwcyA9IGdsb2IoICRiYWNrdXBfZGlyIC4gJ3NldHRpbmdzX2JhY2t1cC0qLnBocCcgKTsKCQlpZiAoICEgaXNfYXJyYXkoICRleGlzdGluZ19iYWNrdXBzICkgfHwgY291bnQoICRleGlzdGluZ19iYWNrdXBzICkgPCAxICkgeyAvLyBObyBiYWNrdXBzIHNvIGp1c3QgbG9hZCBkZWZhdWx0cy4gTWF5IGJlIGEgbmV3IGluc3RhbGwuCgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIEZJWE1FOiBBdm9pZCBAIHN5bWJvbCBoZXJlLiBQb3NzaWJseSB1c2UgdHJ5L2NhdGNoPwoJCSRzZXR0aW5ncyA9IEBmaWxlX2dldF9jb250ZW50cyggJGV4aXN0aW5nX2JhY2t1cHNbMF0gKTsKCQlpZiAoIGZhbHNlID09PSAkc2V0dGluZ3MgKSB7CgkJCWJhY2t1cGJ1ZGR5X2NvcmU6Om1haWxfZXJyb3IoICRyZXN0b3JlX2ZhaWxfbWVzc2FnZSAuICcgRGV0YWlsczogVW5hYmxlIHRvIG9wZW4vcmVhZCBiYWNrdXAgZmlsZSB0aGF0IHdhcyBmb3VuZC4nICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIFNraXAgZmlyc3QgbGluZS4KCQkkc2Vjb25kX2xpbmVfcG9zID0gc3RycG9zKCAkc2V0dGluZ3MsICJcbiIgKSArIDE7CgkJJHNldHRpbmdzICAgICAgICA9IHN1YnN0ciggJHNldHRpbmdzLCAkc2Vjb25kX2xpbmVfcG9zICk7CgoJCS8vIERlY29kZSBiYWNrIGludG8gYW4gYXJyYXkuCgkJJHNldHRpbmdzID0gdW5zZXJpYWxpemUoIGJhc2U2NF9kZWNvZGUoICRzZXR0aW5ncyApICk7CgoJCWlmICggaXNfYXJyYXkoICRzZXR0aW5ncyApICYmICggaXNzZXQoICRzZXR0aW5nc1snZGF0YV92ZXJzaW9uJ10gKSApICkgeyAvLyBHb29kIHJlc3RvcmUuCgkJCXJldHVybiAkc2V0dGluZ3M7CgkJfSBlbHNlIHsgLy8gUmVzdG9yZSBmYWlsZWQuIEJhZCBkYXRhIQoJCQllcnJvcl9sb2coICdCYWNrdXBCdWRkeSBzZXR0aW5ncyBmYWlsZWQgcmVzdG9yZS4nICk7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJfSAvLyBFbmQgbG9hZF9mcm9tX2JhY2t1cCgpLgoKCS8qKgoJICogTG9hZHMgdGhlIHBsdWdpbiBvcHRpb25zIGFycmF5IGNvbnRhaW5pbmcgYWxsIHVzZXItY29uZmlndXJhYmxlIG9wdGlvbnMsIGV0Yy4KCSAqIEFjY2VzcyBvcHRpb25zIHZpYSBzZWxmOjokb3B0aW9ucy4gQnlwYXNzZXMgV1Agb3B0aW9ucyBjYWNoaW5nIGZvciByZWxpYWJpbGl0eS4KCSAqCgkgKiBAcGFyYW0gYm9vbCAkcmV0cnlfZGIgIFJldHJ5IERCLgoJICoKCSAqIEByZXR1cm4gbnVsbAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGxvYWQoICRyZXRyeV9kYiA9IHRydWUgKSB7CgkJaWYgKCBwYl9pc19zdGFuZGFsb25lKCkgKSB7IC8vIFN0YW5kYWxvbmUgZnJhbWV3b3JrIG1vZGUgKG91dHNpZGUgV29yZFByZXNzKS4KCQkJLy8gTG9hZCBvcHRpb25zIGZyb20gZmlsZSBpZiBpdCBleGlzdHMuCgkJCSRkYXRfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvX3NldHRpbmdzX2RhdC5waHAnOwoJCQlpZiAoIGZpbGVfZXhpc3RzKCAkZGF0X2ZpbGUgKSApIHsKCQkJCSRvcHRpb25zID0gZmlsZV9nZXRfY29udGVudHMoICRkYXRfZmlsZSApOwoKCQkJCS8vIFNraXAgZmlyc3QgbGluZS4KCQkJCSRzZWNvbmRfbGluZV9wb3MgPSBzdHJwb3MoICRvcHRpb25zLCAiXG4iICkgKyAxOwoJCQkJJG9wdGlvbnMgICAgICAgICA9IHN1YnN0ciggJG9wdGlvbnMsICRzZWNvbmRfbGluZV9wb3MgKTsKCgkJCQkvLyBEZWNvZGUgYmFjayBpbnRvIGFuIGFycmF5LgoJCQkJJG9wdGlvbnMgPSBqc29uX2RlY29kZSggYmFzZTY0X2RlY29kZSggJG9wdGlvbnMgKSwgdHJ1ZSApOwoJCQl9IGVsc2UgeyAvLyBObyBleGlzdGluZyBvcHRpb25zLiBFbXB0eSBvcHRpb25zLgoJCQkJJG9wdGlvbnMgPSBhcnJheSgpOwoJCQl9CgoJCQkvLyBNZXJnZSBkZWZhdWx0cy4KCQkJJG9wdGlvbnMgPSBhcnJheV9tZXJnZSggKGFycmF5KSBzZWxmOjpzZXR0aW5ncyggJ2RlZmF1bHRfb3B0aW9ucycgKSwgJG9wdGlvbnMgKTsKCgkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9ucyA9ICRvcHRpb25zOwoJCX0gZWxzZSB7IC8vIE5vcm1hbCBCQiBpbiBXb3JkUHJlc3MuCgkJCXNlbGY6OiRvcHRpb25zID0gc2VsZjo6X2dldF9vcHRpb24oICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApICk7CgkJfQoKCQkvLyBNZXJnZSBkZWZhdWx0cyBpbnRvIHRlbXBvcmFyeSAkb3B0aW9ucyB2YXJpYWJsZSBhbmQgc2F2ZSBpZiBpdCBkaWZmZXJzIHdpdGggdGhlIHByZS1tZXJnZSBvcHRpb25zLiBPbmx5IHJldHJpZXMgdGhpcyBvbmNlLgoJCWlmICggKCBlbXB0eSggc2VsZjo6JG9wdGlvbnMgKSB8fCAhIGlzc2V0KCBzZWxmOjokb3B0aW9uc1snZGF0YV92ZXJzaW9uJ10gKSApICYmIHRydWUgPT09ICRyZXRyeV9kYiApIHsgLy8gSWYgZW1wdHkgb3B0aW9ucyBvciBjb3JydXB0LgoJCQlnbG9iYWwgJHdwZGI7CgkJCS8vIElmIHRoZSBkYXRhYmFzZSBnb2VzIGF3YXkgaW4gdGhlIG1pZGRsZSBvZiBhIHF1ZXJ5LCB3YWl0IDUgc2Vjb25kcyBhbmQgdHJ5IGFnYWluLiBPdGhlcndpc2UsIHdlIHVuaW50ZW50aW9uYWxseSBvdmVyd3JpdGUgdGhlIHNldHRpbmdzLgoJCQlpZiAoICEgZW1wdHkoICR3cGRiLT5sYXN0X2Vycm9yICkgJiYgZmFsc2UgIT09IHN0cnBvcyggJHdwZGItPmxhc3RfZXJyb3IsICJTRUxFQ1Qgb3B0aW9uX3ZhbHVlIEZST00gYCR3cGRiLT5vcHRpb25zYCBXSEVSRSBvcHRpb25fbmFtZSA9ICdwYl9iYWNrdXBidWRkeSciICkgKSB7CgkJCQlzbGVlcCggNSApOwoJCQkJc2VsZjo6bG9hZCggZmFsc2UgKTsKCQkJCXJldHVybjsKCQkJfSBlbHNlIHsgLy8gTWlzc2luZyBvciBjb3JydXB0IG9wdGlvbnMgd2hlbiBsb2FkaW5nLiBFaXRoZXIgYSBuZXcgaW5zdGFsbCBvciBzZXR0aW5ncyB3ZW50IG1pc3NpbmcuCgoJCQkJLy8gQ2hlY2sgZm9yIGEgc2V0dGluZ3MgYmFja3VwIGFuZCB0cnkgdG8gbG9hZCBpdCBpZiB3ZXJlIG5vdCBpbiBhIHN0YW5kYWxvbmUgc2NyaXB0LgoJCQkJaWYgKCAhIHBiX2lzX3N0YW5kYWxvbmUoKSApIHsKCQkJCQkkcmVzdG9yZWRfc2V0dGluZ3MgPSBzZWxmOjpsb2FkX2Zyb21fYmFja3VwKCk7CgkJCQkJaWYgKCBmYWxzZSAhPT0gJHJlc3RvcmVkX3NldHRpbmdzICkgewoJCQkJCQkkb3B0aW9ucyA9ICRyZXN0b3JlZF9zZXR0aW5nczsKCQkJCQl9IGVsc2UgeyAvLyBMb2FkIGRlZmF1bHRzLgoJCQkJCQkkb3B0aW9ucyA9IChhcnJheSkgc2VsZjo6c2V0dGluZ3MoICdkZWZhdWx0X29wdGlvbnMnICk7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfSBlbHNlIHsgLy8gTm9ybWFsIG1lcmdlLgoJCQkkZGVmYXVsdHMgPSAoYXJyYXkpIHNlbGY6OnNldHRpbmdzKCAnZGVmYXVsdF9vcHRpb25zJyApOwoKCQkJLy8gQXBwbHkgZGVmYXVsdHMuCgkJCSRvcHRpb25zID0gYXJyYXlfbWVyZ2UoICRkZWZhdWx0cywgKGFycmF5KSBzZWxmOjokb3B0aW9ucyApOwoKCQkJLy8gQXBwbHkgZGVmYXVsdCBwcm9maWxlcy4KCQkJJG9wdGlvbnNbJ3Byb2ZpbGVzJ10gPSAoYXJyYXkpIHNlbGY6OiRvcHRpb25zWydwcm9maWxlcyddICsgJGRlZmF1bHRzWydwcm9maWxlcyddOyAvLyBNZXJnZSBhcnJheXMgb24gbnVtZXJpYyBpbmRpY2VzLiBMZWZ0IHNpZGUgaXMgcHJlc2VydmVkIChvcHBvc2l0ZSBvZiBhcnJheV9tZXJnZSgpKS4KCQl9CgkJaWYgKCBzZWxmOjokb3B0aW9ucyAhPT0gJG9wdGlvbnMgKSB7CgkJCXNlbGY6OiRvcHRpb25zID0gJG9wdGlvbnM7CgkJCXNlbGY6OnNhdmUoKTsKCQl9Cgl9IC8vIEVuZCBsb2FkKCkuCgoJLyoqCgkgKiBCeXBhc3NlcyBXb3JkUHJlc3Mgb3B0aW9ucyBjYWNoZS4gVW5mb3J0dW5hdGVseSB0aGVyZSBhcHBlYXJzIHRvIGJlIHJhY2UgY29uZGl0aW9uIGlzc3VlcyB3aXRoIHRoZSBidWlsdC1pbiBXUCBvcHRpb25zIHN5c3RlbS4KCSAqIFVzZWQgYnkgbG9hZCgpIGZ1bmN0aW9uIGludGVybmFsbHkuIFRha2VuIGFuZCBtb2RpZmllZCBmcm9tIFdvcmRQcmVzcyBjb3JlLgoJICoKCSAqIEBzZWUgbG9hZCgpCgkgKgoJICogQHBhcmFtIHN0cmluZyAkb3B0aW9uICAgT3B0aW9uIG5hbWUuCgkgKiBAcGFyYW0gbWl4ZWQgICRkZWZhdWx0ICBkZWZhdWx0ID0gZmFsc2U7IHdlIGRvIG5vdCB1c2UgdGhpcy4KCSAqCgkgKiBAcmV0dXJuIG1peGVkIFNhdmVkIG9wdGlvbiB2YWx1ZS4KCSAqLwoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX2dldF9vcHRpb24oICRvcHRpb24sICRkZWZhdWx0ID0gZmFsc2UgKSB7CgkJZ2xvYmFsICR3cGRiOwoKCQkkb3B0aW9uID0gdHJpbSggJG9wdGlvbiApOwoJCWlmICggZW1wdHkoICRvcHRpb24gKSApIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJaWYgKCBkZWZpbmVkKCAnV1BfU0VUVVBfQ09ORklHJyApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBGSVhNRTogcG9zc2libHkgdXNlIGdldF9zaXRlX29wdGlvbigpIGhlcmU/CgkJJGJhc2VfcHJlZml4ID0gJHdwZGItPmJhc2VfcHJlZml4OwoJCSRyb3cgICAgICAgICA9ICR3cGRiLT5nZXRfcm93KCAkd3BkYi0+cHJlcGFyZSggIlNFTEVDVCBvcHRpb25fdmFsdWUgRlJPTSB7JGJhc2VfcHJlZml4fW9wdGlvbnMgV0hFUkUgb3B0aW9uX25hbWUgPSAlcyBMSU1JVCAxIiwgJG9wdGlvbiApICk7CgkJLy8gSGFzIHRvIGJlIGdldF9yb3cgaW5zdGVhZCBvZiBnZXRfdmFyIGJlY2F1c2Ugb2YgZnVua2luZXNzIHdpdGggMCwgZmFsc2UsIG51bGwgdmFsdWVzLgoJCWlmICggaXNfb2JqZWN0KCAkcm93ICkgKSB7CgkJCSR2YWx1ZSA9ICRyb3ctPm9wdGlvbl92YWx1ZTsKCQl9IGVsc2UgewoJCQkkdmFsdWUgPSAkZGVmYXVsdDsKCQl9CgoJCS8vIElmIGhvbWUgaXMgbm90IHNldCB1c2Ugc2l0ZXVybC4KCQlpZiAoICdob21lJyA9PSAkb3B0aW9uICYmICcnID09ICR2YWx1ZSApIHsKCQkJcmV0dXJuIGdldF9vcHRpb24oICdzaXRldXJsJyApOwoJCX0KCgkJaWYgKCBpbl9hcnJheSggJG9wdGlvbiwgYXJyYXkoICdzaXRldXJsJywgJ2hvbWUnLCAnY2F0ZWdvcnlfYmFzZScsICd0YWdfYmFzZScgKSApICkgewoJCQkkdmFsdWUgPSB1bnRyYWlsaW5nc2xhc2hpdCggJHZhbHVlICk7CgkJfQoKCQkkdmFsdWUgPSBtYXliZV91bnNlcmlhbGl6ZSggJHZhbHVlICk7CgoJCXJldHVybiAkdmFsdWU7Cgl9IC8vIEVuZCBnZXRfb3B0aW9uKCkuCgoJLyoqCgkgKiBTYXZlIHBsdWdpbiBvcHRpb25zIHRvIGRhdGFiYXNlLgoJICoKCSAqIEByZXR1cm4gYm9vbCAgVHJ1ZSBpZiBzYXZlIHN1Y2NlZWRlZCwgZmFsc2Ugb3RoZXJ3aXNlLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNhdmUoKSB7CgkJaWYgKCBwYl9pc19zdGFuZGFsb25lKCkgfHwgYmFja3VwYnVkZHlfaXNfcmVzdG9yaW5nKCkgKSB7CgkJCSRvcHRpb25zX2NvbnRlbnQgPSBiYXNlNjRfZW5jb2RlKCBqc29uX2VuY29kZSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zICkgKTsKCQkJJHJlc3VsdCAgICAgICAgICA9IGZpbGVfcHV0X2NvbnRlbnRzKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L19zZXR0aW5nc19kYXQucGhwJywgIjw/cGhwIGRpZSgnPCEtLSAvLyBTaWxlbmNlIGlzIGdvbGRlbi4gLS0+Jyk7ID8+XG4iIC4gJG9wdGlvbnNfY29udGVudCApOwoJCQkvLyBGSVhNRTogQ291bGQgd2UganVzdCByZXR1cm4gJHJlc3VsdD8KCQkJaWYgKCBmYWxzZSA9PT0gJHJlc3VsdCApIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB0cnVlOwoJCQl9CgkJfQoKCQlhZGRfc2l0ZV9vcHRpb24oICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApLCBzZWxmOjokb3B0aW9ucywgJycsICdubycgKTsgLy8gJ05vJyBwcmV2ZW50cyBhdXRvbG9hZCBpZiB3ZSB3b250IGFsd2F5cyBuZWVkIHRoZSBkYXRhIGxvYWRlZC4KCQlyZXR1cm4gc2VsZjo6X3VwZGF0ZV9vcHRpb24oICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApLCBzZWxmOjokb3B0aW9ucyApOwoJfSAvLyBFbmQgc2F2ZSgpLgoKCS8qKgoJICogQnlwYXNzZXMgV29yZFByZXNzIGJ1aWx0IGluIHVwZGF0ZSBvcHRpb24gY2FjaGUuIFRha2VuIGZyb20gV29yZFByZXNzIGNvcmUgYW5kIG1vZGlmaWVkLgoJICoKCSAqIEBzZWUgc2VsZjo6X2dldF9vcHRpb24oKQoJICogQHNlZSBzZWxmOjpzYXZlKCkKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRvcHRpb24gICAgT3B0aW9uIG5hbWUuCgkgKiBAcGFyYW0gbWl4ZWQgICRuZXd2YWx1ZSAgTmV3IHZhbHVlIHRvIHNhdmUgaW50byBvcHRpb24uCgkgKgoJICogQHJldHVybiBib29sICBUcnVlIG9uIHN1Y2Nlc3M7IGZhbHNlIG90aGVyd2lzZS4KCSAqLwoJcHJpdmF0ZSBzdGF0aWMgZnVuY3Rpb24gX3VwZGF0ZV9vcHRpb24oICRvcHRpb24sICRuZXd2YWx1ZSApIHsKCQlnbG9iYWwgJHdwZGI7CgoJCSRvcHRpb24gPSB0cmltKCAkb3B0aW9uICk7CgkJaWYgKCBlbXB0eSggJG9wdGlvbiApICkgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkkb2xkdmFsdWUgPSBnZXRfb3B0aW9uKCAkb3B0aW9uICk7CgkJaWYgKCBmYWxzZSA9PT0gJG9sZHZhbHVlICkgewoJCQlyZXR1cm4gYWRkX29wdGlvbiggJG9wdGlvbiwgJG5ld3ZhbHVlICk7CgkJfSBlbHNlIHsKCQkJJG5ld3ZhbHVlID0gc2FuaXRpemVfb3B0aW9uKCAkb3B0aW9uLCAkbmV3dmFsdWUgKTsKCQkJJG5ld3ZhbHVlID0gbWF5YmVfc2VyaWFsaXplKCAkbmV3dmFsdWUgKTsKCQkJJHJlc3VsdCAgID0gJHdwZGItPnVwZGF0ZSgKCQkJCSR3cGRiLT5vcHRpb25zLCBhcnJheSgKCQkJCQknb3B0aW9uX3ZhbHVlJyA9PiAkbmV3dmFsdWUsCgkJCQkpLCBhcnJheSgKCQkJCQknb3B0aW9uX25hbWUnID0+ICRvcHRpb24sCgkJCQkpCgkJCSk7CgoJCQlpZiAoICRyZXN1bHQgKSB7CgkJCQlyZXR1cm4gdHJ1ZTsKCQkJfQoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfSAvLyBFbmQgX3VwZGF0ZV9vcHRpb24oKS4KCgkvKioKCSAqIEhlbHBzIHNlY3VyaXR5IGJ5IGF0dGVtcHRpbmcgdG8gYmxvY2sgZGlyZWN0b3J5IGJyb3dzaW5nIGJ5IGNyZWF0aW5nCgkgKiBib3RoIGluZGV4Lmh0bSBmaWxlcyBhbmQgLmh0YWNjZXNzIGZpbGVzIHR1cm5pbmcgYnJvd3Npbmcgb2ZmLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGRpcmVjdG9yeSAgICAgICBGdWxsIGFic29sdXRlIHBhc3MgdG8gaW5zZXJ0IGFudGktZGlyZWN0b3J5LWJyb3dzaW5nIGZpbGVzIGludG8uIE5vIHRyYWlsaW5nIHNsYXNoLgoJICogQHBhcmFtIGJvb2wgICAkZGllX29uX2ZhaWwgICAgIFdoZW4gdHJ1ZSBhbHNvIGVuZm9yY2UgZGVueWluZyBBTEwgd2ViLWJhc2VkIGFjY2VzcyB0byBkaXJlY3RvcnkuIERlZmF1bHQgZmFsc2UuCgkgKiBAcGFyYW0gYm9vbCAgICRkZW55X2FsbCAgICAgICAgRGVueSBhbGwuCgkgKiBAcGFyYW0gYm9vbCAgICRzdXBwcmVzc19hbGVydCAgU3VwcHJlc3MgYWxlcnQuCgkgKgoJICogQHJldHVybiBib29sICBUcnVlIG9uIHN1Y2Nlc3Mgc2VjdXJpbmcgZGlyZWN0b3J5LCBmYWxzZSBvdGhlcndpc2UuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYW50aV9kaXJlY3RvcnlfYnJvd3NpbmcoICRkaXJlY3RvcnkgPSAnJywgJGRpZV9vbl9mYWlsID0gdHJ1ZSwgJGRlbnlfYWxsID0gZmFsc2UsICRzdXBwcmVzc19hbGVydCA9IGZhbHNlICkgewoKCQkvLyBDaGVjayBkaXJlY3RvcnkgZXhpc3RzICYgY3JlYXRlIGlmIGl0IGRvZXNuJ3QuCgkJaWYgKCAhIGZpbGVfZXhpc3RzKCAkZGlyZWN0b3J5ICkgKSB7CgkJCSRtb2RlICAgID0gYXBwbHlfZmlsdGVycyggJ2l0YnViLWRlZmF1bHQtZmlsZS1tb2RlJywgMDc1NSApOwoJCQkkcmVjdXJzZSA9IHRydWU7CgkJCWlmICggc2VsZjo6JGZpbGVzeXN0ZW0tPm1rZGlyKCAkZGlyZWN0b3J5LCAkbW9kZSwgJHJlY3Vyc2UgKSA9PT0gZmFsc2UgKSB7CgkJCQkkZXJyb3IgPSAnRXJyb3IgIzkwMDI6IEJhY2t1cEJ1ZGR5IHVuYWJsZSB0byBjcmVhdGUgZGlyZWN0b3J5IGAnIC4gJGRpcmVjdG9yeSAuICdgLiBQbGVhc2UgdmVyaWZ5IHdyaXRlIHBlcm1pc3Npb25zIGZvciB0aGUgcGFyZW50IGRpcmVjdG9yeSBgJyAuIGRpcm5hbWUoICRkaXJlY3RvcnkgKSAuICdgIG9yIG1hbnVhbGx5IGNyZWF0ZSB0aGUgc3BlY2lmaWVkIGRpcmVjdG9yeSAmIHNldCBwZXJtaXNzaW9ucy4nOwoJCQkJaWYgKCB0cnVlICE9PSAkc3VwcHJlc3NfYWxlcnQgKSB7CgkJCQkJc2VsZjo6YWxlcnQoICRlcnJvciwgdHJ1ZSwgJzkwMDInICk7CgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGVycm9yICk7CgkJCQl9CgkJCQlpZiAoIHRydWUgPT09ICRkaWVfb25fZmFpbCApIHsKCQkJCQlkaWUoICRlcnJvciApOwoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgkJfQoKCQkvLyBDaGVjayB3cml0YWJsZS4KCQlpZiAoICEgaXNfd3JpdGFibGUoICRkaXJlY3RvcnkgKSApIHsKCQkJJGVycm9yID0gJ0Vycm9yICM5MDAyZDogQmFja3VwQnVkZHkgZGlyZWN0b3J5IGAnIC4gJGRpcmVjdG9yeSAuICdgIGlzIGluZGljYXRlZCBhcyBOT1QgYmVpbmcgd3JpdGFibGUuIFBsZWFzZSB2ZXJpZnkgd3JpdGUgcGVybWlzc2lvbnMgZm9yIGl0IGFuZCBwYXJlbnQgZGlyZWN0b3JpZXMgYXMgYXBwbGljYWJsZS4nOwoJCQlpZiAoIHRydWUgIT09ICRzdXBwcmVzc19hbGVydCApIHsKCQkJCXNlbGY6OmFsZXJ0KCAkZXJyb3IsIHRydWUsICc5MDAyJyApOwoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJGVycm9yICk7CgkJCX0KCQkJaWYgKCB0cnVlID09PSAkZGllX29uX2ZhaWwgKSB7CgkJCQlkaWUoICRlcnJvciApOwoJCQl9CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCS8vIC5odGFjY2VzcyBjb250ZW50cyBmb3IgZGVueWluZy4KCQlpZiAoIHRydWUgPT09ICRkZW55X2FsbCApIHsKCQkJJGRlbnlfYWxsID0gIlxuZGVueSBmcm9tIGFsbCI7CgkJfSBlbHNlIHsKCQkJJGRlbnlfYWxsID0gJyc7CgkJfQoKCQkkZXJyb3IgPSAnJzsKCgkJaWYgKCAhIGZpbGVfZXhpc3RzKCAkZGlyZWN0b3J5IC4gJy9pbmRleC5waHAnICkgKSB7CgkJCS8vIEZJWE1FOiBBdm9pZCBAIHN5bWJvbCBoZXJlLiBQb3NzaWJseSB1c2UgdHJ5L2NhdGNoPwoJCQlpZiAoIGZhbHNlID09PSBAZmlsZV9wdXRfY29udGVudHMoICRkaXJlY3RvcnkgLiAnL2luZGV4LnBocCcsICc8aHRtbD48L2h0bWw+JyApICkgewoJCQkJJGVycm9yIC49ICdVbmFibGUgdG8gd3JpdGUgaW5kZXgucGhwIGZpbGUuICc7CgkJCX0KCQl9CgoJCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSAuICcvaW5kZXguaHRtJyApICkgewoJCQkvLyBGSVhNRTogQXZvaWQgQCBzeW1ib2wgaGVyZS4gUG9zc2libHkgdXNlIHRyeS9jYXRjaD8KCQkJaWYgKCBmYWxzZSA9PT0gQGZpbGVfcHV0X2NvbnRlbnRzKCAkZGlyZWN0b3J5IC4gJy9pbmRleC5odG0nLCAnPGh0bWw+PC9odG1sPicgKSApIHsKCQkJCSRlcnJvciAuPSAnVW5hYmxlIHRvIHdyaXRlIGluZGV4Lmh0bSBmaWxlLiAnOwoJCQl9CgkJfQoKCQlpZiAoICEgZmlsZV9leGlzdHMoICRkaXJlY3RvcnkgLiAnL2luZGV4Lmh0bWwnICkgKSB7CgkJCS8vIEZJWE1FOiBBdm9pZCBAIHN5bWJvbCBoZXJlLiBQb3NzaWJseSB1c2UgdHJ5L2NhdGNoPwoJCQlpZiAoIGZhbHNlID09PSBAZmlsZV9wdXRfY29udGVudHMoICRkaXJlY3RvcnkgLiAnL2luZGV4Lmh0bWwnLCAnPGh0bWw+PC9odG1sPicgKSApIHsKCQkJCSRlcnJvciAuPSAnVW5hYmxlIHRvIHdyaXRlIGluZGV4Lmh0bWwgZmlsZS4gJzsKCQkJfQoJCX0KCgkJLy8gLmh0YWNjZXNzIGlmIHdlIGFyZW4ndCBpbiB0aGUgaW1wb3J0YnVkZHkgc2NyaXB0LgoJCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSAuICcvLmh0YWNjZXNzJyApICkgewoJCQkvLyBGSVhNRTogQXZvaWQgQCBzeW1ib2wgaGVyZS4gUG9zc2libHkgdXNlIHRyeS9jYXRjaD8KCQkJaWYgKCBmYWxzZSA9PT0gQGZpbGVfcHV0X2NvbnRlbnRzKCAkZGlyZWN0b3J5IC4gJy8uaHRhY2Nlc3MnLCAnT3B0aW9ucyAtSW5kZXhlcycgLiAkZGVueV9hbGwgKSApIHsKCQkJCSRlcnJvciAuPSAnVW5hYmxlIHRvIHdyaXRlIC5odGFjY2VzcyBmaWxlLiAnOwoJCQl9CgkJfQoKCQlpZiAoICcnICE9ICRlcnJvciApIHsgLy8gRmFpbHVyZS4KCQkJaWYgKCB0cnVlICE9PSAkc3VwcHJlc3NfYWxlcnQgKSB7CgkJCQkkZXJyb3IgPSAnRXJyb3IgY3JlYXRpbmcgYW50aSBkaXJlY3RvcnkgYnJvd3Npbmcgc2VjdXJpdHkgZmlsZXMgaW4gZGlyZWN0b3J5IGAnIC4gJGRpcmVjdG9yeSAuICdgLiBQbGVhc2UgdmVyaWZ5IHRoaXMgZGlyZWN0b3J5XCdzIHBlcm1pc3Npb25zIGFsbG93IHdyaXRpbmcgJiByZWFkaW5nLiBFcnJvcnM6IGAnIC4gJGVycm9yIC4gJ2AuJzsKCQkJCXNlbGY6OmFsZXJ0KCAkZXJyb3IgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOwoJCQl9CgkJCWlmICggdHJ1ZSA9PT0gJGRpZV9vbl9mYWlsICkgewoJCQkJZGllKCAnU2NyaXB0IGhhbHRlZCBmb3Igc2VjdXJpdHkuIFBsZWFzZSB2ZXJpZnkgcGVybWlzc2lvbnMgYW5kIHRyeSBhZ2Fpbi4nICk7CgkJCX0KCQl9IGVsc2UgeyAvLyBTdWNjZXNzLgoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9IC8vIEVuZCBhbnRpX2RpcmVjdG9yeV9icm93c2luZygpLgoKCS8qKgoJICogRGVmaW5lIGEgZGVmYXVsdCBzZXJpYWwgZm9yIGFsbCBzdWJzZXF1ZW50IHN0YXR1cygpIGNhbGxzLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNlcmlhbCAgVW5pcXVlIGlkZW50aWZpZXIgdG8gdXNlIGFzIGRlZmF1bHQgc2VyaWFsLgoJICoKCSAqIEByZXR1cm4gbnVsbAoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHNldF9zdGF0dXNfc2VyaWFsKCAkc2VyaWFsICkgewoJCXNlbGY6OiRfc3RhdHVzX3NlcmlhbCA9ICRzZXJpYWw7CgkJcmV0dXJuOwoJfSAvLyBFbmQgc2V0X3N0YXR1c19zZXJpYWwoKS4KCgkvKioKCSAqIEFkZCBhIHNlcmlhbCBmb3IgYWxsIHN1YnNlcXVlbnQgc3RhdHVzKCkgY2FsbHMgdG8gbG9nIHRvIGluIGFkZGl0aW9uIHRvIGFueSBjdXJyZW50bHkgbG9nZ2luZyBzZXJpYWxzLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNlcmlhbCAgVW5pcXVlIGlkZW50aWZpZXIgdG8gYWRkIHRvIHNlcmlhbHMgdG8gbG9nIHRvLgoJICoKCSAqIHJldHVybiBudWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX3N0YXR1c19zZXJpYWwoICRzZXJpYWwgKSB7CgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnQWRkaW5nIHN0YXR1cyBzZXJpYWwgYCcgLiAkc2VyaWFsIC4gJ2AuJyApOwoJCWlmICggaXNfYXJyYXkoIHNlbGY6OiRfc3RhdHVzX3NlcmlhbCApICkgewoJCQlzZWxmOjokX3N0YXR1c19zZXJpYWxbXSA9ICRzZXJpYWw7CgkJfSBlbHNlIHsKCQkJc2VsZjo6JF9zdGF0dXNfc2VyaWFsID0gYXJyYXkoIHNlbGY6OiRfc3RhdHVzX3NlcmlhbCwgJHNlcmlhbCApOwoJCX0KCQlyZXR1cm47Cgl9IC8vIEVuZCBhZGRfc3RhdHVzX3NlcmlhbCgpLgoKCS8qKgoJICogUmVtb3ZlIGEgc2VyaWFsIGZvciBhbGwgc3Vic2VxdWVudCBzdGF0dXMoKSBjYWxscyB0byBsb2cgdG8gaW4gYWRkaXRpb24gdG8gYW55IGN1cnJlbnRseSBsb2dnaW5nIHNlcmlhbHMuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkc2VyaWFsICBVbmlxdWUgaWRlbnRpZmllciB0byByZW1vdmUgZnJvbSBzZXJpYWxzIHRvIGxvZyB0by4KCSAqCgkgKiBAcmV0dXJuIG51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZW1vdmVfc3RhdHVzX3NlcmlhbCggJHNlcmlhbCApIHsKCQlpZiAoIGlzX2FycmF5KCBzZWxmOjokX3N0YXR1c19zZXJpYWwgKSApIHsKCQkJZm9yZWFjaCAoIHNlbGY6OiRfc3RhdHVzX3NlcmlhbCBhcyAkaSA9PiAkdGhpc19zZXJpYWwgKSB7CgkJCQlpZiAoICR0aGlzX3NlcmlhbCA9PSAkc2VyaWFsICkgewoJCQkJCXVuc2V0KCBzZWxmOjokX3N0YXR1c19zZXJpYWxbICRpIF0gKTsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCX0KCQl9IGVsc2UgeyAvLyBzaG91bGQgYmUgYSBzdHJpbmcuCgkJCWlmICggc2VsZjo6JF9zdGF0dXNfc2VyaWFsID09ICRzZXJpYWwgKSB7CgkJCQlzZWxmOjokX3N0YXR1c19zZXJpYWwgPSAnJzsKCQkJfQoJCX0KCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnUmVtb3ZlZCBzdGF0dXMgc2VyaWFsIGAnIC4gJHNlcmlhbCAuICdgLicgKTsKCgkJcmV0dXJuOwoJfSAvLyBFbmQgcmVtb3ZlX3N0YXR1c19zZXJpYWwoKS4KCgkvKioKCSAqIEdldCBjdXJyZW50IHNlcmlhbCBzdGF0dXMgbG9ncyBhcmUgZ29pbmcgdG8uCgkgKgoJICogQHJldHVybiBzdHJpbmcgJHN0YXR1c19zZXJpYWwgIEN1cnJlbnQgc2VyaWFsIHNldC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfc3RhdHVzX3NlcmlhbCgpIHsKCQlyZXR1cm4gc2VsZjo6JF9zdGF0dXNfc2VyaWFsOwoJfSAvLyBFbmQgZ2V0X3N0YXR1c19zZXJpYWwoKS4KCgkvKioKCSAqIExvZ3MgZGF0YSB0byBhIENTViBmaWxlLiBPcHRpb25hbCB1bmlxdWUgc2VyaWFsIGlkZW50aWZpZXIuCgkgKiBJZiBhIHNlcmlhbCBpcyBwYXNzZWQgdGhlbiBFVkVSWVRISU5HIHdpbGwgYmUgbG9nZ2VkIHRvIHRoZSBzcGVjaWZpZWQgc2VyaWFsIGZpbGUgaW4gYWRkaXRpb24gdG8gd2hhdGV2ZXIgKGlmIGFueXRoaW5nKSBpcyBsb2dnZWQgdG8gbWFpbiBzdGF0dXMgZmlsZS4KCSAqIEFsd2F5cyBsb2dzIHRvIG1haW4gc3RhdHVzIGZpbGUgYmFzZWQgb24gbG9nZ2luZyBzZXR0aW5ncyB3aGV0aGVyIHNlcmlhbCBpcyBwYXNzZWQgb3Igbm90LgoJICoKCSAqIE5PVEU6IFdoZW4gZnVsbCBsb2dnaW5nIGlzIG9uIEFORCBhIHNlcmlhbCBpcyBwYXNzZWQsIGl0IHdpbGwgYmUgd3JpdHRlbiB0byBhIF9zdW1fIHRleHQgZmlsZSBpbnN0ZWFkIG9mIHRoZSBtYWluIGxvZyBmaWxlLgoJICoKCSAqIEBzZWUgc2VsZjo6Z2V0X3N0YXR1cygpLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHR5cGUgICAgICAgICAgICBWYWxpZCB0eXBlczogZXJyb3IsIHdhcm5pbmcsIGRldGFpbHMsIG1lc3NhZ2UuCgkgKiBAcGFyYW0gc3RyaW5nICRtZXNzYWdlICAgICAgICAgTWVzc2FnZSB0byBsb2cuCgkgKiBAcGFyYW0gc3RyaW5nICRzZXJpYWxzICAgICAgICAgT3B0aW9uYWwuIE9wdGlvbmFsIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIHBsdWdpbidzIG1lc3NhZ2UuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzIG1lc3NhZ2VzIGFyZSB1bmlxdWUgcGVyIHBsdWdpbiBzbyB0aGlzIGFkZHMgYW4gYWRkaXRpb25hbCB1bmlxdWUgbGF5ZXIgZm9yIHJldHJpZXZhbC4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzZWxmOjokX3N0YXR1c19zZXJpYWwgaGFzIGJlZW4gc2V0IGJ5IHNldF9zdGF0dXNfc2VyaWFsKCkgdGhlbiBpdCB3aWxsIG92ZXJyaWRlIGlmICRzZXJpYWwgaXMgYmxhbmsuCgkgKiBAcGFyYW0gYm9vbCAgICRqc19tb2RlICAgICAgICAgSWYgSlMgbW9kZS4KCSAqIEBwYXJhbSBib29sICAgJGVjaG9fbm90X3dyaXRlICBFY2hvIG91dHB1dCBpbnN0ZWFkIG9mIHdyaXRlIHRvIGZpbGUuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc3RhdHVzKCAkdHlwZSwgJG1lc3NhZ2UsICRzZXJpYWxzID0gJycsICRqc19tb2RlID0gZmFsc2UsICRlY2hvX25vdF93cml0ZSA9IGZhbHNlICkgewoKCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnYmFja3VwYnVkZHlfY29yZScgKSApIHsKCQkJcmVxdWlyZV9vbmNlIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL2NvcmUucGhwJzsKCQl9CgoJCWlmICggISBpc3NldCggc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddICkgKSB7IC8vIElmIHNldHRpbmdzIGFyZSBjb3JydXB0ZWQgZGVmYXVsdCB0byBubyBsb2dnaW5nLgoJCQlzZWxmOjokb3B0aW9uc1snbG9nX2xldmVsJ10gPSAwOwoJCX0KCgkJaWYgKCAnJyAhPSBzZWxmOjokX3N0YXR1c19zZXJpYWwgJiYgJycgPT0gJHNlcmlhbHMgKSB7CgkJCSRzZXJpYWxzID0gc2VsZjo6JF9zdGF0dXNfc2VyaWFsOwoJCX0KCgkJaWYgKCBkZWZpbmVkKCAnQkFDS1VQQlVERFlfV1BfQ0xJJyApICYmIHRydWUgPT09IEJBQ0tVUEJVRERZX1dQX0NMSSApIHsKCQkJaWYgKCBjbGFzc19leGlzdHMoICdXUF9DTEknICkgKSB7CgkJCQlXUF9DTEk6OmxpbmUoICR0eXBlIC4gJyAtICcgLiAkbWVzc2FnZSApOwoJCQl9CgkJfQoKCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHVuaXF1ZSBsb2cgc2VyaWFsIGZvciBhbGwgbG9ncyBmb3Igc2VjdXJpdHkuCgkJaWYgKCAhIGlzc2V0KCBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddICkgfHwgJycgPT0gc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSApIHsKCQkJc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSA9IHNlbGY6OnJhbmRvbV9zdHJpbmcoIDE1ICk7CgkJCXNlbGY6OnNhdmUoKTsKCQl9CgoJCWlmICggISBpc19hcnJheSggJHNlcmlhbHMgKSApIHsKCQkJJHNlcmlhbHMgPSBhcnJheSggJHNlcmlhbHMgKTsKCQl9CgoJCS8vIENhbGN1bGF0ZSBsb2cgZGlyZWN0b3J5LgoJCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7IC8vIEFsc28gaGFuZGxlcyB3aGVuIHdpdGhpbiBpbXBvcnRidWRkeS4KCgkJLy8gUHJlcGFyZSBkaXJlY3RvcnkgZm9yIGxvZyBmaWxlcy4gUmV0dXJuIGlmIHVuYWJsZSB0byBkbyBzby4KCQlpZiAoIHRydWUgPT09IHNlbGY6OiRfc2tpcGxvZyApIHsgLy8gYm9vbCB0cnVlIHNvIHNraXAuCgkJCXJldHVybjsKCQl9IGVsc2VpZiAoIGZhbHNlICE9PSBzZWxmOjokX3NraXBsb2cgKSB7IC8vIHNvbWV0aGluZyBvdGhlciB0aGFuIGJvb2wgZmFsc2Ugc28gY2hlY2sgZGlyZWN0b3J5IGJlZm9yZSBwcm9jZWVkaW5nLgoJCQkkZGllX29uX2ZhaWwgICAgPSBmYWxzZTsKCQkJJGRlbnlfYWxsICAgICAgID0gZmFsc2U7CgkJCSRzdXBwcmVzc19hbGVydCA9IHRydWU7CgkJCWlmICggdHJ1ZSAhPT0gc2VsZjo6YW50aV9kaXJlY3RvcnlfYnJvd3NpbmcoICRsb2dfZGlyZWN0b3J5LCAkZGllX29uX2ZhaWwsICRkZW55X2FsbCwgJHN1cHByZXNzX2FsZXJ0ICkgKSB7IC8vIFVuYWJsZSB0byBzZWN1cmUgZGlyZWN0b3J5LiBGYWlsLgoJCQkJc2VsZjo6JF9za2lwbG9nID0gdHJ1ZTsKCQkJCXJldHVybjsKCQkJfSBlbHNlIHsKCQkJCXNlbGY6OiRfc2tpcGxvZyA9IGZhbHNlOwoJCQl9CgkJfQoKCQlmb3JlYWNoICggJHNlcmlhbHMgYXMgJHNlcmlhbCApIHsKCgkJCS8vIEltcG9ydEJ1ZGR5IGFsd2F5cyB3cml0ZSB0byBtYWluIHN0YXR1cyBsb2cuCgkJCWlmICggZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICYmICggUEJfSU1QT1JUQlVERFkgPT09IHRydWUgKSApIHsgLy8gSU1QT1JUQlVERFkuCgoJCQkJJHdyaXRlX3NlcmlhbCA9IGZhbHNlOwoJCQkJJHdyaXRlX21haW4gICA9IHRydWU7CgkJCQkkbWFpbl9maWxlICAgID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoKCQkJfSBlbHNlIHsgLy8gU1RBTkRBTE9ORS4KCgkJCQkvLyBEZXRlcm1pbmUgd2hldGhlciB3cml0aW5nIHRvIG1haW4gZXh0cmFuZW91cyBsb2cgZmlsZS4KCQkJCSR3cml0ZV9tYWluID0gZmFsc2U7CgkJCQlpZiAoIDAgPT0gc2VsZjo6JG9wdGlvbnNbJ2xvZ19sZXZlbCddICkgeyAvLyBObyBsb2dnaW5nLgoJCQkJCQkkd3JpdGVfbWFpbiA9IGZhbHNlOwoJCQkJfSBlbHNlaWYgKCAxID09IHNlbGY6OiRvcHRpb25zWydsb2dfbGV2ZWwnXSApIHsgLy8gRXJyb3JzIG9ubHkuCgkJCQkJaWYgKCAnZXJyb3InID09PSAkdHlwZSApIHsKCQkJCQkJJHdyaXRlX21haW4gPSB0cnVlOwoJCQkJCQlzZWxmOjpsb2coICdbJyAuICRzZXJpYWwgLiAnXSAnIC4gJG1lc3NhZ2UsICdlcnJvcicgKTsKCQkJCQl9CgkJCQl9IGVsc2UgeyAvLyBFdmVyeXRoaW5nIGVsc2UuCgkJCQkJJHdyaXRlX21haW4gPSB0cnVlOwoJCQkJCXNlbGY6OmxvZyggJ1snIC4gJHNlcmlhbCAuICddICcgLiAkbWVzc2FnZSwgJHR5cGUgKTsKCQkJCX0KCgkJCQkvLyBEZXRlcm1pbmUgd2hpY2ggbm9ybWFsIHN0YXR1cyBsb2cgZmlsZXMgdG8gd3JpdGUuCgkJCQlpZiAoICcnICE9ICRzZXJpYWwgKSB7CgkJCQkJJHdyaXRlX3NlcmlhbCA9IHRydWU7CgkJCQkJJHdyaXRlX21haW4gICA9IGZhbHNlOwoJCQkJCWlmICggKCBmYWxzZSA9PT0gc3RyaXN0ciggJHNlcmlhbCwgJ3JlbW90ZV9zZW5kLScgKSApICYmICggZmFsc2UgPT09IHN0cmlzdHIoICRzZXJpYWwsICdsaXZlX3BlcmlvZGljJyApICkgKSB7IC8vIE9ubHkgd3JpdGUgc3VtIGZpbGUgaWYgTk9UIGEgcmVtb3RlIHNlbmQgYW5kIE5PVCBMaXZlIGxvZy4KCQkJCQkJJHdyaXRlX21haW4gPSB0cnVlOwoJCQkJCQkkbWFpbl9maWxlICA9ICRsb2dfZGlyZWN0b3J5IC4gJ3N0YXR1cy0nIC4gJHNlcmlhbCAuICdfc3VtXycgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJJHdyaXRlX3NlcmlhbCA9IGZhbHNlOwoJCQkJCSR3cml0ZV9tYWluICAgPSBmYWxzZTsKCQkJCX0KCQkJfQoKCQkJaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ3dyaXRlX3N0YXR1c19saW5lJyApICkgewoJCQkJLyoqCgkJCQkgKiBGdW5jdGlvbiBmb3Igd3JpdGluZyBhY3R1YWwgbG9nIENTViBkYXRhLiBVc2VkIGxhdGVyLgoJCQkJICoKCQkJCSAqIEBwYXJhbSBzdHJpbmcgJGZpbGUgICAgICAgICAgIEZpbGUgdG8gd3JpdGUuCgkJCQkgKiBAcGFyYW0gYXJyYXkgICRjb250ZW50X2FycmF5ICBBcnJheSBvZiBjb250ZW50IHRvIHdyaXRlLgoJCQkJICogQHBhcmFtIGJvb2wgICAkZWNobyAgICAgICAgICAgRWNobyBpbnN0ZWFkIG9mIHdyaXRlLgoJCQkJICovCgkJCQlmdW5jdGlvbiB3cml0ZV9zdGF0dXNfbGluZSggJGZpbGUsICRjb250ZW50X2FycmF5LCAkZWNobyApIHsKCQkJCQkkd3JpdGVfZGF0YSA9IGpzb25fZW5jb2RlKCAkY29udGVudF9hcnJheSApIC4gUEhQX0VPTDsKCQkJCQlpZiAoIHRydWUgPT09ICRlY2hvICkgeyAvLyBFY2hvIGRhdGEgaW5zdGVhZCBvZiB3cml0aW5nIHRvIGZpbGUuIFVzZWQgYnkgYWpheCB3aGVuIGNoZWNraW5nIHN0YXR1cyBsb2cgYW5kIG5lZWRpbmcgdG8gcHJlcGVuZCBiZWZvcmUgbG9nLgoJCQkJCQllY2hvICR3cml0ZV9kYXRhOwoJCQkJCX0gZWxzZSB7CgkJCQkJCS8vIEZJWE1FOiBBdm9pZCBAIHN5bWJvbCBoZXJlLgoJCQkJCQkkZmlsZV9oYW5kbGUgPSBAZm9wZW4oICRmaWxlLCAnYScgKTsKCQkJCQkJaWYgKCBmYWxzZSAhPT0gJGZpbGVfaGFuZGxlICkgeyAvLyBBcHBlbmQgbW9kZS4KCQkJCQkJCS8vIEZJWE1FOiBBdm9pZCBAIHN5bWJvbCBoZXJlLgoJCQkJCQkJQGZ3cml0ZSggJGZpbGVfaGFuZGxlLCAkd3JpdGVfZGF0YSApOwoJCQkJCQkJLy8gRklYTUU6IEF2b2lkIEAgc3ltYm9sIGhlcmUuCgkJCQkJCQlAZmNsb3NlKCAkZmlsZV9oYW5kbGUgKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoKCQkJJGNvbnRlbnRfYXJyYXkgPSBhcnJheSgKCQkJCSdldmVudCcgPT4gJHR5cGUsCgkJCQkndGltZScgID0+IHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5sb2NhbGl6ZV90aW1lKCB0aW1lKCkgKSwgLy8gVGltZSB0aGlzIGhhcHBlbmVkLgoJCQkJJ3UnICAgICA9PiBzdWJzdHIoIChzdHJpbmcpIG1pY3JvdGltZSgpLCAyLCAyICksCgkJCQkncnVuJyAgID0+IHNwcmludGYoICclMDEuMmYnLCByb3VuZCggbWljcm90aW1lKCB0cnVlICkgLSBzZWxmOjokc3RhcnRfdGltZSwgMiApICksIC8vIEVsYXBzZWQgUEhQIHRpbWUuCgkJCQknbWVtJyAgID0+IHNwcmludGYoICclMDEuMmYnLCByb3VuZCggbWVtb3J5X2dldF91c2FnZSgpIC8gMTA0ODU3NiwgMiApICksIC8vIE1lbW9yeSB1c2VkLglQcmUtNy4wIHdhczogbWVtb3J5X2dldF9wZWFrX3VzYWdlKCkuCgkJCQknZGF0YScgID0+IHN0cl9yZXBsYWNlKCBjaHIoIDkgKSwgJyAgICcsICRtZXNzYWdlICksIC8vIEJvZHkgb2YgdGhlIG1lc3NhZ2UuCgkJCSk7CgoJCQkvKioqKioqKioqKiBNQUlOIExPRyBGSUxFIG9yIFNVTSBGSUxFICovCgkJCWlmICggdHJ1ZSA9PT0gJHdyaXRlX21haW4gKSB7IC8vIFdSSVRFIFRPIE1BSU4gTE9HIEZJTEUgb3IgU1VNIEZJTEUuCgkJCQl3cml0ZV9zdGF0dXNfbGluZSggJG1haW5fZmlsZSwgJGNvbnRlbnRfYXJyYXksICRlY2hvX25vdF93cml0ZSApOwoJCQl9CgoJCQkvKioqKioqKioqKiBTRVJJQUwgTE9HIEZJTEUgKi8KCQkJaWYgKCB0cnVlID09PSAkd3JpdGVfc2VyaWFsICkgewoJCQkJJHNlcmlhbF9maWxlID0gJGxvZ19kaXJlY3RvcnkgLiAnc3RhdHVzLScgLiAkc2VyaWFsIC4gJ18nIC4gc2VsZjo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSAuICcudHh0JzsKCQkJCXdyaXRlX3N0YXR1c19saW5lKCAkc2VyaWFsX2ZpbGUsICRjb250ZW50X2FycmF5LCAkZWNob19ub3Rfd3JpdGUgKTsKCQkJfQoKCQkJLy8gT3V0cHV0IGltcG9ydGJ1ZGR5IHN0YXR1cyBsb2cgdG8gc2NyZWVuLgoJCQlnbG9iYWwgJHBiX2JhY2t1cGJ1ZGR5X2pzX3N0YXR1czsKCQkJaWYgKCAoIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSB8fCAoIGlzc2V0KCAkcGJfYmFja3VwYnVkZHlfanNfc3RhdHVzICkgJiYgdHJ1ZSA9PT0gJHBiX2JhY2t1cGJ1ZGR5X2pzX3N0YXR1cyApICkgJiYgKCAndHJ1ZScgIT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSApIHsgLy8gSWYgaW1wb3J0YnVkZHksIGpzIG1vZGUsIGFuZCBub3QgYSBkZXBsb3ltZW50LgoJCQkJZWNobyAnPHNjcmlwdD5wYl9zdGF0dXNfYXBwZW5kKCAnIC4ganNvbl9lbmNvZGUoICRjb250ZW50X2FycmF5ICkgLiAnICk7PC9zY3JpcHQ+JyAuICJcbiI7CgkJCQlwYl9iYWNrdXBidWRkeTo6Zmx1c2goKTsKCQkJfQoJCX0gLy8gZW5kIGZvcmVhY2ggJHNlcmlhbHMuCgoJfSAvLyBFbmQgc3RhdHVzKCkuCgoJLyoqCgkgKiBHZXRzIGFsbCBzdGF0dXMgaW5mb3JtYXRpb24gbG9nZ2VkIHZpYSBzdGF0dXMoKS4gUmV0dXJucyBhbiBhcnJheSBvZiBhcnJheXMgd2l0aCBsb2dnZWQgZGF0YS4KCSAqCgkgKiAgUmV0dXJuIGZvcm1hdDoKCSAqICAgICBhcnJheSgKCSAqICAgICAgICAgYXJyYXkoIFRJTUVTVEFNUCwgVElNRV9JTiwgUEVBS19NRU1PUlksIFRZUEUsIE1FU1NBR0UgKSwKCSAqICAgICAgICAgYXJyYXkoIFRJTUVTVEFNUCwgVFlQRSwgTUVTU0FHRSApLAoJICogICAgICkKCSAqCgkgKiBAc2VlIHNlbGY6OnN0YXR1cygpLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHNlcmlhbCAgICAgICAgICAgICAgVW5pcXVlIGlkZW50aWZpZXIuIFJldHJpZXZlcyBhIHN1YnNldCBvZiBsb2dnZWQgaW5mb3JtYXRpb24gYmFzZWQgb24gdGhpcyB1bmlxdWUgSUQgdGhhdCB3YXMgcGFzc2VkIHRvIHN0YXR1cygpIHdoZW4gbG9nZ2luZy4KCSAqIEBwYXJhbSBib29sICAgJGNsZWFyX3JldHJpZXZlZCAgICAgIERlZmF1bHQ6IHRydWUuIE9uIHRydWUgc3RhdHVzIGluZm9ybWF0aW9uIHdpbGwgYmUgcHVyZ2VkIGFmdGVyIHJldHJpZXZhbC4KCSAqIEBwYXJhbSBib29sICAgJGVyYXNlX3JldHJpZXZlZCAgICAgIERlZmF1bHQ6IHRydWUuIFdoZXRoZXIgb3Igbm90IHRvIGRlbGV0ZSBsb2cgZmlsZSBvbiByZXRyaWV2YWwuIE5PVEU6IFBDTFppcCBjYW4gTk9UIGxvc2UgZmlsZXMgbWlkLWJhY2t1cCBzbyBsb2cgZmlsZXMgY2Fubm90IGRlbGV0ZSBtaWQtemlwLgoJICogQHBhcmFtIGJvb2wgICAkaGlkZV9nZXR0aW5nX3N0YXR1cyAgRGVmYXVsdDogZmFsc2UuIFdoZXRoZXIgb3Igbm90IHRvIG91dHB1dCBzdGF0dXMgcmV0cmlldmFsIG1lc3NhZ2UuCgkgKiBAcGFyYW0gYm9vbCAgICRjb3B5X3JldHJpZXZlZCAgICAgICBBcnJheSBvZiBhcnJheXMuICBFYWNoIHN1Yi1hcnJheSBjb250YWlucyB0aHJlZSB2YWx1ZXM6IHRpbWVzdGFtcCwgdHlwZSBvZiBtZXNzYWdlLCBhbmQgdGhlIG1lc3NhZ2UgaXRzZWxmLiBTZWUgZnVuY3Rpb24gZGVzY3JpcHRpb24gZm9yIGRldGFpbHMuIEVtcHR5IGFycmF5IGlmIG5vbi1leGlzdGluZyBsb2cuCgkgKgoJICogQHJldHVybiBhcnJheSAkc3RhdHVzX2xpbmVzICBPciBOdWxsIGlmIHN0YXR1cyBmaWxlIGlzbid0IHdyaXRlYWJsZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfc3RhdHVzKCAkc2VyaWFsID0gJycsICRjbGVhcl9yZXRyaWV2ZWQgPSB0cnVlLCAkZXJhc2VfcmV0cmlldmVkID0gdHJ1ZSwgJGhpZGVfZ2V0dGluZ19zdGF0dXMgPSBmYWxzZSwgJGNvcHlfcmV0cmlldmVkID0gZmFsc2UgKSB7CgkJLy8gQ2FsY3VsYXRlIGxvZyBkaXJlY3RvcnkuCgkJJGxvZ19kaXJlY3RvcnkgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKTsgLy8gQWxzbyBoYW5kbGVzIHdoZW4gaW1wb3J0YnVkZHkuCgoJCSRzdGF0dXNfZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ3N0YXR1cy0nOwoJCWlmICggJycgIT0gJHNlcmlhbCApIHsKCQkJJHN0YXR1c19maWxlIC49ICRzZXJpYWwgLiAnXyc7CgkJfQoJCSRzdGF0dXNfZmlsZSAuPSBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOwoKCQlpZiAoICEgZmlsZV9leGlzdHMoICRzdGF0dXNfZmlsZSApICkgewoJCQlyZXR1cm4gYXJyYXkoKTsgLy8gTm8gbG9nLgoJCX0KCgkJaWYgKCBmYWxzZSA9PT0gJGhpZGVfZ2V0dGluZ19zdGF0dXMgKSB7CgkJCXNlbGY6OnN0YXR1cyggJ2RldGFpbHMnLCAnR2V0dGluZyBzdGF0dXMgZm9yIHNlcmlhbCBgJyAuICRzZXJpYWwgLiAnYC4gQ2xlYXI6IGAnIC4gKCAkY2xlYXJfcmV0cmlldmVkID8gJ3RydWUnIDogJ2ZhbHNlJyApIC4gJ2AnLCAkc2VyaWFsICk7CgkJfQoKCQkvLyBGSVhNRTogQXZvaWQgQCBzeW1ib2wgaGVyZS4KCQkkZmggPSBAZm9wZW4oICRzdGF0dXNfZmlsZSwgJ3InICk7CgkJaWYgKCBmYWxzZSAhPT0gJGZoICkgeyAvLyBSZWFkIHdyaXRlIG1vZGUuCgkJCSRzdGF0dXNfbGluZXMgPSBhcnJheSgpOwoJCQl3aGlsZSAoIGZhbHNlICE9PSAoICRzdGF0dXNfbGluZSA9IGZnZXRzKCAkZmggKSApICkgewoJCQkJJHN0YXR1c19saW5lc1tdID0gJHN0YXR1c19saW5lOwoJCQl9CgkJCWZjbG9zZSggJGZoICk7CgoJCQlpZiAoIHRydWUgPT09ICRjbGVhcl9yZXRyaWV2ZWQgKSB7CgkJCQlmaWxlX3B1dF9jb250ZW50cyggJHN0YXR1c19maWxlLCAnJyApOwoJCQl9CgoJCQlpZiAoIHRydWUgPT09ICRlcmFzZV9yZXRyaWV2ZWQgKSB7CgkJCQkvLyBGSVhNRTogQXZvaWQgQCBzeW1ib2wgaGVyZS4gVHJ5L0NhdGNoIGVycm9ycyBvbiB0aGlzPyBzdXBwcmVzcz8KCQkJCUB1bmxpbmsoICRzdGF0dXNfZmlsZSApOwoJCQl9CgoJCQlpZiAoIGZhbHNlICE9PSAkY29weV9yZXRyaWV2ZWQgKSB7CgkJCQlAZmlsZV9wdXRfY29udGVudHMoICRjb3B5X3JldHJpZXZlZCwgJHN0YXR1c19saW5lcywgRklMRV9BUFBFTkQgKTsKCQkJfQoKCQkJcmV0dXJuICRzdGF0dXNfbGluZXM7CgkJfSBlbHNlIHsKCQkJLy8gVE9ETzogTG9nIGFuIGVycm9yIGhlcmU/CgkJCS8vIHNlbGY6OmFsZXJ0KCAnVW5hYmxlIHRvIG9wZW4gZmlsZSBoYW5kbGVyIGZvciBzdGF0dXMgZmlsZSBgJyAuICRzdGF0dXNfZmlsZSAuICdgLiBVbmFibGUgdG8gd3JpdGUgc3RhdHVzIGxvZy4nICk7CgkJfQoJfSAvLyBFbmQgZ2V0X3N0YXR1cygpLgoKCS8qKgoJICogRGlzcGxheXMgYSB0ZXh0YXJlYSBmb3IgcGxhY2luZyBzdGF0dXMgdGV4dCBpbnRvLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGRlZmF1bHRfdGV4dCAgRmlyc3QgbGluZSBvZiB0ZXh0IHRvIGRpc3BsYXkuCgkgKiBAcGFyYW0gYm9vbCAgICRoaWRkZW4gICAgICAgICAgV2hldGhlciBvciBub3QgdG8gYXBwbHkgZGlzcGxheTogbm9uZTsgQ1NTLgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICBIVE1MIGZvciB0ZXh0YXJlYS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzdGF0dXNfYm94KCAkZGVmYXVsdF90ZXh0ID0gJycsICRoaWRkZW4gPSBmYWxzZSApIHsKCQlkZWZpbmUoICdQQl9TVEFUVVMnLCB0cnVlICk7IC8vIFRlbGxzIGZyYW1ld29yayBzdGF0dXMoKSBmdW5jdGlvbiB0byBvdXRwdXQgZnV0dXJlIGxvZ2dpbmcgaW5mbyBpbnRvIHN0YXR1cyBib3ggdmlhIGphdmFzY3JpcHQuCgkJJHJldHVybiA9ICc8dGV4dGFyZWEgcmVhZG9ubHk9InJlYWRvbmx5IiBpZD0icGJfYmFja3VwYnVkZHlfc3RhdHVzIiB3cmFwPSJvZmYiJzsKCQlpZiAoIHRydWUgPT09ICRoaWRkZW4gKSB7CgkJCSRyZXR1cm4gLj0gJyBzdHlsZT0iZGlzcGxheTogbm9uZTsgIic7CgkJfQoJCSRyZXR1cm4gLj0gJz4nIC4gJGRlZmF1bHRfdGV4dCAuICc8L3RleHRhcmVhPic7CgoJCXJldHVybiAkcmV0dXJuOwoJfSAvLyBFbmQgc3RhdHVzX2JveCgpLgoKCS8qKgoJICogU2V0cyBncmVlZHkgc2NyaXB0IGxpbWl0cyB0byBoZWxwIHByZXZlbnQgdGltZW91dHMsIHJ1bm5pbmcgb3V0IG9mIG1lbW9yeSwgZXRjLgoJICoKCSAqIEBwYXJhbSBib29sICRzdXByZXNzX3N0YXR1cyAgRG8gbm90IHNldCBzdGF0dXMgbWVzc2FnZS4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzZXRfZ3JlZWR5X3NjcmlwdF9saW1pdHMoICRzdXByZXNzX3N0YXR1cyA9IGZhbHNlICkgewoKCQkkcmVxdWVzdGVkX3NvY2tldF90aW1lb3V0ID0gNjAgKiA2MCAqIDI7CgkJJHJlcXVlc3RlZF9leGVjdXRpb25fdGltZSA9IDYwICogNjAgKiAyOwoKCQkvLyBEb24ndCBhYm9ydCBzY3JpcHQgaWYgdGhlIGNsaWVudCBjb25uZWN0aW9uIGlzIGxvc3QvY2xvc2VkCgkJQGlnbm9yZV91c2VyX2Fib3J0KCB0cnVlICk7CgoJCS8vIFNldCBzb2NrZXQgdGltZW91dCB0byByZXF1ZXN0ZWQgcGVyaW9kLgoJCUBpbmlfc2V0KCAnZGVmYXVsdF9zb2NrZXRfdGltZW91dCcsICRyZXF1ZXN0ZWRfc29ja2V0X3RpbWVvdXQgKTsKCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnQ2hlY2tpbmcgbWF4IFBIUCBleGVjdXRpb24gdGltZSBzZXR0aW5ncy4nICk7CgkJLy8gU2V0IG1heGltdW0gZXhlY3V0aW9uIHRpbWUgdG8gcmVxdWVzdGVkIHBlcmlvZCBpZiBub3QgYWxyZWFkeSBiZXR0ZXIgdGhhbiB0aGF0CgkJLy8gU2VlIGlmIHdlIGNhbiBnZXQgYSBjdXJyZW50IHZhbHVlIChvZiBhbnkgc29ydCkKCQkkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgPSBAaW5pX2dldCggJ21heF9leGVjdXRpb25fdGltZScgKTsKCQlpZiAoIGZhbHNlID09PSAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgKSB7CgkJCSRvcmlnaW5hbF9leGVjdXRpb25fdGltZSA9ICdVbmtub3duJzsKCQl9CgoJCS8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdHJ5IGFuZCBzZXQvaW5jcmVhc2UuCgkJaWYgKCBpc19udW1lcmljKCAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgKSAmJiAoICggMCA9PSAkb3JpZ2luYWxfZXhlY3V0aW9uX3RpbWUgKSB8fCAoICRyZXF1ZXN0ZWRfZXhlY3V0aW9uX3RpbWUgPD0gJG9yaWdpbmFsX2V4ZWN1dGlvbl90aW1lICkgKSApIHsKCQkJLy8gVGhlcmUgaXMgbm8gbmVlZCB0byBjaGFuZ2UgbWF4X2V4ZWN1dGlvbl90aW1lCgkJCWlmICggZmFsc2UgPT09ICRzdXByZXNzX3N0YXR1cyApIHsKCQkJCWlmICggZmFsc2UgPT09ICggJGNvbmZpZ3VyZWRfZXhlY3V0aW9uX3RpbWUgPSBAZ2V0X2NmZ192YXIoICdtYXhfZXhlY3V0aW9uX3RpbWUnICkgKSApIHsKCQkJCQkkY29uZmlndXJlZF9leGVjdXRpb25fdGltZSA9ICdVbmtub3duJzsKCQkJCX0KCQkJCSRjdXJyZW50X2V4ZWN1dGlvbl90aW1lID0gQGluaV9nZXQoICdtYXhfZXhlY3V0aW9uX3RpbWUnICk7CgkJCQlpZiAoIGZhbHNlID09PSAkY3VycmVudF9leGVjdXRpb25fdGltZSApIHsKCQkJCQkkY3VycmVudF9leGVjdXRpb25fdGltZSA9ICdVbmtub3duJzsKCQkJCX0KCQkJCXNlbGY6OnN0YXR1cyggJ2RldGFpbHMnLCBfXyggJ01heGltdW0gUEhQIGV4ZWN1dGlvbiB0aW1lIHdhcyBub3QgbW9kaWZpZWQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwoJCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnUmVwb3J0ZWQgUEhQIGV4ZWN1dGlvbiB0aW1lIC0gQ29uZmlndXJlZDogJTEkczsgT3JpZ2luYWw6ICUyJHM7IEN1cnJlbnQ6ICUzJHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGNvbmZpZ3VyZWRfZXhlY3V0aW9uX3RpbWUsICRvcmlnaW5hbF9leGVjdXRpb25fdGltZSwgJGN1cnJlbnRfZXhlY3V0aW9uX3RpbWUgKSApOwoJCQl9CgkJfSBlbHNlIHsgLy8gRWl0aGVyIG5vdCBhIG51bWVyaWMgdmFsdWUgb3Igd2UgbmVlZCB0byB0cnkgYW5kIGluY3JlYXNlCgoJCQlpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3NldF9ncmVlZHlfZXhlY3V0aW9uX3RpbWUnXSApICYmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snc2V0X2dyZWVkeV9leGVjdXRpb25fdGltZSddICkgKSB7CgkJCQlpZiAoIGZhbHNlID09PSAkc3VwcmVzc19zdGF0dXMgKSB7CgkJCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnQXR0ZW1wdGluZyB0byBzZXQgUEhQIGV4ZWN1dGlvbiB0aW1lIHRvICUxJHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHJlcXVlc3RlZF9leGVjdXRpb25fdGltZSApICk7CgkJCQl9CgkJCQlAc2V0X3RpbWVfbGltaXQoICRyZXF1ZXN0ZWRfZXhlY3V0aW9uX3RpbWUgKTsKCQkJfSBlbHNlaWYgKCBmYWxzZSA9PT0gJHN1cHJlc3Nfc3RhdHVzICkgey8vIGVuZCBzZXR0aW5nIG1heCBleGVjdXRpb24gdGltZQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBlZCBhdHRlbXB0aW5nIHRvIG92ZXJyaWRlIG1heCBQSFAgZXhlY3V0aW9uIHRpbWUgYmFzZWQgb24gc2V0dGluZ3MuJyApOwoJCQl9CgoJCQlpZiAoIGZhbHNlID09PSAkc3VwcmVzc19zdGF0dXMgKSB7CgkJCQkkY29uZmlndXJlZF9leGVjdXRpb25fdGltZSA9IEBnZXRfY2ZnX3ZhciggJ21heF9leGVjdXRpb25fdGltZScgKTsKCQkJCWlmICggZmFsc2UgPT09ICRjb25maWd1cmVkX2V4ZWN1dGlvbl90aW1lICkgewoJCQkJCSRjb25maWd1cmVkX2V4ZWN1dGlvbl90aW1lID0gJ1Vua25vd24nOwoJCQkJfQoJCQkJJGN1cnJlbnRfZXhlY3V0aW9uX3RpbWUgPSBAaW5pX2dldCggJ21heF9leGVjdXRpb25fdGltZScgKTsKCQkJCWlmICggZmFsc2UgPT09ICRjdXJyZW50X2V4ZWN1dGlvbl90aW1lICkgewoJCQkJCSRjdXJyZW50X2V4ZWN1dGlvbl90aW1lID0gJ1Vua25vd24nOwoJCQkJfQoJCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnUmVwb3J0ZWQgUEhQIGV4ZWN1dGlvbiB0aW1lIC0gQ29uZmlndXJlZDogJTEkczsgT3JpZ2luYWw6ICUyJHM7IEN1cnJlbnQ6ICUzJHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGNvbmZpZ3VyZWRfZXhlY3V0aW9uX3RpbWUsICRvcmlnaW5hbF9leGVjdXRpb25fdGltZSwgJGN1cnJlbnRfZXhlY3V0aW9uX3RpbWUgKSApOwoJCQl9CgkJfQoKCQkvLyBTZXQgbWVtb3J5X2xpbWl0IHRvIGVpdGhlciB0aGUgdXNlciBkZWZpbmVkIChXb3JkUHJlc3MgZGVmYXVsdGVkKSBvciBvdmVyLXJpZGRlbiB2YWx1ZS4KCQkvLyBOZWVkIHRvIGdldCB0aGUgb3JpZ2luYWwgdmFsdWUgaGVyZSBhcyB3ZSB3aWxsIGJlIHVwZGF0aW5nIGl0LgoJCSRvcmlnaW5hbF9tZW1vcnlfbGltaXQgPSBAaW5pX2dldCggJ21lbW9yeV9saW1pdCcgKTsKCQlpZiAoIGZhbHNlID09PSAkb3JpZ2luYWxfbWVtb3J5X2xpbWl0ICkgewoJCQkkb3JpZ2luYWxfbWVtb3J5X2xpbWl0ID0gJ1Vua25vd24nOwoJCX0KCgkJLy8gTmVlZCB0byBjaGVjayBpZiB3ZSBhcmUgcnVubmluZyBvdXRzaWRlIG9mIFdvcmRQcmVzcyBpbiB3aGljaCBjYXNlIHdlIGRvbid0IHRyeSBhbmQgY2hhbmdlIGFueXRoaW5nCgkJLy8gYnV0IGp1c3QgcmVwb3J0IHRoZSBtZW1vcnlfbGltaXQgdmFsdWVzLiBUaGUgdXNlciB3aWxsIGhhdmUgdG8gdXBkYXRlIGNvbmZpZyBpZiBuZWNlc3NhcnkgYmVjYXVzZQoJCS8vIHRoZXJlIGlzIG5vIG90aGVyIG1lY2hhbmlzbSB0byBzZXQgdGhlIHZhbGlkIG1lbW9yeV9saW1pdC4KCQkvLyBJZiB3ZSBhcmUgcnVubmluZyB1bmRlciBXb3JkUHJlc3MgdGhlbiBuZWVkIGEgbGl0dGxlIGZha2VyeSBmb3IgZWFybGllciB2ZXJzaW9ucy4KCQlpZiAoICEgcGJfaXNfc3RhbmRhbG9uZSgpICkgewoJCQkvLyBOb3RlOiBXUF9NQVhfTUVNT1JZX0xJTUlUIHdhcyBpbnRyb2R1Y2VkIFdQMy4yIHNvIHdlIG5lZWQgdG8gZmFrZSBpdCBpZiBjb25zdGFudCBub3QgYWxyZWFkeSBkZWZpbmVkCgkJCS8vIFVzZSB0aGUgZGVmYXVsdCB2YWx1ZSB0aGF0IFdvcmRQcmVzcyB1c2VzIGlmIHRoZSB1c2VyIGhhc24ndCBkZWZpbmVkIGl0CgkJCWlmICggISBkZWZpbmVkKCAnV1BfTUFYX01FTU9SWV9MSU1JVCcgKSApIHsKCQkJCWRlZmluZSggJ1dQX01BWF9NRU1PUllfTElNSVQnLCAnMjU2TScgKTsKCQkJfQoJCQlAaW5pX3NldCggJ21lbW9yeV9saW1pdCcsIGFwcGx5X2ZpbHRlcnMoICdhZG1pbl9tZW1vcnlfbGltaXQnLCBXUF9NQVhfTUVNT1JZX0xJTUlUICkgKTsKCQkJaWYgKCBmYWxzZSA9PT0gJHN1cHJlc3Nfc3RhdHVzICkgewoJCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnQXR0ZW1wdGVkIHRvIHNldCBQSFAgbWVtb3J5IGxpbWl0IHRvIHVzZXIgZGVmaW5lZCBXUF9NQVhfTUVNT1JZX0xJTUlUICglMSRzKSBvciBvdmVyLXJpZGRlbiB2YWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCBXUF9NQVhfTUVNT1JZX0xJTUlUICkgKTsKCQkJfQoJCX0KCQlpZiAoIGZhbHNlID09PSAkc3VwcmVzc19zdGF0dXMgKSB7CgkJCSRjb25maWd1cmVkX21lbW9yeV9saW1pdCA9IEBnZXRfY2ZnX3ZhciggJ21lbW9yeV9saW1pdCcgKTsKCQkJaWYgKCBmYWxzZSA9PT0gJGNvbmZpZ3VyZWRfbWVtb3J5X2xpbWl0ICkgewoJCQkJJGNvbmZpZ3VyZWRfbWVtb3J5X2xpbWl0ID0gJ1Vua25vd24nOwoJCQl9CgkJCSRjdXJyZW50X21lbW9yeV9saW1pdCA9IEBpbmlfZ2V0KCAnbWVtb3J5X2xpbWl0JyApOwoJCQlpZiAoIGZhbHNlID09PSAkY3VycmVudF9tZW1vcnlfbGltaXQgKSB7CgkJCQkkY3VycmVudF9tZW1vcnlfbGltaXQgPSAnVW5rbm93bic7CgkJCX0KCQkJc2VsZjo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnUmVwb3J0ZWQgUEhQIG1lbW9yeSBsaW1pdHMgLSBDb25maWd1cmVkOiAlMSRzOyBPcmlnaW5hbDogJTIkczsgQ3VycmVudDogJTMkcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkY29uZmlndXJlZF9tZW1vcnlfbGltaXQsICRvcmlnaW5hbF9tZW1vcnlfbGltaXQsICRjdXJyZW50X21lbW9yeV9saW1pdCApICk7CgkJfQoKCX0gLy8gRW5kIHNldF9ncmVlZHlfc2NyaXB0X2xpbWl0cygpLgoKCS8qKgoJICogTG9ncyB0byBhIHRleHQgZmlsZSBkZXBlbmRpbmcgb24gc2V0dGluZ3MuCgkgKgoJICogMCA9IG5vbmUKCSAqIDEgPSBlcnJvcnMgb25seQoJICogMiA9IGVycm9ycyArIHdhcm5pbmdzCgkgKiAzID0gZGVidWdnaW5nIChhbGwga2luZHMgb2YgYWN0aW9ucykKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR0ZXh0ICAgICAgVGV4dCB0byBsb2cuCgkgKiBAcGFyYW0gc3RyaW5nICRsb2dfdHlwZSAgVmFsaWQgb3B0aW9uczogZXJyb3IsIHdhcm5pbmcsIGFsbCAoZGVmYXVsdCBzbyBtYXkgYmUgb21pdHRlZCkuCgkgKgoJICogQHJldHVybiBbdHlwZV0gW2Rlc2NyaXB0aW9uXQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGxvZyggJHRleHQsICRsb2dfdHlwZSA9ICdhbGwnICkgewoJCWlmICggZGVmaW5lZCggJ1BCX0RFTU9fTU9ERScgKSB8fCAhIGlzc2V0KCBzZWxmOjokb3B0aW9uc1snbG9nX2xldmVsJ10gKSB8fCAwID09IHNlbGY6OiRvcHRpb25zWydsb2dfbGV2ZWwnXSApIHsgLy8gTm8gbG9nZ2luZyBpbiB0aGlzIHBsdWdpbiBvciBkaXNhYmxlZC4KCQkJcmV0dXJuOwoJCX0KCgkJJHdyaXRlID0gZmFsc2U7CgkJaWYgKCAxID09IHNlbGY6OiRvcHRpb25zWydsb2dfbGV2ZWwnXSApIHsgLy8gRXJyb3JzIG9ubHkuCgkJCWlmICggJ2Vycm9yJyA9PT0gJGxvZ190eXBlICkgewoJCQkJJHdyaXRlID0gdHJ1ZTsKCQkJfQoJCX0gZWxzZSB7IC8vIEFsbCBsb2dnaW5nIChkZWJ1ZyBtb2RlKS4KCQkJJHdyaXRlID0gdHJ1ZTsKCQl9CgoJCWlmICggdHJ1ZSA9PT0gJHdyaXRlICkgewoJCQlpZiAoICEgaXNzZXQoIHNlbGY6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gKSApIHsKCQkJCXNlbGY6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gPSBzZWxmOjpyYW5kb21fc3RyaW5nKCAxNSApOwoJCQkJc2VsZjo6c2F2ZSgpOwoJCQl9CgkJCSRmaCA9IEBmb3BlbiggYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCkgLiAnbG9nLScgLiBzZWxmOjokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnLCAnYScgKTsKCQkJaWYgKCAkZmggKSB7CgkJCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cyggJ2dldF9vcHRpb24nICkgKSB7CgkJCQkJJGdtdF9vZmZzZXQgPSBnZXRfb3B0aW9uKCAnZ210X29mZnNldCcgKTsKCQkJCX0gZWxzZSB7CgkJCQkJJGdtdF9vZmZzZXQgPSAwOwoJCQkJfQoJCQkJZndyaXRlKCAkZmgsICdbJyAuIGRhdGUoICdNIGosIFkgSDppOnMgJyAuICRnbXRfb2Zmc2V0LCB0aW1lKCkgKyAoICRnbXRfb2Zmc2V0ICogMzYwMCApICkgLiAnLScgLiAkbG9nX3R5cGUgLiAnXSAnIC4gJHRleHQgLiAiXG4iICk7CgkJCQlmY2xvc2UoICRmaCApOwoJCQl9CgkJfQoJfSAvLyBFbmQgbG9nKCkuCgoJLyoqCgkgKiBHZW5lcmF0ZSBhIHJhbmRvbSBzdHJpbmcgb2YgY2hhcmFjdGVycy4KCSAqCgkgKiBAcGFyYW0gaW50ICAgICRsZW5ndGggIExlbmd0aCBvZiByYW5kb20gc3RyaW5nLgoJICogQHBhcmFtIHN0cmluZyAkY2hhcnMgICBDaGFyYWN0ZXJzIHRvIGluY2x1ZGUgaW4gc3RyaW5nLgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICRzdHJpbmcgIFJhbmRvbSBzdHJpbmcuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmFuZG9tX3N0cmluZyggJGxlbmd0aCA9IDMyLCAkY2hhcnMgPSAnYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ejEyMzQ1Njc4OTAnICkgewoJCSRjaGFyc19sZW5ndGggPSAoIHN0cmxlbiggJGNoYXJzICkgLSAxICk7CgkJJHN0cmluZyAgICAgICA9ICRjaGFyc1sgcmFuZCggMCwgJGNoYXJzX2xlbmd0aCApIF07CgkJZm9yICggJGkgPSAxOyAkaSA8ICRsZW5ndGg7ICRpID0gc3RybGVuKCAkc3RyaW5nICkgKSB7CgkJCSRyID0gJGNoYXJzWyByYW5kKCAwLCAkY2hhcnNfbGVuZ3RoICkgXTsKCQkJaWYgKCAkciAhPSAkc3RyaW5nWyAkaSAtIDEgXSApIHsKCQkJCSRzdHJpbmcgLj0gJHI7CgkJCX0KCQl9CgkJcmV0dXJuICRzdHJpbmc7Cgl9IC8vIEVuZCByYW5kb21fc3RyaW5nKCkuCgoJLyoqCgkgKiBEaXNwbGF5cyBhIG1lc3NhZ2UgdG8gdGhlIHVzZXIgd2hlbiB0aGV5IGhvdmVyIG92ZXIgdGhlIHF1ZXN0aW9uIG1hcmsuIEdyYWNlZnVsbHkgZmFsbHMgYmFjayB0byBub3JtYWwgdG9vbHRpcC4KCSAqIEhUTUwgaXMgYWxsb3dlZCB3aXRoaW4gdG9vbHRpcHMuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkdmlkZW9fa2V5ICBZb3VUdWJlIHZpZGVvIGtleSBmcm9tIHRoZSBVUkwgP3Y9VklERU9fS0VZX0hFUkUuCgkgKiBAcGFyYW0gc3RyaW5nICR0aXRsZSAgICAgIChPcHRpb25hbCkgVGl0bGUgb2YgbWVzc2FnZSB0byBzaG93IHRvIHVzZXIuIFRoaXMgaXMgZGlzcGxheWVkIGF0IHRvcCBvZiB0aXAgaW4gYmlnZ2VyIGxldHRlcnMuIERlZmF1bHQgaXMgYmxhbmsuCgkgKiBAcGFyYW0gYm9vbCAgICRlY2hvX3RpcCAgIChPcHRpb25hbCkgV2hldGhlciB0byBlY2hvIHRoZSB0aXAgKGRlZmF1bHQ7IHRydWUpLCBvciByZXR1cm4gdGhlIHRpcCAoZmFsc2UpLgoJICoKCSAqIEByZXR1cm4gbWl4ZWQgIElmIG5vdCBlY2hvaW5nIHRpcCB0aGVuIHRoZSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gV2hlbiBlY2hvaW5nIHRoZXJlIGlzIG5vIHJldHVybi4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiB2aWRlbyggJHZpZGVvX2tleSwgJHRpdGxlID0gJycsICRlY2hvX3RpcCA9IHRydWUgKSB7CgkJc2VsZjo6aW5pdF9jbGFzc19jb250cm9sbGVyKCAndWknICk7IC8vICR1aSBjbGFzcyByZXF1aXJlZCBwYWdlcyBjb250cm9sbGVyIGFuZCBtYXkgbm90IGJlIHNldCB1cCBpZiBub3QgaW4gb3VyIG93biBwYWdlcy4KCQlyZXR1cm4gc2VsZjo6JHVpLT52aWRlbyggJHZpZGVvX2tleSwgJHRpdGxlLCAkZWNob190aXAgKTsKCX0gLy8gRW5kIHZpZGVvKCkuCgoJLyoqCgkgKiBFbnF1ZXVlcyB0aGUgcmVxdWlyZWQgc2NyaXB0cyAvIHN0eWxlcyBuZWVkZWQgdG8gdXNlIHRoaWNrYm94CgkgKgoJICogQHJldHVybiBudWxsCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZW5xdWV1ZV90aGlja2JveCgpIHsKCQlzZWxmOjppbml0X2NsYXNzX2NvbnRyb2xsZXIoICd1aScgKTsgLy8gJHVpIGNsYXNzIHJlcXVpcmVkIHBhZ2VzIGNvbnRyb2xsZXIgYW5kIG1heSBub3QgYmUgc2V0IHVwIGlmIG5vdCBpbiBvdXIgb3duIHBhZ2VzLgoJCXJldHVybiBzZWxmOjokdWktPmVucXVldWVfdGhpY2tib3goKTsKCX0gLy8gRW5kIGVucXVldWVfdGhpY2tib3gKCgkvKioKCSAqIERpc3BsYXlzIGEgbWVzc2FnZSB0byB0aGUgdXNlciBhdCB0aGUgdG9wIG9mIHRoZSBwYWdlIHdoZW4gaW4gdGhlIGRhc2hib2FyZC4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRtZXNzYWdlICAgICBNZXNzYWdlIHlvdSB3YW50IHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIuCgkgKiBAcGFyYW0gYm9vbCAgICRlcnJvciAgICAgICBPUFRJT05BTCEgdHJ1ZSBpbmRpY2F0ZXMgdGhpcyBhbGVydCBpcyBhbiBlcnJvciBhbmQgZGlzcGxheXMgYXMgcmVkLiBEZWZhdWx0OiBmYWxzZS4KCSAqIEBwYXJhbSBzdHJpbmcgJGVycm9yX2NvZGUgIE9QVElPTkFMISBFcnJvciBjb2RlIG51bWJlciB0byB1c2UgaW4gbGlua2luZyBpbiB0aGUgd2lraSBmb3IgZWFzeSByZWZlcmVuY2UuCgkgKiBAcGFyYW0gc3RyaW5nICRyZWxfdGFnICAgICBJZiBub3QgZWNob2luZyBhbGVydCB0aGVuIHRoZSBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gV2hlbiBlY2hvaW5nIHRoZXJlIGlzIG5vIHJldHVybi4KCSAqIEBwYXJhbSBzdHJpbmcgJG1vcmVfY3NzICAgIElubGluZSBjc3MgdG8gYmUgYWRkZWQgdG8gbWVzc2FnZS4KCSAqIEBwYXJhbSBhcnJheSAgJGFyZ3MgICAgICAgIEFkZGl0aW9uYWwgYXJyYXkgb2YgYXJncyB0byBwYXNzIHRvIGFsZXJ0LgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFsZXJ0KCAkbWVzc2FnZSwgJGVycm9yID0gZmFsc2UsICRlcnJvcl9jb2RlID0gJycsICRyZWxfdGFnID0gJycsICRtb3JlX2NzcyA9ICcnLCAkYXJncyA9IGFycmF5KCkgKSB7CgkJc2VsZjo6aW5pdF9jbGFzc19jb250cm9sbGVyKCAndWknICk7IC8vICR1aSBjbGFzcyByZXF1aXJlZCBwYWdlcyBjb250cm9sbGVyIGFuZCBtYXkgbm90IGJlIHNldCB1cCBpZiBub3QgaW4gb3VyIG93biBwYWdlcy4KCQlzZWxmOjokdWktPmFsZXJ0KCAkbWVzc2FnZSwgJGVycm9yLCAkZXJyb3JfY29kZSwgJHJlbF90YWcsICRtb3JlX2NzcywgJGFyZ3MgKTsKCX0gLy8gRW5kIGFsZXJ0KCkuCgoJLyoqCgkgKiBEaXNtaXNzYWJsZSBhbGVydCBzeXN0ZW0uCgkgKgoJICogQHVzZXMgYWxlcnQoKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHVuaXF1ZV9pZCAgVW5pcXVlIElEIGZvciBhbGVydC4KCSAqIEBwYXJhbSBzdHJpbmcgJG1lc3NhZ2UgICAgTWVzc2FnZSB5b3Ugd2FudCB0byBkaXNwbGF5IHRvIHRoZSB1c2VyLgoJICogQHBhcmFtIGJvb2wgICAkZXJyb3IgICAgICBPcHRpb25hbC4gRXJyb3IgY29kZSBudW1iZXIgdG8gdXNlIGluIGxpbmtpbmcgdG8gdGhlIHdpa2kgZm9yIGVhc3kgcmVmZXJlbmNlLgoJICogQHBhcmFtIHN0cmluZyAkbW9yZV9jc3MgICBBZGRpdGlvbmFsIGNzcyB0byBhcHBseSB0byBhbGVydC4KCSAqIEBwYXJhbSBhcnJheSAgJGFyZ3MgICAgICAgQWRkaXRpb25hbCBhcmdzIHRvIGJlIHBhc3NlZC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBkaXNhbGVydCggJHVuaXF1ZV9pZCwgJG1lc3NhZ2UsICRlcnJvciA9IGZhbHNlLCAkbW9yZV9jc3MgPSAnJywgJGFyZ3MgPSBhcnJheSgpICkgewoJCXNlbGY6OmluaXRfY2xhc3NfY29udHJvbGxlciggJ3VpJyApOyAvLyAkdWkgY2xhc3MgcmVxdWlyZWQgcGFnZXMgY29udHJvbGxlciBhbmQgbWF5IG5vdCBiZSBzZXQgdXAgaWYgbm90IGluIG91ciBvd24gcGFnZXMuCgkJc2VsZjo6JHVpLT5kaXNhbGVydCggJHVuaXF1ZV9pZCwgJG1lc3NhZ2UsICRlcnJvciwgJG1vcmVfY3NzLCAkYXJncyApOwoJfSAvLyBFbmQgZGlzYWxlcnQoKS4KCgkvKioKCSAqIERpc3BsYXlzIGEgbWVzc2FnZSB0byB0aGUgdXNlciB3aGVuIHRoZXkgaG92ZXIgb3ZlciB0aGUgcXVlc3Rpb24gbWFyay4gR3JhY2VmdWxseSBmYWxscyBiYWNrIHRvIG5vcm1hbCB0b29sdGlwLgoJICogSFRNTCBpcyBhbGxvd2VkIHdpdGhpbiB0b29sdGlwcy4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRtZXNzYWdlICAgQWN0dWFsIG1lc3NhZ2UgdG8gc2hvdyB0byB1c2VyLgoJICogQHBhcmFtIHN0cmluZyAkdGl0bGUgICAgIFRpdGxlIG9mIG1lc3NhZ2UgdG8gc2hvdyB0byB1c2VyLiBUaGlzIGlzIGRpc3BsYXllZCBhdCB0b3Agb2YgdGlwIGluIGJpZ2dlciBsZXR0ZXJzLiAob3B0aW9uYWwpIERlZmF1bHQgaXMgYmxhbmsuCgkgKiBAcGFyYW0gYm9vbCAgICRlY2hvX3RpcCAgKE9wdGlvbmFsKSBXaGV0aGVyIHRvIGVjaG8gdGhlIHRpcCAoZGVmYXVsdDsgdHJ1ZSksIG9yIHJldHVybiB0aGUgdGlwIChmYWxzZSkuCgkgKgoJICogQHJldHVybiBtaXhlZCAgSWYgbm90IGVjaG9pbmcgdGlwIHRoZW4gdGhlIHN0cmluZyB3aWxsIGJlIHJldHVybmVkLiBXaGVuIGVjaG9pbmcgdGhlcmUgaXMgbm8gcmV0dXJuLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHRpcCggJG1lc3NhZ2UsICR0aXRsZSA9ICcnLCAkZWNob190aXAgPSB0cnVlICkgewoJCXNlbGY6OmluaXRfY2xhc3NfY29udHJvbGxlciggJ3VpJyApOyAvLyAkdWkgY2xhc3MgcmVxdWlyZWQgcGFnZXMgY29udHJvbGxlciBhbmQgbWF5IG5vdCBiZSBzZXQgdXAgaWYgbm90IGluIG91ciBvd24gcGFnZXMuCgkJcmV0dXJuIHNlbGY6OiR1aS0+dGlwKCAkbWVzc2FnZSwgJHRpdGxlLCAkZWNob190aXAgKTsKCX0gLy8gRW5kIHRpcCgpLgoKCS8qKgoJICogQWRkcyBhIHBhZ2UgaW50byB0aGUgYWRtaW4uIFN0b3JlcyBtZW51IGl0ZW1zIHRvIGFkZCBpbiBzZWxmOjokX3BhZ2Vfc2V0dGluZ3MgYXJyYXkuIFJlZ2lzdGVycyBjYWxsYmFjayB0byByZWdpc3Rlcl9hZG1pbl9tZW51KCkgd2l0aCBXb3JkUHJlc3MgdG8gYWN0dWFsbHkgc2V0IHVwIHRoZSBwYWdlcy4KCSAqCgkgKiBAc2VlIHNlbGY6OnJlZ2lzdGVyX2FkbWluX21lbnUoKQoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHBhcmVudF9zbHVnICBTbHVnIG9mIHRoZSBwYXJlbnQgbWVudSBpdGVtIHRvIGdvIHVuZGVyLiBJZiBhIHNlcmllcyB1c2UgYFNFUklFU2AgZm9yIHRoZSB2YWx1ZSB0byBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgc2VyaWVzLiBQQiBwcmVmaXggYXV0b21hdGljYWxseSBhcHBsaWVkIHVubGVzcyAkc2x1Z19wcmVmaXggb3ZlcnJpZGVzLgoJICogQHBhcmFtIHN0cmluZyAkcGFnZV9zbHVnICAgIFNsdWcgZm9yIHRoaXMgcGFnZS4gUEIgcHJlZml4IGF1dG9tYXRpY2FsbHkgYXBwbGllZCB1bmxlc3MgJHNsdWdfcHJlZml4IG92ZXJyaWRlcy4KCSAqIEBwYXJhbSBzdHJpbmcgJHBhZ2VfdGl0bGUgICBUaXRsZSBvZiB0aGUgcGFnZS4gSWYgdGhpcyBtZW51IGl0ZW0gaGFzIG5vIHBhcmVudCB0aGlzIGNhbiBiZSBhbiBhcnJheSBvZiBUV08gdGl0bGVzLiBUaGUgcm9vdCBtZW51IGFuZCB0aGUgZmlyc3Qgc3VibWVudSBpdGVtIHRoYXQgbGlua3MgdG8gdGhlIHNhbWUgcGxhY2UuCgkgKiBAcGFyYW0gc3RyaW5nICRjYXBhYmlsaXR5ICAgQ2FwYWJpbGl0eSByZXF1aXJlZCB0byBhY2Nlc3MgcGFnZS4gRGVmYXVsdDogYWN0aXZhdGVfcGx1Z2lucy4KCSAqIEBwYXJhbSBzdHJpbmcgJGljb24gICAgICAgICBNZW51IGljb24gZ3JhcGhpYy4gQXV0b21hdGljYWxseSBwcmVmaXhlcyB0aGlzIHZhbHVlIHdpdGggdGhlIGZ1bGwgVVJMIHRvIHBsdWdpbidzIGltYWdlcyBkaXJlY3RvcnkuIERlZmF1bHQ6IGljb25fMTZ4MTYucG5nLgoJICogQHBhcmFtIHN0cmluZyAkc2x1Z19wcmVmaXggIFByZWZpeCB0byB1c2Ugd2l0aCB0aGlzIG1lbnUuIE92ZXJyaWRlIGlmIG5lZWRpbmcgdG8gYWRkIG1lbnUgdW5kZXIgYW5vdGhlciBwbHVnaW4gb3IgY29yZSBtZW51cy4gRGVmYXVsdDogREVGQVVMVC4KCSAqIEBwYXJhbSBpbnQgICAgJHBvc2l0aW9uICAgICBQcmlvcml0eSBvbiB3aGVyZSBpbiB0aGUgbWVudSB0byBhZGQgdGhpcy4gQnkgZGVmYXVsdCBpdCBpcyBhZGRlZCB0byB0aGUgYm90dG9tIG9mIHRoZSBtZW51LiBJdCdzIHBvc3NpYmxlIHRvIG92ZXJ3cml0ZSBhbm90aGVyIG1lbnUgaXRlbSBpZiB0aGlzIG51bWJlciBtYXRjaGVzLiBVc2UgY2F1dGlvbi4gRGVmYXVsdDogbnVsbC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfcGFnZSggJHBhcmVudF9zbHVnLCAkcGFnZV9zbHVnLCAkcGFnZV90aXRsZSwgJGNhcGFiaWxpdHkgPSAnYWN0aXZhdGVfcGx1Z2lucycsICRpY29uID0gJ2ljb25fbWVudV8xNngxNi5wbmcnLCAkc2x1Z19wcmVmaXggPSAnREVGQVVMVCcsICRwb3NpdGlvbiA9IG51bGwgKSB7CgkJaWYgKCAnREVGQVVMVCcgPT0gJHNsdWdfcHJlZml4ICkgewoJCQkkc2x1Z19wcmVmaXggPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJzsKCQl9CgoJCWlmICggISBpc19vYmplY3QoIHNlbGY6OiRfcGFnZXMgKSApIHsKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAncGFnZXMnICk7CgoJCQlpZiAoIGlzX25ldHdvcmtfYWRtaW4oKSApIHsgLy8gTXVsdGlzaXRlIGluc3RhbGxhdGlvbiBhZG1pbjsgdXNlcyBkaWZmZXJlbnQgaG9vay4KCQkJCWFkZF9hY3Rpb24oICduZXR3b3JrX2FkbWluX21lbnUnLCBhcnJheSggJ3BiX2JhY2t1cGJ1ZGR5JywgJ2luaXRfcmVnaXN0ZXJfYWRtaW5fbWVudScgKSApOwoJCQl9IGVsc2UgeyAvLyBTdGFuZGFsb25lIGFkbWluLgoJCQkJYWRkX2FjdGlvbiggJ2FkbWluX21lbnUnLCBhcnJheSggJ3BiX2JhY2t1cGJ1ZGR5JywgJ2luaXRfcmVnaXN0ZXJfYWRtaW5fbWVudScgKSApOwoJCQl9CgkJfQoKCQlzZWxmOjokX3BhZ2Vfc2V0dGluZ3NbXSA9IGFycmF5KAoJCQkncGFyZW50JyAgICAgID0+ICRwYXJlbnRfc2x1ZywKCQkJJ3NsdWcnICAgICAgICA9PiAkcGFnZV9zbHVnLAoJCQkndGl0bGUnICAgICAgID0+ICRwYWdlX3RpdGxlLAoJCQknY2FwYWJpbGl0eScgID0+ICRjYXBhYmlsaXR5LAoJCQknaWNvbicgICAgICAgID0+ICRpY29uLAoJCQknc2x1Z19wcmVmaXgnID0+ICRzbHVnX3ByZWZpeCwKCQkJJ3Bvc2l0aW9uJyAgICA9PiAkcG9zaXRpb24sCgkJKTsKCX0gLy8gRW5kIGFkZF9wYWdlKCkuCgoJLyoqCgkgKiBDYWxsIENsYXNzIEFkbWluIE1lbnUgUmVnaXN0cmF0aW9uCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaW5pdF9yZWdpc3Rlcl9hZG1pbl9tZW51KCkgewoJCSRjbGFzcyA9ICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApOwoJCWNhbGxfdXNlcl9mdW5jKCBhcnJheSggJGNsYXNzLCAncmVnaXN0ZXJfYWRtaW5fbWVudScgKSApOwoJfQoKCS8qKgoJICogSW50ZXJuYWwgY2FsbGJhY2sgZm9yIGFjdHVhbGx5IHJlZ2lzdGVyaW5nIHRoZSBtZW51IGl0ZW1zIGludG8gV29yZFByZXNzLiBSZWdpc3RlcnMgcGFnZXMgZGVmaW5lZCBieSBzZWxmOjphZGRfcGFnZSgpLgoJICoKCSAqIEBzZWUgc2VsZjo6YWRkX3BhZ2UoKQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJlZ2lzdGVyX2FkbWluX21lbnUoKSB7CgkJaWYgKCAhIHNlbGY6OmJsYW5rKCBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXSApICkgeyAvLyBTRVJJRVMuCgkJCSRzZXJpZXNfc2x1ZyA9ICdwYl8nIC4gc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ107CgkJCS8vIFdlIG5lZWQgdG8gc2VlIGZpcnN0IGlmIHRoaXMgc2VyaWVzJyByb290IG1lbnUgaGFzIGJlZW4gY3JlYXRlZCBieSBhIHBsdWdpbiB5ZXQuCgkJCWdsb2JhbCAkbWVudTsKCQkJJGZvdW5kX3NlcmllcyA9IGZhbHNlOwoJCQlmb3JlYWNoICggJG1lbnUgYXMgJG1lbnVzID0+ICRpdGVtICkgeyAvLyBMb29wIHRocm91Z2ggZXhpc3RpbmcgbWVudSBpdGVtcyBsb29raW5nIGZvciBvdXIgc2VyaWVzLgoJCQkJaWYgKCAkaXRlbVswXSA9PSAkc2VyaWVzX3NsdWcgKSB7CgkJCQkJJGZvdW5kX3NlcmllcyA9IHRydWU7CgkJCQl9CgkJCX0KCQkJaWYgKCBmYWxzZSA9PT0gJGZvdW5kX3NlcmllcyApIHsgLy8gU2VyaWVzIHJvb3QgbWVudSBkb2VzIG5vdCBleGlzdDsgY3JlYXRlIGl0LgoJCQkJYWRkX21lbnVfcGFnZSggc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10gLiAnIEdldHRpbmcgU3RhcnRlZCcsIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddLCAnYWN0aXZhdGVfcGx1Z2lucycsICRzZXJpZXNfc2x1ZywgYXJyYXkoICZzZWxmOjokX3BhZ2VzLCAnZ2V0dGluZ19zdGFydGVkJyApLCBzZWxmOjpwbHVnaW5fdXJsKCkgLiAnL2ltYWdlcy9zZXJpZXNfaWNvbl8xNngxNi5wbmcnICk7IC8vICwgJHBhZ2VbJ3Bvc2l0aW9uJ10KCQkJCWFkZF9zdWJtZW51X3BhZ2UoICRzZXJpZXNfc2x1Zywgc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10gLiAnIEdldHRpbmcgU3RhcnRlZCcsICdHZXR0aW5nIFN0YXJ0ZWQnLCAnYWN0aXZhdGVfcGx1Z2lucycsICRzZXJpZXNfc2x1ZywgYXJyYXkoICZzZWxmOjokX3BhZ2VzLCAnZ2V0dGluZ19zdGFydGVkJyApICk7CgkJCX0KCgkJCS8vIFJlZ2lzdGVyIGZvciBnZXR0aW5nIHN0YXJ0ZWQgcGFnZS4KCQkJZ2xvYmFsICRwbHVnaW5idWRkeV9zZXJpZXM7CgkJCWlmICggISBpc3NldCggJHBsdWdpbmJ1ZGR5X3Nlcmllc1sgc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10gXSApICkgewoJCQkJJHBsdWdpbmJ1ZGR5X3Nlcmllc1sgc2VsZjo6JF9zZXR0aW5nc1snc2VyaWVzJ10gXSA9IGFycmF5KCk7CgkJCX0KCgkJCS8vIEFkZCB0aGlzIHBsdWdpbiBpbnRvIGdsb2JhbCBzZXJpZXMgdmFyaWFibGUuCgkJCSRwbHVnaW5idWRkeV9zZXJpZXNbIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddIF1bIHNlbGY6OiRfc2V0dGluZ3NbJ3NsdWcnXSBdID0gYXJyYXkoCgkJCQkncGF0aCcgPT4gc2VsZjo6cGx1Z2luX3BhdGgoKSwKCQkJCSduYW1lJyA9PiBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICksCgkJCQknc2x1ZycgPT4gc2VsZjo6c2V0dGluZ3MoICdzbHVnJyApLAoJCQkpOwoJCX0KCgkJLy8gQWRkIGFsbCByZWdpc3RlcmVkIHBhZ2VzIGZvciB0aGlzIHBsdWdpbi4KCQlmb3JlYWNoICggc2VsZjo6JF9wYWdlX3NldHRpbmdzIGFzICRwYWdlICkgewoJCQkkbWVudV9zbHVnID0gJHBhZ2VbJ3NsdWdfcHJlZml4J10gLiAkcGFnZVsnc2x1ZyddOwoJCQlpZiAoICdTRVJJRVMnID09PSAkcGFnZVsncGFyZW50J10gKSB7IC8vIEFkZGluZyBwYWdlIGludG8gc2VyaWVzLgoJCQkJJHBhcmVudF9zbHVnID0gJ3BiXycgLiBzZWxmOjokX3NldHRpbmdzWydzZXJpZXMnXTsKCQkJCWlmICggc2VsZjo6YmxhbmsoIHNlbGY6OiRfc2V0dGluZ3NbJ3NlcmllcyddICkgKSB7IC8vIE5vIHNlcmllcyBzZXQgYnV0IG1lbnUgaXMgcmVnaXN0ZXJlZCBpbnRvIGEgc2VyaWVzLgoJCQkJCWVjaG8gJ3tXQVJOSU5HOiBNZW51IGl0ZW0gcmVnaXN0ZXJlZCBpbnRvIGEgc2VyaWVzIGJ1dCBubyBwbHVnaW4gc2VyaWVzIGlzIGRlZmluZWQufSc7CgkJCQl9CgkJCX0gZWxzZSB7IC8vIE5vbi1zZXJpZXMgcGFnZS4KCQkJCSRwYXJlbnRfc2x1ZyA9ICRwYWdlWydzbHVnX3ByZWZpeCddIC4gJHBhZ2VbJ3BhcmVudCddOwoJCQl9CgoJCQlpZiAoIGlzX2FycmF5KCAkcGFnZVsndGl0bGUnXSApICkgewoJCQkJJHBhZ2VfdGl0bGUgICAgID0gJHBhZ2VbJ3RpdGxlJ11bMF07CgkJCQkkcGFnZV90aXRsZV9hbHQgPSAkcGFnZVsndGl0bGUnXVsxXTsKCQkJfSBlbHNlIHsgLy8gTm90IGFuIGFycmF5IHNvIG9ubHkgb25lIHBhZ2UgdGl0bGUuCgkJCQkkcGFnZV90aXRsZSAgICAgPSAkcGFnZVsndGl0bGUnXTsKCQkJCSRwYWdlX3RpdGxlX2FsdCA9ICRwYWdlWyd0aXRsZSddOwoJCQl9CgoJCQkvLyBDYWxjdWxhdGUgaWNvbi4KCQkJaWYgKCAnJyAhPSAkcGFnZVsnaWNvbiddICkgeyAvLyBJZiBpY29uIHNwZWNpZmllZCB0aGVuIGZpZ3VyZSBvdXQgdXJsLgoJCQkJJGljb24gPSAkcGFnZVsnaWNvbiddOwoJCQl9IGVsc2UgeyAvLyBObyBpY29uLiBVc3VhbGx5IHVzZWQgd2hlbiBtYW51YWxseSBkb2luZyBDU1MgZm9yIHJldGluYSBpY29uLgoJCQkJJGljb24gPSAnJzsKCQkJfQoKCQkJaWYgKCBzZWxmOjpibGFuayggJHBhZ2VbJ3BhcmVudCddICkgKSB7IC8vIFRvcC1sZXZlbCBtZW51LgoJCQkJYWRkX21lbnVfcGFnZSggJHBhZ2VfdGl0bGUsICRwYWdlX3RpdGxlLCAkcGFnZVsnY2FwYWJpbGl0eSddLCAkbWVudV9zbHVnLCBhcnJheSggJnNlbGY6OiRfcGFnZXMsICRwYWdlWydzbHVnJ10gKSwgJGljb24sICRwYWdlWydwb3NpdGlvbiddICk7CgkJCQlhZGRfc3VibWVudV9wYWdlKCAkbWVudV9zbHVnLCBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICkgLiAnICZsc2FxdW87ICcgLiAkcGFnZV90aXRsZV9hbHQsICRwYWdlX3RpdGxlX2FsdCwgJHBhZ2VbJ2NhcGFiaWxpdHknXSwgJG1lbnVfc2x1ZywgYXJyYXkoICZzZWxmOjokX3BhZ2VzLCAkcGFnZVsnc2x1ZyddICkgKTsgLy8gQWxsb3dzIG5hbWluZyBvZiBmaXJzdCBzdWJtZW51IGl0ZW0gZGlmZmVyZW50bHkgZnJvbSB0aGUgcGFyZW50LiBFbHNlIGl0cyBhdXRvIGNyZWF0ZWQgd2l0aCBzYW1lIG5hbWUuCgkJCX0gZWxzZSB7IC8vIFN1Yi1tZW51LgoJCQkJYWRkX3N1Ym1lbnVfcGFnZSggJHBhcmVudF9zbHVnLCBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICkgLiAnICZsc2FxdW87ICcgLiAkcGFnZV90aXRsZSwgJHBhZ2VfdGl0bGUsICRwYWdlWydjYXBhYmlsaXR5J10sICRtZW51X3NsdWcsIGFycmF5KCAmc2VsZjo6JF9wYWdlcywgJHBhZ2VbJ3NsdWcnXSApICk7CgkJCX0KCQl9Cgl9IC8vIEVuZCByZWdpc3Rlcl9hZG1pbl9tZW51KCkuCgoJLyoqCgkgKiBSZWdpc3RlcnMgYSBXb3JkUHJlc3MgYWN0aW9uLiBBY3Rpb24gb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvYWN0aW9ucy5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nL2FycmF5ICR0YWcgICAgICAgICAgICBUYWcgLyBzbHVnIGZvciB0aGUgYWN0aW9uLiBJZiBhbiBhcnJheSB0aGUgZmlyc3QgaXRlbSBpcyB0aGUgdGFnLCB0aGUgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCSAqIEBwYXJhbSBpbnQgICAgICAgICAgJHByaW9yaXR5ICAgICAgIEludGVnZXIgcHJpb3JpdHkgbnVtYmVyIGZvciB0aGUgYWN0aW9uLgoJICogQHBhcmFtIGludCAgICAgICAgICAkYWNjZXB0ZWRfYXJncyAgTnVtYmVyIG9mIGFyZ3VtZW50cyB0aGlzIGFjdGlvbiBtYXkgYWNjZXB0IGluIGl0cyBtZXRob2QuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX2FjdGlvbiggJHRhZywgJHByaW9yaXR5ID0gMTAsICRhY2NlcHRlZF9hcmdzID0gMSApIHsKCQlpZiAoICEgaXNfb2JqZWN0KCBzZWxmOjokX2FjdGlvbnMgKSApIHsKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnYWN0aW9ucycgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnICAgICAgICAgICAgID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9hY3Rpb24oICR0YWcsIGFycmF5KCAmc2VsZjo6JF9hY3Rpb25zLCAkY2FsbGJhY2tfbWV0aG9kICksICRwcmlvcml0eSwgJGFjY2VwdGVkX2FyZ3MgKTsKCX0gLy8gRW5kIGFkZF9hY3Rpb24oKS4KCgkvKioKCSAqIERlcmVnaXN0ZXJzIGEgV29yZFByZXNzIGFjdGlvbi4gQWN0aW9uIG9mIHRoZSBuYW1lICR0YWcgd2lsbCBjYWxsIHRoZSBtZXRob2QgaW4gL2NvbnRyb2xsZXJzL2FjdGlvbnMucGhwIHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuCgkgKgoJICogQHBhcmFtIHN0cmluZy9hcnJheSAkdGFnICAgICAgIFRhZyAvIHNsdWcgZm9yIHRoZSBhY3Rpb24uIElmIGFuIGFycmF5IHRoZSBmaXJzdCBpdGVtIGlzIHRoZSB0YWcsIHRoZSBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lLgoJICogQHBhcmFtIGludCAgICAgICAgICAkcHJpb3JpdHkgIEludGVnZXIgcHJpb3JpdHkgbnVtYmVyIGZvciB0aGUgYWN0aW9uLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJlbW92ZV9hY3Rpb24oICR0YWcsICRwcmlvcml0eSA9IDEwICkgewoJCWlmICggISBpc19vYmplY3QoIHNlbGY6OiRfYWN0aW9ucyApICkgewoJCQlzZWxmOjpfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICdhY3Rpb25zJyApOwoJCX0KCQlpZiAoIGlzX2FycmF5KCAkdGFnICkgKSB7IC8vIElmIGFycmF5IHRoZW4gZmlyc3QgcGFyYW0gaXMgdGFnLCBzZWNvbmQgcGFyYW0gaXMgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZ1sxXTsKCQkJJHRhZyAgICAgICAgICAgICA9ICR0YWdbMF07CgkJfSBlbHNlIHsgLy8gTm8gY3VzdG9tIG1ldGhvZCBuYW1lIHNvIHRhZyBhbmQgY2FsbGJhY2sgbWV0aG9kIG5hbWUgYXJlIHRoZSBzYW1lLgoJCQkkY2FsbGJhY2tfbWV0aG9kID0gJHRhZzsKCQkJaWYgKCBzdHJwb3MoICR0YWcsICcuJyApICE9PSBmYWxzZSApIHsKCQkJCWVjaG8gJ3tXYXJuaW5nOiBZb3VyIHRhZyBjb250YWlucyBkaXNhbGxvd2VkIGNoYXJhY3RlcnMuIFRhZyBuYW1lcyBhcmUgZXF1YWwgdG8gdGhlIFBIUCBtZXRob2QgdGhhdCBpcyBjYWxsZWQgYmFjayBzbyB0aGV5IG11c3QgY29uZm9ybSB0byBQSFAgbWV0aG9kIG5hbWUgc3RhbmRhcmRzLiBGb3IgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lcyB1c2UgYW4gYXJyYXkgZm9yIHRoZSB0YWcgcGFyYW1ldGVyIGluIHRoZSBmb3JtOiBhcnJheSggXCd0YWdcJywgXCdjYWxsYmFja19uYW1lXCcgKS59JzsKCQkJfQoJCX0KCQlyZW1vdmVfYWN0aW9uKCAkdGFnLCBhcnJheSggJnNlbGY6OiRfYWN0aW9ucywgJGNhbGxiYWNrX21ldGhvZCApLCAkcHJpb3JpdHkgKTsKCX0gLy8gRW5kIGFkZF9hY3Rpb24oKS4KCgkvKioKCSAqIFJlZ2lzdGVycyBhIFdvcmRQcmVzcyBhamF4IGFjdGlvbi4gQWpheCBhY3Rpb24gb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvYWpheC5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nL2FycmF5ICR0YWcgIFRhZyAvIHNsdWcgZm9yIHRoZSBhY3Rpb24uIElmIGFuIGFycmF5IHRoZSBmaXJzdCBpdGVtIGlzIHRoZSB0YWcsIHRoZSBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgY3VzdG9tIGNhbGxiYWNrIG1ldGhvZCBuYW1lLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFkZF9hamF4KCAkdGFnICkgewoJCWlmICggISBpc19vYmplY3QoIHNlbGY6OiRfYWpheCApICkgewoJCQlzZWxmOjpfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICdhamF4JyApOyB9CgkJaWYgKCBpc19hcnJheSggJHRhZyApICkgeyAvLyBJZiBhcnJheSB0aGVuIGZpcnN0IHBhcmFtIGlzIHRhZywgc2Vjb25kIHBhcmFtIGlzIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCQkJJGNhbGxiYWNrX21ldGhvZCA9ICR0YWdbMV07CgkJCSR0YWcgICAgICAgICAgICAgPSAkdGFnWzBdOwoJCX0gZWxzZSB7IC8vIE5vIGN1c3RvbSBtZXRob2QgbmFtZSBzbyB0YWcgYW5kIGNhbGxiYWNrIG1ldGhvZCBuYW1lIGFyZSB0aGUgc2FtZS4KCQkJJGNhbGxiYWNrX21ldGhvZCA9ICR0YWc7CgkJCWlmICggc3RycG9zKCAkdGFnLCAnLicgKSAhPT0gZmFsc2UgKSB7CgkJCQllY2hvICd7V2FybmluZzogWW91ciB0YWcgY29udGFpbnMgZGlzYWxsb3dlZCBjaGFyYWN0ZXJzLiBUYWcgbmFtZXMgYXJlIGVxdWFsIHRvIHRoZSBQSFAgbWV0aG9kIHRoYXQgaXMgY2FsbGVkIGJhY2sgc28gdGhleSBtdXN0IGNvbmZvcm0gdG8gUEhQIG1ldGhvZCBuYW1lIHN0YW5kYXJkcy4gRm9yIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZXMgdXNlIGFuIGFycmF5IGZvciB0aGUgdGFnIHBhcmFtZXRlciBpbiB0aGUgZm9ybTogYXJyYXkoIFwndGFnXCcsIFwnY2FsbGJhY2tfbmFtZVwnICkufSc7CgkJCX0KCQl9CgkJYWRkX2FjdGlvbiggJ3dwX2FqYXhfcGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJyAuICR0YWcsIGFycmF5KCAmc2VsZjo6JF9hamF4LCAkY2FsbGJhY2tfbWV0aG9kICkgKTsKCX0gLy8gRW5kIGFkZF9hamF4KCkuCgoJLyoqCgkgKiBSZWdpc3RlcnMgYSBXb3JkUHJlc3MgY3JvbiBjYWxsYmFjayAodGVjaG5pY2FsbHkgYW4gYWN0aW9uKS4gQ3JvbiBhY3Rpb24gb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvY3Jvbi5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nL2FycmF5ICR0YWcgICAgICAgICAgICAgICAgVGFnIC8gc2x1ZyBmb3IgdGhlIGNyb24gYWN0aW9uLiBJZiBhbiBhcnJheSB0aGUgZmlyc3QgaXRlbSBpcyB0aGUgdGFnLCB0aGUgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCSAqIEBwYXJhbSBpbnQgICAgICAgICAgJHByaW9yaXR5ICAgICAgICAgICBJbnRlZ2VyIHByaW9yaXR5IG51bWJlciBmb3IgdGhlIGNyb24gYWN0aW9uLgoJICogQHBhcmFtIGludCAgICAgICAgICAkYWNjZXB0ZWRfYXJnc19udW0gIE51bWJlciBvZiBhcmd1bWVudHMgdGhpcyBhY3Rpb24gbWF5IGFjY2VwdCBpbiBpdHMgbWV0aG9kLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGFkZF9jcm9uKCAkdGFnLCAkcHJpb3JpdHkgPSAxMCwgJGFjY2VwdGVkX2FyZ3NfbnVtID0gMSApIHsKCQlpZiAoICEgaXNfb2JqZWN0KCBzZWxmOjokX2Nyb24gKSApIHsKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnY3JvbicgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnICAgICAgICAgICAgID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9hY3Rpb24oIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJyAuICR0YWcsIGFycmF5KCAmc2VsZjo6JF9jcm9uLCAkY2FsbGJhY2tfbWV0aG9kICksICRwcmlvcml0eSwgJGFjY2VwdGVkX2FyZ3NfbnVtICk7Cgl9IC8vIEVuZCBhZGRfY3JvbigpLgoKCS8qKgoJICogUmVnaXN0ZXJzIGEgV29yZFByZXNzIGFjdGlvbi4gQWN0aW9uIG9mIHRoZSBuYW1lICR0YWcgd2lsbCBjYWxsIHRoZSBtZXRob2QgaW4gL2NvbnRyb2xsZXJzL2Rhc2hib2FyZC5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nL2FycmF5ICR0YWcgICAgICAgICBUYWcgLyBzbHVnIGZvciB0aGUgYWN0aW9uLgoJICogQHBhcmFtIHN0cmluZyAgICAgICAkdGl0bGUgICAgICAgRGFzaGJvYXJkIHdpZGdldCB0aXRsZS4KCSAqIEBwYXJhbSBzdHJpbmcgICAgICAgJGNhcGFiaWxpdHkgIFJlcXVpcmVkIGNhcGFiaWxpdHkgdG8gZGlzcGxheS4gQWxzbyBhY2NlcHRzIGBnb2Rtb2RlYCB0byBvbmx5IGFsbG93IHN1cGVyYWRtaW5zIGluIG11bHRpc2l0ZSBhbmQgYWRtaW5zIGluIHN0YW5kYWxvbmUuCgkgKiBAcGFyYW0gYm9vbCAgICAgICAgICRmb3JjZV90b3AgICBOdW1iZXIgb2YgYXJndW1lbnRzIHRoaXMgYWN0aW9uIG1heSBhY2NlcHQgaW4gaXRzIG1ldGhvZC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBhZGRfZGFzaGJvYXJkX3dpZGdldCggJHRhZywgJHRpdGxlLCAkY2FwYWJpbGl0eSwgJGZvcmNlX3RvcCA9IGZhbHNlICkgewoJCWlmICggISBpc19vYmplY3QoIHNlbGY6OiRfZGFzaGJvYXJkICkgKSB7CgkJCXNlbGY6OiRfZGFzaGJvYXJkX3dpZGdldHMgPSBhcnJheSgpOyAvLyBJbml0IHZhcmlhYmxlLgoKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnZGFzaGJvYXJkJyApOwoKCQkJaWYgKCBpc19uZXR3b3JrX2FkbWluKCkgKSB7IC8vIE5ldHdvcmsgYWRtaW4uCgkJCQlhZGRfYWN0aW9uKCAnd3BfbmV0d29ya19kYXNoYm9hcmRfc2V0dXAnLCBhcnJheSggJnNlbGY6OiRfZGFzaGJvYXJkLCAncmVnaXN0ZXJfd2lkZ2V0cycgKSApOwoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgYWRtaW4uCgkJCQlhZGRfYWN0aW9uKCAnd3BfZGFzaGJvYXJkX3NldHVwJywgYXJyYXkoICZzZWxmOjokX2Rhc2hib2FyZCwgJ3JlZ2lzdGVyX3dpZGdldHMnICkgKTsKCQkJfQoJCX0KCQlzZWxmOjokX2Rhc2hib2FyZF93aWRnZXRzW10gPSBhcnJheSgKCQkJJ3RhZycgICAgICAgID0+ICR0YWcsCgkJCSd0aXRsZScgICAgICA9PiAkdGl0bGUsCgkJCSdjYXBhYmlsaXR5JyA9PiAkY2FwYWJpbGl0eSwKCQkJJ2ZvcmNlX3RvcCcgID0+ICRmb3JjZV90b3AsCgkJKTsgLy8gUHVzaCBpbnRvIGFycmF5IHRvIGJlIGxhdGVyIHJlZ2lzdGVyZWQgdmlhIGRhc2hib2FyZCBjb250cm9sbGVyJ3MgcmVnaXN0ZXJfd2lkZ2V0cyBmdW5jdGlvbi4KCX0gLy8gRW5kIGFkZF9kYXNoYm9hcmRfd2lkZ2V0KCkuCgoJLyoqCgkgKiBSZWdpc3RlcnMgYSBXb3JkUHJlc3MgZmlsdGVyLiBGaWx0ZXIgb2YgdGhlIG5hbWUgJHRhZyB3aWxsIGNhbGwgdGhlIG1ldGhvZCBpbiAvY29udHJvbGxlcnMvZmlsdGVycy5waHAgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nL2FycmF5ICR0YWcgICAgICAgICAgICBUYWcgLyBzbHVnIGZvciB0aGUgYWN0aW9uLiBJZiBhbiBhcnJheSB0aGUgZmlyc3QgaXRlbSBpcyB0aGUgdGFnLCB0aGUgc2Vjb25kIGlzIGFuIG9wdGlvbmFsIGN1c3RvbSBjYWxsYmFjayBtZXRob2QgbmFtZS4KCSAqIEBwYXJhbSBpbnQgICAgICAgICAgJHByaW9yaXR5ICAgICAgIEludGVnZXIgcHJpb3JpdHkgbnVtYmVyIGZvciB0aGUgZmlsdGVyLgoJICogQHBhcmFtIGludCAgICAgICAgICAkYWNjZXB0ZWRfYXJncyAgTnVtYmVyIG9mIGFyZ3VtZW50cyB0aGlzIGZpbHRlciBtYXkgYWNjZXB0IGluIGl0cyBtZXRob2QuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX2ZpbHRlciggJHRhZywgJHByaW9yaXR5ID0gMTAsICRhY2NlcHRlZF9hcmdzID0gMSApIHsKCQlpZiAoICEgaXNfb2JqZWN0KCBzZWxmOjokX2ZpbHRlcnMgKSApIHsKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnZmlsdGVycycgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnICAgICAgICAgICAgID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9maWx0ZXIoICR0YWcsIGFycmF5KCAmc2VsZjo6JF9maWx0ZXJzLCAkY2FsbGJhY2tfbWV0aG9kICksICRwcmlvcml0eSwgJGFjY2VwdGVkX2FyZ3MgKTsKCX0gLy8gRW5kIGFkZF9maWx0ZXIoKS4KCgkvKioKCSAqIFJlZ2lzdGVycyBhIFdvcmRQcmVzcyBzaG9ydGNvZGUuIFNob3J0Y29kZSBvZiB0aGUgbmFtZSAkdGFnIHdpbGwgY2FsbCB0aGUgbWV0aG9kIGluIC9jb250cm9sbGVycy9zaG9ydGNvZGVzLnBocCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcvYXJyYXkgJHRhZyAgVGFnIC8gc2x1ZyBmb3IgdGhlIHNob3J0Y29kZS4gSWYgYW4gYXJyYXkgdGhlIGZpcnN0IGl0ZW0gaXMgdGhlIHRhZywgdGhlIHNlY29uZCBpcyBhbiBvcHRpb25hbCBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYWRkX3Nob3J0Y29kZSggJHRhZyApIHsKCQlpZiAoICEgaXNfb2JqZWN0KCBzZWxmOjokX3Nob3J0Y29kZXMgKSApIHsKCQkJc2VsZjo6X2luaXRfY29yZV9jb250cm9sbGVyKCAnc2hvcnRjb2RlcycgKTsgfQoJCWlmICggaXNfYXJyYXkoICR0YWcgKSApIHsgLy8gSWYgYXJyYXkgdGhlbiBmaXJzdCBwYXJhbSBpcyB0YWcsIHNlY29uZCBwYXJhbSBpcyBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnWzFdOwoJCQkkdGFnICAgICAgICAgICAgID0gJHRhZ1swXTsKCQl9IGVsc2UgeyAvLyBObyBjdXN0b20gbWV0aG9kIG5hbWUgc28gdGFnIGFuZCBjYWxsYmFjayBtZXRob2QgbmFtZSBhcmUgdGhlIHNhbWUuCgkJCSRjYWxsYmFja19tZXRob2QgPSAkdGFnOwoJCQlpZiAoIHN0cnBvcyggJHRhZywgJy4nICkgIT09IGZhbHNlICkgewoJCQkJZWNobyAne1dhcm5pbmc6IFlvdXIgdGFnIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gVGFnIG5hbWVzIGFyZSBlcXVhbCB0byB0aGUgUEhQIG1ldGhvZCB0aGF0IGlzIGNhbGxlZCBiYWNrIHNvIHRoZXkgbXVzdCBjb25mb3JtIHRvIFBIUCBtZXRob2QgbmFtZSBzdGFuZGFyZHMuIEZvciBjdXN0b20gY2FsbGJhY2sgbWV0aG9kIG5hbWVzIHVzZSBhbiBhcnJheSBmb3IgdGhlIHRhZyBwYXJhbWV0ZXIgaW4gdGhlIGZvcm06IGFycmF5KCBcJ3RhZ1wnLCBcJ2NhbGxiYWNrX25hbWVcJyApLn0nOwoJCQl9CgkJfQoJCWFkZF9zaG9ydGNvZGUoICR0YWcsIGFycmF5KCAmc2VsZjo6JF9zaG9ydGNvZGVzLCAkY2FsbGJhY2tfbWV0aG9kICkgKTsKCX0gLy8gRW5kIGFkZF9zaG9ydGNvZGUoKS4KCgkvKioKCSAqIFJlZ2lzdGVycyB0aGUgVUkgY2xhc3MgaW50byB0aGUgcGx1Z2luYnVkZHkgZnJhbWV3b3JrIGZvciBwYWdlcy4gUmVnaXN0ZXJlZCBvbiBkZW1hbmQgYnkgcGFnZXMgY29udHJvbGxlci4KCSAqCgkgKiBAc2VlIHBhZ2VzIGNvbnRyb2xsZXIKCSAqCgkgKiBAcGFyYW0gc3RyaW5nICRjbGFzc19zbHVnICBTbHVnIG9mIGNsYXNzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGluaXRfY2xhc3NfY29udHJvbGxlciggJGNsYXNzX3NsdWcgKSB7CgkJaWYgKCAhIGlzX29iamVjdCggc2VsZjo6JCRjbGFzc19zbHVnICkgKSB7CgkJCSRjbGFzc19maWxlID0gc2VsZjo6cGx1Z2luX3BhdGgoKSAuICcvcGx1Z2luYnVkZHkvY2xhc3Nlcy8nIC4gJGNsYXNzX3NsdWcgLiAnLnBocCc7CgkJCWlmICggZmlsZV9leGlzdHMoICRjbGFzc19maWxlICkgKSB7CgkJCQlyZXF1aXJlX29uY2UgJGNsYXNzX2ZpbGU7CgkJCQkkY2xhc3NfbmFtZSAgICAgICAgPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJyAuICRjbGFzc19zbHVnOwoJCQkJc2VsZjo6JCRjbGFzc19zbHVnID0gbmV3ICRjbGFzc19uYW1lKCk7CgkJCX0gZWxzZSB7CgkJCQllY2hvICd7RXJyb3I6IE1pc3NpbmcgY2xhc3MgY29udHJvbGxlciBmaWxlIGAnIC4gJGNsYXNzX2ZpbGUgLiAnYC59JzsKCQkJfQoJCX0KCX0KCgkvKioKCSAqIEluaXRpYWxpemUgYSBjb3JlIGNvbnRyb2xsZXIgY2xhc3MgKGV4OiBwYWdlcywgYWpheCwgZmlsdGVycywgZXRjKSBmb3IgcGx1Z2luYnVkZHkgZnJhbWV3b3JrIHVzYWdlLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgIE5hbWUgb2YgdGhlIGNvbnRyb2xsZXIgdG8gcmVnaXN0ZXIuIFZhbGlkIGNvbnRyb2xsZXJzOiBhY3Rpb25zLCBhamF4LCBjcm9uLCBkYXNoYm9hcmQsIGZpbHRlcnMsIHNob3J0Y29kZXMsIHBhZ2VzLgoJICovCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfaW5pdF9jb3JlX2NvbnRyb2xsZXIoICRuYW1lICkgewoJCWlmICggISBpc19hcnJheSggc2VsZjo6JG9wdGlvbnMgKSApIHsKCQkJc2VsZjo6bG9hZCgpOwoJCX0gLy8gQXNzdW1lIHdlIG5lZWQgcGx1Z2luIG9wdGlvbnMgbmVlZCBsb2FkZWQgaWYgY29udHJvbGxlcnMgYXJlIGxvYWRlZCBmb3IgdGhpcyBzZXNzaW9uLgoKCQlyZXF1aXJlX29uY2Ugc2VsZjo6JF9wbHVnaW5fcGF0aCAuICcvY29udHJvbGxlcnMvJyAuICRuYW1lIC4gJy5waHAnOwoJCSRjbGFzc25hbWUgICAgICAgICAgICAgICAgID0gJ3BiX2JhY2t1cGJ1ZGR5XycgLiAkbmFtZTsKCQkkaW50ZXJuYWxfY2xhc3NuYW1lICAgICAgICA9ICdfJyAuICRuYW1lOwoJCXNlbGY6OiQkaW50ZXJuYWxfY2xhc3NuYW1lID0gbmV3ICRjbGFzc25hbWUoKTsKCX0gLy8gRW5kIF9pbml0X2NvcmVfY29udHJvbGxlcigpLgoKCS8qKgoJICogRWNob3Mgb3IgcmV0dXJucyBhIFdvcmRQcmVzcyBub25jZSBmb3IgdGhlIGZyYW1ld29yay4gSGFuZGxlcyBwcmVmaXhpbmcuIFVzZSB3aXRoIGZvcm1zIGZvciBzZWN1cml0eS4gVmVyaWZpZXMgdGhlIHVzZXIgY2FtZSBmcm9tIGEgV1AgZ2VuZXJhdGVkIHBhZ2UuCgkgKgoJICogQHBhcmFtIGJvb2wgJGVjaG8gVHJ1ZTogZWNob3MgdGhlIG5vbmU7IGZhbHNlOiByZXR1cm5zIG5vbmNlLgoJICoKCSAqIEByZXR1cm4gbnVsbC9zdHJpbmcgIHdwX25vbmNlX2ZpZWxkKCkKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBub25jZSggJGVjaG8gPSB0cnVlICkgewoJCSRuYW1lICAgICAgICA9ICdfd3Bub25jZSc7CgkJJG5vbmNlX2ZpZWxkID0gd3Bfbm9uY2VfZmllbGQoICdwYl8nIC4gc2VsZjo6c2V0dGluZ3MoICduYW1lJyApIC4gJy1ub25jZScsICRuYW1lLCB0cnVlLCBmYWxzZSApOwoJCSRub25jZV9pZCAgICA9ICRuYW1lIC4gJ18nIC4gdW5pcWlkKCk7CgkJJG5vbmNlX2ZpZWxkID0gc3RyX3JlcGxhY2UoIGFycmF5KCAnIGlkPSInIC4gJG5hbWUsICcgaWQ9XCcnIC4gJG5hbWUgKSwgYXJyYXkoICcgaWQ9IicgLiAkbm9uY2VfaWQsICcgaWQ9XCcnIC4gJG5vbmNlX2lkICksICRub25jZV9maWVsZCApOwoJCWlmICggZmFsc2UgPT09ICRlY2hvICkgewoJCQlyZXR1cm4gJG5vbmNlX2ZpZWxkOwoJCX0KCQllY2hvICRub25jZV9maWVsZDsKCX0gLy8gRW5kIG5vbmNlKCkuCgoJLyoqCgkgKiBXb3JkUHJlc3Mgbm9uY2UgZm9yIFVSTHMuIEhhbmRsZXMgcHJlZml4aW5nLiBVc2Ugd2l0aCBVUkxzIGZvciBzZWN1cml0eS4gVmVyaWZpZXMgdGhlIHVzZXIgY2FtZSBmcm9tIGEgV1AgZ2VuZXJhdGVkIHBhZ2UuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkYmFyZV91cmwgIFVSTCB0byBub25jZS4KCSAqCgkgKiBAcmV0dXJuIHN0cmluZyB3cF9ub25jZV91cmwoKQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG5vbmNlX3VybCggJGJhcmVfdXJsICkgewoJCXJldHVybiB3cF9ub25jZV91cmwoICRiYXJlX3VybCwgJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ25hbWUnICkgLiAnLW5vbmNlJyApOwoJfQoKCS8qKgoJICogVmVyaWZpZXMgdGhlIG5vbmNlIHN1Ym1pdHRlZCBpbiBmb3JtLgoJICogU2NyaXB0IGRpZSgpJ3Mgb24gZmFpbHVyZQoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHZlcmlmeV9ub25jZSgpIHsKCQljaGVja19hZG1pbl9yZWZlcmVyKCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnbmFtZScgKSAuICctbm9uY2UnICk7Cgl9IC8vIEVuZCB2ZXJpZnlfbm9uY2UoKS4KCgkvKioKCSAqIExvYWQgYSBKYXZhU2NyaXB0IGZpbGUgaW50byB0aGUgcGFnZS4gSGFuZGxlcyBwcmVmaXhlZCwgZW5xdWV1aW5nLCBldGMuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkc2NyaXB0ICAgICAgIElmIGEgLmpzIGZpbGUgaXMgaW5jbHVkZWQgdGhlbiBhIGZpbGUgaW4gdGhlIGpzIGRpcmVjdG9yeSBpcyBsb2FkZWQ7IGVsc2UgbG9hZHMgYSBidWlsdC1pbiBuYW1lZCBsaWJyYXJ5IHNjcmlwdC4KCSAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeDogbG9hZF9zY3JpcHQoICdzb3J0LmpzJyApIHdpbGwgbG9hZCAvd3AtY29udGVudC9wbHVnaW5zL215X3BsdWdpbi9qcy9zb3J0LmpzOwoJICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRfc2NyaXB0KCAnanF1ZXJ5JyApIHdpbGwgbG9hZCBpbnRlcm5hbCBqcXVlcnkgbGlicmFyeSBpbiBXb3JkUHJlc3MgaWYgaXQgZXhpc3RzLgoJICogQHBhcmFtIGJvb2wgICAkY29yZV9zY3JpcHQgIElmIHRydWUgc2NyaXB0cyBhcmUgbG9hZGVkIGZyb20gL3BsdWdpbmJ1ZGR5L2pzL1NDUklQVC5qcy4gRWxzZSBzY3JpcHRzIGxvYWRlZCBmcm9tIHBsdWdpbidzIGpzIGRpcmVjdG9yeS4KCSAqIEBwYXJhbSBhcnJheSAgJHZhcnMgICAgICAgICBMb2NhbGl6ZWQgdmFyaWFibGVzLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGxvYWRfc2NyaXB0KCAkc2NyaXB0LCAkY29yZV9zY3JpcHQgPSBmYWxzZSwgJHZhcnMgPSBhcnJheSgpICkgewoJCWlmICggc3Ryc3RyKCAkc2NyaXB0LCAnLmpzJyApICkgeyAvLyBMb2FkaW5nIGEgZmlsZSBzcGVjaWZpY2FsbHkuCgkJCWlmICggdHJ1ZSA9PT0gJGNvcmVfc2NyaXB0ICkgewoJCQkJaWYgKCBwYl9pc19zdGFuZGFsb25lKCkgKSB7CgkJCQkJJHVybF9wYXRoID0gJ2ltcG9ydGJ1ZGR5L3BsdWdpbmJ1ZGR5L2pzLyc7CgkJCQl9IGVsc2UgewoJCQkJCSR1cmxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3VybCAuICcvcGx1Z2luYnVkZHkvanMvJzsKCQkJCX0KCQkJCSRsb2NhbF9wYXRoICA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL3BsdWdpbmJ1ZGR5L2pzLyc7CgkJCQkkc2NyaXB0X25hbWUgPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfY29yZV8nIC4gJHNjcmlwdDsKCQkJfSBlbHNlIHsKCQkJCWlmICggcGJfaXNfc3RhbmRhbG9uZSgpICkgewoJCQkJCSR1cmxfcGF0aCA9ICdpbXBvcnRidWRkeS9qcy8nOwoJCQkJfSBlbHNlIHsKCQkJCQkkdXJsX3BhdGggPSBzZWxmOjokX3BsdWdpbl91cmwgLiAnL2pzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCAgPSBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy9qcy8nOwoJCQkJJHNjcmlwdF9uYW1lID0gJ3BiXycgLiBzZWxmOjpzZXR0aW5ncyggJ3NsdWcnICkgLiAnXycgLiAkc2NyaXB0OwoJCQl9CgoJCQlpZiAoICEgd3Bfc2NyaXB0X2lzKCAkc2NyaXB0X25hbWUgKSApIHsgLy8gT25seSBsb2FkIHNjcmlwdCBvbmNlLgoJCQkJaWYgKCBmaWxlX2V4aXN0cyggJGxvY2FsX3BhdGggLiAkc2NyaXB0ICkgKSB7IC8vIExvYWQgb3VyIGxvY2FsIHNjcmlwdCBpZiBmaWxlIGV4aXN0cy4KCQkJCQl3cF9lbnF1ZXVlX3NjcmlwdCggJHNjcmlwdF9uYW1lLCAkdXJsX3BhdGggLiAkc2NyaXB0LCBhcnJheSgpLCBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICd2ZXJzaW9uJyApICk7CgkJCQkJd3BfcHJpbnRfc2NyaXB0cyggJHNjcmlwdF9uYW1lICk7CgkJCQl9IGVsc2UgewoJCQkJCWVjaG8gJzxzY3JpcHQ+Y29uc29sZS53YXJuKCBcJ3tFcnJvcjogSmF2YXNjcmlwdCBmaWxlIHdhcyBzZXQgdG8gbG9hZCB0aGF0IGRpZCBub3QgZXhpc3Q6IGAnIC4gZXNjX2h0bWwoICR1cmxfcGF0aCAuICRzY3JpcHQgKSAuICdgfVwnKTs8L3NjcmlwdD4nOwoJCQkJfQoJCQl9CgkJfSBlbHNlIHsgLy8gTm90IGEgc3BlY2lmaWMgZmlsZS4KCQkJaWYgKCAhIHdwX3NjcmlwdF9pcyggJHNjcmlwdCwgJ2RvbmUnICkgKSB7IC8vIE9ubHkgUFJJTlQgc2NyaXB0IG9uY2UuIENoZWNrcyB0aGUgZG9uZSB3cHNjcmlwdCBsaXN0IHRvIHNlZSBpZiBpdCdzIGJlZW4gcHJpbnRlZCB5ZXQgb3Igbm90LgoJCQkJaWYgKCBjb3VudCggJHZhcnMgKSApIHsKCQkJCQl3cF9sb2NhbGl6ZV9zY3JpcHQoICRzY3JpcHQsICdiYWNrdXBidWRkeV92YXJzJywgJHZhcnMgKTsKCQkJCX0KCQkJCXdwX2VucXVldWVfc2NyaXB0KCAkc2NyaXB0ICk7CgkJCQl3cF9wcmludF9zY3JpcHRzKCAkc2NyaXB0ICk7CgkJCX0KCQl9Cgl9IC8vIEVuZCBsb2FkX3NjcmlwdCgpLgoKCS8qKgoJICogTG9hZCBhIENTUyBmaWxlIGludG8gdGhlIHBhZ2UuIEhhbmRsZXMgcHJlZml4ZWQsIGVucXVldWluZywgZXRjLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJHN0eWxlICAgICAgIElmIGEgLmNzcyBmaWxlIGlzIGluY2x1ZGVkIHRoZW4gYSBmaWxlIGluIHRoZSBjc3MgZGlyZWN0b3J5IGlzIGxvYWRlZDsgZWxzZSBsb2FkcyBhIGJ1aWx0LWluIG5hbWVkIGxpYnJhcnkgc3R5bGUuCgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeDogbG9hZF9zdHlsZSggJ3NvcnQuY3NzJyApIHdpbGwgbG9hZCAvd3AtY29udGVudC9wbHVnaW5zL215X3BsdWdpbi9jc3Mvc29ydC5jc3M7CgkgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkX3N0eWxlKCAnZGFzaGJvYXJkJyApIHdpbGwgbG9hZCBpbnRlcm5hbCBkYXNoYm9hcmQgY3NzIGluIFdvcmRQcmVzcyBpZiBpdCBleGlzdHMuCgkgKiBAcGFyYW0gYm9vbCAgICRjb3JlX3N0eWxlICBJZiB0cnVlIHN0eWxlcyBhcmUgbG9hZGVkIGZyb20gL3BsdWdpbmJ1ZGR5L2Nzcy9TVFlMRS5jc3MuIEVsc2Ugc3R5bGVzIGxvYWRlZCBmcm9tIHBsdWdpbidzIGNzcyBkaXJlY3RvcnkuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9zdHlsZSggJHN0eWxlLCAkY29yZV9zdHlsZSA9IGZhbHNlICkgewoJCWlmICggc3Ryc3RyKCAkc3R5bGUsICcuY3NzJyApICkgeyAvLyBMb2FkaW5nIGEgZmlsZSBzcGVjaWZpY2FsbHkuCgkJCWlmICggdHJ1ZSA9PT0gJGNvcmVfc3R5bGUgKSB7CgkJCQlpZiAoIHBiX2lzX3N0YW5kYWxvbmUoKSApIHsKCQkJCQkkdXJsX3BhdGggPSAnaW1wb3J0YnVkZHkvcGx1Z2luYnVkZHkvY3NzLyc7CgkJCQl9IGVsc2UgewoJCQkJCSR1cmxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3VybCAuICcvcGx1Z2luYnVkZHkvY3NzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL3BsdWdpbmJ1ZGR5L2Nzcy8nOwoJCQkJJGNvcmVfdHlwZSAgPSAnY29yZSc7CgkJCX0gZWxzZSB7CgkJCQlpZiAoIHBiX2lzX3N0YW5kYWxvbmUoKSApIHsKCQkJCQkkdXJsX3BhdGggPSAnaW1wb3J0YnVkZHkvY3NzLyc7CgkJCQl9IGVsc2UgewoJCQkJCSR1cmxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3VybCAuICcvY3NzLyc7CgkJCQl9CgkJCQkkbG9jYWxfcGF0aCA9IHNlbGY6OiRfcGx1Z2luX3BhdGggLiAnL2Nzcy8nOwoJCQkJJGNvcmVfdHlwZSAgPSAnbm9uY29yZSc7CgkJCX0KCQkJJHN0eWxlX25hbWUgPSAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfJyAuICRjb3JlX3R5cGUgLiAnXycgLiAkc3R5bGU7CgkJCWlmICggISB3cF9zdHlsZV9pcyggJHN0eWxlX25hbWUgKSApIHsgLy8gT25seSBsb2FkIHN0eWxlIG9uY2UuCgkJCQlpZiAoIGZpbGVfZXhpc3RzKCAkbG9jYWxfcGF0aCAuICRzdHlsZSApICkgeyAvLyBMb2FkIG91ciBsb2NhbCBzdHlsZSBpZiBmaWxlIGV4aXN0cy4KCQkJCQl3cF9lbnF1ZXVlX3N0eWxlKCAkc3R5bGVfbmFtZSwgJHVybF9wYXRoIC4gJHN0eWxlLCBhcnJheSgpLCBwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoICd2ZXJzaW9uJyApICk7CgkJCQkJd3BfcHJpbnRfc3R5bGVzKCAkc3R5bGVfbmFtZSApOwoJCQkJfSBlbHNlIHsKCQkJCQllY2hvICd7RXJyb3I6IENTUyBmaWxlIHdhcyBzZXQgdG8gbG9hZCB0aGF0IGRpZCBub3QgZXhpc3Q6IGAnIC4gJHVybF9wYXRoIC4gJHN0eWxlIC4gJ2B9JzsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7IC8vIE5vdCBhIHNwZWNpZmljIGZpbGUuCgkJCWlmICggISB3cF9zdHlsZV9pcyggJHN0eWxlICkgKSB7IC8vIE9ubHkgbG9hZCBzdHlsZSBvbmNlLgoJCQkJd3BfZW5xdWV1ZV9zdHlsZSggJHN0eWxlICk7CgkJCQl3cF9wcmludF9zdHlsZXMoICRzdHlsZSApOwoJCQl9CgkJfQoJfSAvLyBFbmQgbG9hZF9zdHlsZSgpLgoKCS8qKgoJICogTG9hZHMgYSB2aWV3LiBUeXBpY2FsbHkgY2FsbGVkIGZyb20gd2l0aGluIGEgY29udHJvbGxlci4gRGF0YSBwYXNzZWQgYXMgc2Vjb25kIGFyZ3VtZW50IHdpbGwgaGFzIGV4dHJhY3QoKSByYW4gb24gaXQgd2l0aGluIHRoZSB2aWV3IGZvciBlYXN5IHZhcmlhYmxlIGFjY2Vzcy4KCSAqCgkgKiBAcGFyYW0gc3RyaW5nICR2aWV3X25hbWUgICAgICAgICBOYW1lIG9mIHZpZXcuIENvcnJlc3BvbmRzIHRvIHRoZSB2aWV3IGZpbGVuYW1lOiAvdmlld3Mvdmlld19uYW1lLnBocC4KCSAqIEBwYXJhbSBhcnJheSAgJHBsdWdpbmJ1ZGR5X2RhdGEgIEFycmF5IG9mIHZhcmlhYmxlcyB0byBiZSBleHRyYWN0ZWQgZm9yIHVzZSBieSB0aGUgdmlldy4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBsb2FkX3ZpZXcoICR2aWV3X25hbWUsICRwbHVnaW5idWRkeV9kYXRhID0gYXJyYXkoKSApIHsKCQkvLyBWYXJpYWJsZSBuYW1lZCB0aGlzIHdheSBhcyB0aGUgaW5jbHVkZWQgZmlsZSBpbmhlcml0cyB0aGlzIHZhcmlhYmxlIGFuZCB3ZSBkb24ndCB3YW50IGFuIGFjY2lkZW50YWwgY29sbGlzaW9uLgoJCSRwbHVnaW5idWRkeV92aWV3X2ZpbGUgPSBzZWxmOjokX3BsdWdpbl9wYXRoIC4gJy92aWV3cy8nIC4gJHZpZXdfbmFtZSAuICcucGhwJzsKCQlpZiAoIGZpbGVfZXhpc3RzKCAkcGx1Z2luYnVkZHlfdmlld19maWxlICkgKSB7CgkJCXVuc2V0KCAkdmlld19uYW1lICk7CgkJCWlmICggaXNfYXJyYXkoICRwbHVnaW5idWRkeV9kYXRhICkgKSB7CgkJCQlleHRyYWN0KCAkcGx1Z2luYnVkZHlfZGF0YSApOwoJCQl9IGVsc2UgewoJCQkJZWNobyAne1dhcm5pbmc6IERhdGEgcGFyYW1ldGVyIHBhc3NlZCB0byB2aWV3IHdhcyBub3QgYW4gYXJyYXkufSc7CgkJCX0KCQkJcmVxdWlyZSAkcGx1Z2luYnVkZHlfdmlld19maWxlOwoJCX0gZWxzZSB7CgkJCWVjaG8gJ3tJTlZBTElEIFZJRVc6IGAnIC4gJHZpZXdfbmFtZSAuICdgOyBmaWxlIG5vdCBmb3VuZC59JzsKCQl9Cgl9IC8vIEVuZCBsb2FkX3ZpZXcoKS4KCgkvKioKCSAqIExvYWRzIGEgY29udHJvbGxlci4gQ29udHJvbGxlcnMgbWF5IGxvYWQgY29udHJvbGxlcnMuIENvbnRyb2xsZXIgdXNlcyByZXF1aXJlX29uY2UgdG8gYXZvaWQgcHJvYmxlbXMuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkY29udHJvbGxlciAgTmFtZSBvZiBjb250cm9sbGVyLiBDb3JyZXNwb25kcyB0byB0aGUgY29udHJvbGxlciBmaWxlbmFtZTogL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXJfbmFtZS5waHAuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gbG9hZF9jb250cm9sbGVyKCAkY29udHJvbGxlciApIHsKCQkvLyBVc2luZyB0aGlzIG1ldGhvZCBzbyBsb2FkX2NvbnRyb2xsZXIoKSBtYXkgYmUgdXNlZCBhbnl3aGVyZS4KCQlpZiAoIGZpbGVfZXhpc3RzKCBzZWxmOjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy8nIC4gJGNvbnRyb2xsZXIgLiAnLnBocCcgKSApIHsKCQkJcmVxdWlyZV9vbmNlIHNlbGY6OnBsdWdpbl9wYXRoKCkgLiAnL2NvbnRyb2xsZXJzLycgLiAkY29udHJvbGxlciAuICcucGhwJzsKCQl9IGVsc2UgewoJCQllY2hvICd7RXJyb3I6IFVuYWJsZSB0byBsb2FkIHBhZ2UgY29udHJvbGxlciBgJyAuICRjb250cm9sbGVyIC4gJ2A7IGZpbGUgbm90IGZvdW5kLn0nOwoJCX0KCX0gLy8gRW5kIGxvYWRfY29udHJvbGxlcigpLgoKCS8qKgoJICogUmVnaXN0ZXJzIGEgd2lkZ2V0LiBXaWxsIHJlZ2lzdGVyIHdpZGdldCBjbGFzcyBpbiAvY29udHJvbGxlcnMvd2lkZ2V0L3NsdWcucGhwLiBXaWRnZXQgY2xhc3MgZXh0ZW5kIFdQX1dpZGdldHMuCgkgKgoJICogQHBhcmFtIHN0cmluZyAkc2x1ZyAgTmFtZSAvIHNsdWcgZm9yIHdpZGdldC4gTXVzdCBtYXRjaCBmaWxlbmFtZSBpbiBjb250cm9sbGVyc1x3aWRnZXRzXCBkaXJlY3RvcnkuIENsYXNzIG5hbWUgaW4gdGhlIGZvcm1hdDogcGJfe1BMVUdJTlNMVUd9X3dpZGdldF97V0lER0VUU0xVR30uCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmVnaXN0ZXJfd2lkZ2V0KCAkc2x1ZyApIHsKCQlpZiAoIGZpbGVfZXhpc3RzKCBzZWxmOjpwbHVnaW5fcGF0aCgpIC4gJy9jb250cm9sbGVycy93aWRnZXRzLycgLiAkc2x1ZyAuICcucGhwJyApICkgewoJCQlyZXF1aXJlIHNlbGY6OnBsdWdpbl9wYXRoKCkgLiAnL2NvbnRyb2xsZXJzL3dpZGdldHMvJyAuICRzbHVnIC4gJy5waHAnOwoJCQlhZGRfYWN0aW9uKCAnd2lkZ2V0c19pbml0JywgYXJyYXkoICdwYl9iYWNrdXBidWRkeScsICdkb19yZWdpc3Rlcl93aWRnZXQnICkgKTsKCQl9IGVsc2UgewoJCQllY2hvICd7RXJyb3IgIzM0NDQ1NDg5MjI6IFVuYWJsZSB0byBsb2FkIHdpZGdldCBmaWxlIGBjb250cm9sbGVycy93aWRnZXRzLycgLiAkc2x1ZyAuICcucGhwYC59JzsKCQl9Cgl9IC8vIEVuZCByZWdpc3Rlcl93aWRnZXQoKS4KCgkvKioKCSAqIEhhbmRsZSB0aGUgd2lkZ2V0IHJlZ2lzdHJhdGlvbi4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBkb19yZWdpc3Rlcl93aWRnZXQoKSB7CgkJcmVnaXN0ZXJfd2lkZ2V0KCAncGJfJyAuIHNlbGY6OnNldHRpbmdzKCAnc2x1ZycgKSAuICdfd2lkZ2V0XycgLiAkc2x1ZyApOwoJfQoKCS8qKgoJICogUmVtb3ZlcyBhcnJheSB2YWx1ZXMgaW4gJHJlbW92ZSBmcm9tICRhcnJheS4KCSAqCgkgKiBAcGFyYW0gYXJyYXkgJGFycmF5ICAgU291cmNlIGFycmF5LiBUaGlzIHdpbGwgaGF2ZSB2YWx1ZXMgcmVtb3ZlZCBhbmQgYmUgcmV0dXJuZWQuCgkgKiBAcGFyYW0gYXJyYXkgJHJlbW92ZSAgQXJyYXkgb2YgdmFsdWVzIHRvIHNlYXJjaCBmb3IgaW4gJGFycmF5IGFuZCByZW1vdmUuCgkgKgoJICogQHJldHVybiBhcnJheSAgUmV0dXJucyBhcnJheSAkYXJyYXkgc3RyaXBwZWQgb2YgYWxsIHZhbHVlcyBmb3VuZCBpbiAkcmVtb3ZlCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYXJyYXlfcmVtb3ZlKCAkYXJyYXksICRyZW1vdmUgKSB7CgkJaWYgKCAhIGlzX2FycmF5KCAkcmVtb3ZlICkgKSB7CgkJCSRyZW1vdmUgPSBhcnJheSggJHJlbW92ZSApOwoJCX0KCQlyZXR1cm4gYXJyYXlfdmFsdWVzKCBhcnJheV9kaWZmKCAkYXJyYXksICRyZW1vdmUgKSApOwoJfSAvLyBFbmQgYXJyYXlfcmVtb3ZlKCkuCgoJLyoqCgkgKiBBdHRlbXB0IHRvIHN0cm9uZ2FybSBhIGZsdXNoIHRvIGFjdHVhbGx5IHdvcmsuCgkgKiBQcmV2ZW50IGZsdXNoaW5nIGJ5IGFkZGluZyB0aGlzIHRvIHdwLWNvbmZpZy5waHA6CgkgKiAgICAgZGVmaW5lKCAnQkFDS1VQQlVERFlfTk9GTFVTSCcsIHRydWUgKTsKCSAqIE9SCgkgKiAgICAgc2V0IGFkdmFuY2VkIG9wdGlvbiB0byBwcmV2ZW50IGZsdXNoCgkgKgoJICogQHBhcmFtIGJvb2wgJGZvcmNlICBGb3JjZSBmbHVzaC4KCSAqCgkgKiBAcmV0dXJuIG51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBmbHVzaCggJGZvcmNlID0gZmFsc2UgKSB7CgkJaWYgKCB0cnVlID09PSAkZm9yY2UgKSB7CgkJCXNlbGY6OiRfaGFzX2ZsdXNoZWQgPSBmYWxzZTsKCQl9CgoJCWlmICggZGVmaW5lZCggJ0JBQ0tVUEJVRERZX05PRkxVU0gnICkgJiYgKCBCQUNLVVBCVUREWV9OT0ZMVVNIID09PSB0cnVlICkgKSB7IC8vIFNvbWUgc2VydmVycyBzZWVtIHRvIGRpZSBvbiBtdWx0aXBsZSBmbHVzaGVzIGluIHRoZSBzYW1lIHBhZ2Vsb2FkLiBEZWZpbmUgdGhpcyB0byBwcmV2ZW50IGZsdXNoaW5nLgoJCQlyZXR1cm47CgkJfQoJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9ucyApICYmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncHJldmVudF9mbHVzaCddICkgKSAmJiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3ByZXZlbnRfZmx1c2gnXSApICkgewoJCQlyZXR1cm47CgkJfQoJCWlmICggdHJ1ZSAhPT0gc2VsZjo6JF9oYXNfZmx1c2hlZCApIHsgLy8gT25seSBydW4gdGhpcyBvbmNlLgoJCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cyggJ2FwYWNoZV9zZXRlbnYnICkgKSB7CgkJCQlAYXBhY2hlX3NldGVudiggJ25vLWd6aXAnLCAxICk7IC8vIENvbXByZXNzaW9uIGNvdWxkIGNhdXNlIHNlcnZlciB0byB3YWl0IGZvciBwYWdlIHRvIGZpbmlzaCBiZWZvcmUgcHJvY2VlZGluZy4gVHVybiBvZmYgY29tcHJlc3Npb24uCgkJCX0KCQkJQGluaV9zZXQoICd6bGliLm91dHB1dF9jb21wcmVzc2lvbicsIDAgKTsgLy8gQ29tcHJlc3Npb24gY291bGQgY2F1c2Ugc2VydmVyIHRvIHdhaXQgZm9yIHBhZ2UgdG8gZmluaXNoIGJlZm9yZSBwcm9jZWVkaW5nLiBUdXJuIG9mZiBjb21wcmVzc2lvbi4KCQkJc2VsZjo6JF9oYXNfZmx1c2hlZCA9IHRydWU7CgkJfQoJCWZsdXNoKCk7Cgl9IC8vIEVuZCBmbHVzaCgpLgoKCS8qKgoJICogUmVzZXQgcGx1Z2luIG9wdGlvbnMgdG8gZGVmYXVsdHMuIEdldHRpbmcgc3RhcnRlZCBwYWdlIHVzZXMgdGhpcy4KCSAqCgkgKiBAcmV0dXJuIGJvb2wgIFRydWUgb24gc3VjY2VzczsgZmFsc2Ugb3RoZXJ3aXNlLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIHJlc2V0X2RlZmF1bHRzKCkgewoJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5OjokX3NldHRpbmdzWydkZWZhdWx0X29wdGlvbnMnXSApICkgewoJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnMgPSBwYl9iYWNrdXBidWRkeTo6JF9zZXR0aW5nc1snZGVmYXVsdF9vcHRpb25zJ107CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzYXZlKCk7CgkJCXJldHVybiB0cnVlOwoJCX0KCQlyZXR1cm4gZmFsc2U7Cgl9IC8vIEVuZCByZXNldF9kZWZhdWx0cygpLgoKCS8qKgoJICogTG9ncyBjYWxsZXIgdG8gZXJyb3JfbG9nKCkgaWYgeGRlYnVnIGF2YWlsYWJsZS4KCSAqCgkgKiBAcmV0dXJuIG51bGwKCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiB4ZGVidWcoKSB7CgkJaWYgKCAhIGZ1bmN0aW9uX2V4aXN0cyggJ3hkZWJ1Z19jYWxsX2ZpbGUnICkgKSB7CgkJCXJldHVybjsKCQl9CgkJZXJyb3JfbG9nKCAnQ2FsbGVkIEAgJyAuIHhkZWJ1Z19jYWxsX2ZpbGUoKSAuICc6JyAuIHhkZWJ1Z19jYWxsX2xpbmUoKSAuICcgZnJvbSAnIC4geGRlYnVnX2NhbGxfZnVuY3Rpb24oKSApOwoJfQoKCS8qKgoJICogVHJhY2sgUmVjZW50IEVkaXRzCgkgKgoJICogQHBhcmFtIHN0cmluZyAkYWN0aW9uICAgIEFjdGlvbiBob3cgaXQgd2FzIHRyYWNrZWQuCgkgKiBAcGFyYW0gbWl4ZWQgICRyZWxldmFudCAgUmVsZXZhbnQgY29udGVudCBvciBvYmplY3QuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gdHJhY2tfZWRpdCggJGFjdGlvbiwgJHJlbGV2YW50ICkgewoJCSRpbmNyZW1lbnRfY291bnRlciA9IGZhbHNlOwoJCSRlZGl0X3RlbXBsYXRlICAgICA9IGFycmF5KAoJCQkndHlwZScgICAgICA9PiAndW5rbm93bicsCgkJCSdhY3Rpb24nICAgID0+ICRhY3Rpb24sCgkJCSd0aW1lc3RhbXAnID0+IGN1cnJlbnRfdGltZSggJ215c3FsJyApLAoJCQknbW9kaWZpZWQnICA9PiAxLAoJCQknZGVsZXRpb24nICA9PiBmYWxzZSwKCQkpOwoKCQkvLyBSZW1vdmUgdGhlIHBvc3RfY29udGVudCB2YWx1ZSB0byByZWR1Y2Ugc2l6ZSBvZiB0aGUgc3RvcmVkIG9iamVjdC4KCQlpZiAoIGlzX2EoICRyZWxldmFudCwgJ1dQX1Bvc3QnICkgJiYgaXNzZXQoICRyZWxldmFudC0+cG9zdF9jb250ZW50ICkgKSB7CgkJCSRyZWxldmFudC0+cG9zdF9jb250ZW50ID0gJyc7CgkJfQoKCQlpZiAoICdzYXZlX3Bvc3QnID09PSAkYWN0aW9uIHx8ICdwb3N0X3VwZGF0ZWQnID09PSAkYWN0aW9uICkgewoJCQlpZiAoICEgaXNfb2JqZWN0KCAkcmVsZXZhbnQgKSB8fCAhIGlzc2V0KCAkcmVsZXZhbnQtPklEICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCSRwb3N0X2lkID0gJHJlbGV2YW50LT5JRDsKCgkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF0gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF1bJ21vZGlmaWVkJ10rKzsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF1bJ3Bvc3QnXSAgICAgID0gJHJlbGV2YW50OwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXVsndGltZXN0YW1wJ10gPSBjdXJyZW50X3RpbWUoICdteXNxbCcgKTsKCQkJfSBlbHNlIHsKCQkJCSRpbmNyZW1lbnRfY291bnRlciA9ICdwb3N0JzsgLy8gVHJpZ2dlciBhIGNvdW50ZXIgaW5jcmVtZW50LgoJCQkJJHNhdmVfcG9zdCAgICAgICAgID0gYXJyYXlfbWVyZ2UoICRlZGl0X3RlbXBsYXRlLCBhcnJheSgKCQkJCQkndHlwZScgICAgPT4gJ3Bvc3QnLAoJCQkJCSdwb3N0X2lkJyA9PiAkcG9zdF9pZCwKCQkJCQkncG9zdCcgICAgPT4gJHJlbGV2YW50LAoJCQkJKSApOwoKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF0gPSAkc2F2ZV9wb3N0OwoJCQl9CgkJfSBlbHNlaWYgKCAnaW5zZXJ0X3Bvc3QnID09PSAkYWN0aW9uICkgewoJCQlpZiAoICEgaXNfb2JqZWN0KCAkcmVsZXZhbnQgKSB8fCAhIGlzc2V0KCAkcmVsZXZhbnQtPklEICkgKSB7CgkJCQlyZXR1cm47CgkJCX0KCgkJCSRwb3N0X2lkID0gJHJlbGV2YW50LT5JRDsKCgkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF0gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF1bJ21vZGlmaWVkJ10rKzsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF1bJ3Bvc3QnXSAgICAgID0gJHJlbGV2YW50OwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXVsndGltZXN0YW1wJ10gPSBjdXJyZW50X3RpbWUoICdteXNxbCcgKTsKCQkJfSBlbHNlIHsKCQkJCSRpbmNyZW1lbnRfY291bnRlciA9ICdwb3N0JzsgLy8gVHJpZ2dlciBhIGNvdW50ZXIgaW5jcmVtZW50LgoJCQkJJGluc2VydF9wb3N0ICAgICAgID0gYXJyYXlfbWVyZ2UoICRlZGl0X3RlbXBsYXRlLCBhcnJheSgKCQkJCQkndHlwZScgICAgPT4gJ3Bvc3QnLAoJCQkJCSdwb3N0X2lkJyA9PiAkcG9zdF9pZCwKCQkJCQkncG9zdCcgICAgPT4gJHJlbGV2YW50LAoJCQkJKSApOwoKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF0gPSAkaW5zZXJ0X3Bvc3Q7CgkJCX0KCQl9IGVsc2VpZiAoICd0cmFzaF9wb3N0JyA9PT0gJGFjdGlvbiApIHsKCQkJaWYgKCBpc19pbnQoICRyZWxldmFudCApICkgewoJCQkJJHBvc3RfaWQgPSAkcmVsZXZhbnQ7CgkJCX0gZWxzZWlmICggISBpc19vYmplY3QoICRyZWxldmFudCApIHx8ICEgaXNzZXQoICRyZWxldmFudC0+SUQgKSApIHsKCQkJCXJldHVybjsKCQkJfSBlbHNlIHsKCQkJCSRwb3N0X2lkID0gJHJlbGV2YW50LT5JRDsKCQkJfQoKCQkJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXSApICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXVsnbW9kaWZpZWQnXSsrOwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXVsnZGVsZXRpb24nXSAgPSB0cnVlOwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJHBvc3RfaWQgXVsncG9zdCddICAgICAgPSAkcmVsZXZhbnQ7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAkcG9zdF9pZCBdWyd0aW1lc3RhbXAnXSA9IGN1cnJlbnRfdGltZSggJ215c3FsJyApOwoJCQl9IGVsc2UgewoJCQkJJGluY3JlbWVudF9jb3VudGVyID0gJ3Bvc3QnOyAvLyBUcmlnZ2VyIGEgY291bnRlciBpbmNyZW1lbnQuCgkJCQkkZGVsZXRlX3Bvc3QgICAgICAgPSBhcnJheV9tZXJnZSggJGVkaXRfdGVtcGxhdGUsIGFycmF5KAoJCQkJCSd0eXBlJyAgICAgPT4gJ3Bvc3QnLAoJCQkJCSdwb3N0X2lkJyAgPT4gJHBvc3RfaWQsCgkJCQkJJ3Bvc3QnICAgICA9PiBpc19vYmplY3QoICRyZWxldmFudCApID8gJHJlbGV2YW50IDogZmFsc2UsCgkJCQkJJ2RlbGV0aW9uJyA9PiB0cnVlLAoJCQkJKSApOwoKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICRwb3N0X2lkIF0gPSAkZGVsZXRlX3Bvc3Q7CgkJCX0KCQl9IGVsc2VpZiAoICd1cGRhdGVfb3B0aW9uJyA9PT0gJGFjdGlvbiApIHsKCQkJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJ29wdGlvbi0nIC4gJHJlbGV2YW50WydvcHRpb24nXSBdICkgKSB7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAnb3B0aW9uLScgLiAkcmVsZXZhbnRbJ29wdGlvbiddIF1bJ21vZGlmaWVkJ10rKzsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICdvcHRpb24tJyAuICRyZWxldmFudFsnb3B0aW9uJ10gXVsndGltZXN0YW1wJ10gPSBjdXJyZW50X3RpbWUoICdteXNxbCcgKTsKCQkJfSBlbHNlIHsKCQkJCSRpbmNyZW1lbnRfY291bnRlciA9ICdvcHRpb24nOyAvLyBUcmlnZ2VyIGEgY291bnRlciBpbmNyZW1lbnQuCgkJCQkkdXBkYXRlX29wdGlvbiAgICAgPSBhcnJheV9tZXJnZSggJGVkaXRfdGVtcGxhdGUsIGFycmF5KAoJCQkJCSd0eXBlJyAgID0+ICdvcHRpb24nLAoJCQkJCSdvcHRpb24nID0+ICRyZWxldmFudFsnb3B0aW9uJ10sCgkJCQkpICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAnb3B0aW9uLScgLiAkcmVsZXZhbnRbJ29wdGlvbiddIF0gPSAkdXBkYXRlX29wdGlvbjsKCQkJfQoJCX0gZWxzZWlmICggJ2RlbGV0ZV9vcHRpb24nID09PSAkYWN0aW9uICkgewoJCQlpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAnb3B0aW9uLScgLiAkcmVsZXZhbnRbJ29wdGlvbiddIF0gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICdvcHRpb24tJyAuICRyZWxldmFudFsnb3B0aW9uJ10gXVsnbW9kaWZpZWQnXSsrOwoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJ29wdGlvbi0nIC4gJHJlbGV2YW50WydvcHRpb24nXSBdWydkZWxldGlvbiddICA9IHRydWU7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAnb3B0aW9uLScgLiAkcmVsZXZhbnRbJ29wdGlvbiddIF1bJ3RpbWVzdGFtcCddID0gY3VycmVudF90aW1lKCAnbXlzcWwnICk7CgkJCX0gZWxzZSB7CgkJCQkkaW5jcmVtZW50X2NvdW50ZXIgPSAnb3B0aW9uJzsgLy8gVHJpZ2dlciBhIGNvdW50ZXIgaW5jcmVtZW50LgoJCQkJJGRlbGV0ZV9vcHRpb24gICAgID0gYXJyYXlfbWVyZ2UoICRlZGl0X3RlbXBsYXRlLCBhcnJheSgKCQkJCQkndHlwZScgICAgID0+ICdvcHRpb24nLAoJCQkJCSdvcHRpb24nICAgPT4gJHJlbGV2YW50WydvcHRpb24nXSwKCQkJCQknZGVsZXRpb24nID0+IHRydWUsCgkJCQkpICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAnb3B0aW9uLScgLiAkcmVsZXZhbnRbJ29wdGlvbiddIF0gPSAkZGVsZXRlX29wdGlvbjsKCQkJfQoJCX0gZWxzZWlmICggJ2FjdGl2YXRlX3BsdWdpbicgPT09ICRhY3Rpb24gfHwgJ2RlYWN0aXZhdGVfcGx1Z2luJyA9PT0gJGFjdGlvbiB8fCAndXBkYXRlX3BsdWdpbicgPT09ICRhY3Rpb24gKSB7CgkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICdwbHVnaW4tJyAuICRyZWxldmFudFsncGx1Z2luJ10gXSApICkgewoJCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyZWNlbnRfZWRpdHMnXVsgJ3BsdWdpbi0nIC4gJHJlbGV2YW50WydwbHVnaW4nXSBdWydtb2RpZmllZCddKys7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAncGx1Z2luLScgLiAkcmVsZXZhbnRbJ3BsdWdpbiddIF1bJ3RpbWVzdGFtcCddID0gY3VycmVudF90aW1lKCAnbXlzcWwnICk7CgkJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlY2VudF9lZGl0cyddWyAncGx1Z2luLScgLiAkcmVsZXZhbnRbJ3BsdWdpbiddIF1bJ2FjdGlvbiddICAgID0gJGFjdGlvbjsKCQkJfSBlbHNlIHsKCQkJCSRpbmNyZW1lbnRfY291bnRlciA9ICdwbHVnaW4nOyAvLyBUcmlnZ2VyIGEgY291bnRlciBpbmNyZW1lbnQuCgkJCQkkcGx1Z2luX2RhdGEgICAgICAgPSBhcnJheSgpOwoJCQkJaWYgKCBmaWxlX2V4aXN0cyggV1BfUExVR0lOX0RJUiAuICcvJyAuICRyZWxldmFudFsncGx1Z2luJ10gKSApIHsKCQkJCQkkZnVsbF9wbHVnaW5fZGF0YSA9IGdldF9wbHVnaW5fZGF0YSggV1BfUExVR0lOX0RJUiAuICcvJyAuICRyZWxldmFudFsncGx1Z2luJ10sIGZhbHNlICk7CgkJCQkJLy8gT25seSBzdG9yZSB3aGF0IHdlIG5lZWQuCgkJCQkJaWYgKCBpc3NldCggJGZ1bGxfcGx1Z2luX2RhdGFbJ05hbWUnXSApICkgewoJCQkJCQkkcGx1Z2luX2RhdGFbJ05hbWUnXSA9ICRmdWxsX3BsdWdpbl9kYXRhWydOYW1lJ107CgkJCQkJfQoJCQkJCWlmICggaXNzZXQoICRmdWxsX3BsdWdpbl9kYXRhWydQbHVnaW5VUkknXSApICkgewoJCQkJCQkkcGx1Z2luX2RhdGFbJ1BsdWdpblVSSSddID0gJGZ1bGxfcGx1Z2luX2RhdGFbJ1BsdWdpblVSSSddOwoJCQkJCX0KCQkJCX0KCQkJCSRwbHVnaW5fZGV0YWlsID0gYXJyYXlfbWVyZ2UoICRlZGl0X3RlbXBsYXRlLCBhcnJheSgKCQkJCQkndHlwZScgICAgICAgID0+ICdwbHVnaW4nLAoJCQkJCSdwbHVnaW4nICAgICAgPT4gJHJlbGV2YW50WydwbHVnaW4nXSwKCQkJCQkncGx1Z2luX2RhdGEnID0+ICRwbHVnaW5fZGF0YSwKCQkJCSkgKTsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVjZW50X2VkaXRzJ11bICdwbHVnaW4tJyAuICRyZWxldmFudFsncGx1Z2luJ10gXSA9ICRwbHVnaW5fZGV0YWlsOwoJCQl9CgkJfQoKCQlpZiAoIGZhbHNlICE9PSAkaW5jcmVtZW50X2NvdW50ZXIgKSB7CgkJCWlmICggISBpc19hcnJheSggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydlZGl0c19zaW5jZV9sYXN0J10gKSApIHsKCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZWRpdHNfc2luY2VfbGFzdCddID0gYXJyYXkoCgkJCQkJJ2FsbCcgICAgPT4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydlZGl0c19zaW5jZV9sYXN0J10sCgkJCQkJJ3Bvc3QnICAgPT4gMCwKCQkJCQkncGx1Z2luJyA9PiAwLAoJCQkJCSdvcHRpb24nID0+IDAsCgkJCQkpOwoJCQl9CgoJCQlwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2VkaXRzX3NpbmNlX2xhc3QnXVsnYWxsJ10rKzsKCQkJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydlZGl0c19zaW5jZV9sYXN0J11bICRpbmNyZW1lbnRfY291bnRlciBdKys7CgkJCXBiX2JhY2t1cGJ1ZGR5OjpzYXZlKCk7CgkJfQoJfQoKfSAvLyBFbmQgY2xhc3MgcGx1Z2luYnVkZHkuCgovLyBMb2FkIHBsdWdpbmJ1ZGR5IGlzX3N0YW5kYWxvbmUgaGVscGVyIGZ1bmN0aW9ucy4KcmVxdWlyZV9vbmNlICdoZWxwZXJzL2lzX3N0YW5kYWxvbmUucGhwJzsKCi8vIExvYWQgcGx1Z2luYnVkZHkgZGF0YWJhc2UgaGVscGVyIGNsYXNzLgpyZXF1aXJlX29uY2UgJ2NsYXNzZXMvY2xhc3MtcGItYmFja3VwYnVkZHktZGItaGVscGVycy5waHAnOwoKLy8gRklYTUU6IElzb2xhdGUgY2xhc3MsIG1vdmUgdGhlIGZvbGxvd2luZyBjb2RlIHNvbWV3aGVyZSBlbHNlLCBwb3NzaWJseSBhIGhlbHBlciBmdW5jdGlvbi4KaWYgKCBwYl9pc19zdGFuZGFsb25lKCkgKSB7CglyZXF1aXJlX29uY2UgJ3N0YW5kYWxvbmVfcHJlbG9hZGVyLnBocCc7Cn0KCi8vICoqKioqKioqKiogTG9hZCBjb3JlIGNsYXNzZXMgKioqKioqKioqKgpyZXF1aXJlX29uY2UgZGlybmFtZSggX19GSUxFX18gKSAuICcvY2xhc3Nlcy9jb3JlX2NvbnRyb2xsZXJzLnBocCc7CmlmICggaXNfYWRtaW4oKSApIHsKCXJlcXVpcmVfb25jZSBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzc2VzL2Zvcm0ucGhwJzsKCXJlcXVpcmVfb25jZSBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzc2VzL3NldHRpbmdzLnBocCc7Cn0KCi8vICoqKioqKioqKiogSW5pdGlhbGl6ZSBQbHVnaW5CdWRkeSBmcmFtZXdvcmsgKioqKioqKioqKgppZiAoICEgaXNzZXQoICRwbHVnaW5idWRkeV9pbml0ICkgKSB7CgkkcGx1Z2luYnVkZHlfaW5pdCA9ICdpbml0LnBocCc7IC8vIGRlZmF1bHQgaW5pdCBmaWxlLgp9CnBiX2JhY2t1cGJ1ZGR5Ojppbml0KCAkcGx1Z2luYnVkZHlfc2V0dGluZ3MsICRwbHVnaW5idWRkeV9pbml0ICk7CnVuc2V0KCAkcGx1Z2luYnVkZHlfc2V0dGluZ3MgKTsKdW5zZXQoICRwbHVnaW5idWRkeV9pbml0ICk7CgpwYl9iYWNrdXBidWRkeTo6bG9hZCgpOwoKLy8gKioqKioqKioqKiBMb2FkIGluaXRpYWxpemF0aW9uIGZpbGVzICoqKioqKioqKioKcmVxdWlyZV9vbmNlIGRpcm5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKSAuICcvaW5pdF9nbG9iYWwucGhwJzsKaWYgKCBpc19hZG1pbigpICkgewoJcmVxdWlyZV9vbmNlIGRpcm5hbWUoIGRpcm5hbWUoIF9fRklMRV9fICkgKSAuICcvaW5pdF9hZG1pbi5waHAnOwp9CgppZiAoIHBiX2lzX3N0YW5kYWxvbmUoKSApIHsKCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX2NvbnRyb2xsZXIoICdwYWdlcy9kZWZhdWx0JyApOwp9Cg==
###PACKDATA,FILE_END,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
###PACKDATA,FILE_START,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
MS4wLjAgLSAyMDExLTEyLTEzIC0gRHVzdGluIEJvbHRvbgoJSW5pdGlhbCBwdXNoLgoxLjAuMSAtIDIwMTEtMTItMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBVSSB0aXRsZSgpIG5vdCBzaG93aW5nIGltYWdlLgoJRml4ZWQgbm9uLXNlcmllcyBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB1bmRlZmluZWQgaW5kZXguCglwYl9iYWNrdXBidWRkeTo6c2V0dGluZ3MoKSByZXR1cm5zIGJsYW5rIGZvciBzZXJpZXMgdGFnIGlmIG5vdCBmb3VuZC4KMS4wLjIgLSAyMDExLTAyLTEyIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdXBkYXRlci4KMS4wLjMgLSAyMDEyLTAxLTA0IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgdmFyaW91cyB3aWRnZXQgdGhpbmdzLgoJVXNpbmcgVUkgZWxlbWVudHMgb24gcGFnZXMgdGhhdCBhcmVuJ3Qgb3VyIG93bi4KMS4wLjQgLSAyMDEyLTAxLTA1IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3B0aW9uYWwgYWJpbGl0eSB0byBzcGVjaWZpYyB0aGUgZmlyc3QgcGFyYW1ldGVyICgkdGFnKSBmb3IgYWRkX3Nob3J0Y3V0LCBhZGRfZmlsdGVyLCBhZGRfYWN0aW9uLCBldGMgdGhhdCBhbGxvd3MgcGFzc2luZyBhIGN1c3RvbSBtZXRob2QgY2FsbGJhY2sgbmFtZSB0aGF0IGRpZmZlcnMgZnJvbSB0aGUgdGFnLiBTb21lIGFjdGlvbnMgaGF2ZSBjaGFyYWN0ZXJzIGRpc2FsbG93ZWQgaW4gUEhQIG1ldGhvZCBuYW1lcyBzbyB0aGV5IG5lZWQgdG8gZGlmZmVyLgoxLjAuNSAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBmb3JtIHZhbGlkYXRpb24gZm9yIGVtcHR5IGZvcm0gZWxlbWVudHMuCglGaXhlZCBtaXNzaW5nIHRvb2x0aXBzIGluIHNldHRpbmdzIGZvcm1zLgoxLjAuNiAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBiZXR0ZXIgZXJyb3IgcmVwb3J0aW5nIG9uIGZvcm0gdmFsaWRhdGlvbiBmYWlsdXJlLgoJTm93IGFsbG93aW5nIHBhcnRpYWwgZm9ybSBzYXZpbmcgb24gdmFsaWR0aW9uIGZhaWx1cmUuCglBZGRlZCByZWQgYm9yZGVyIGFyb3VuZCBmb3JtIGl0ZW1zIHRoYXQgZmFpbCB2YWxpZGF0aW9uIGZvciBlYXNpZXIgcmVjb2duaXRpb24uCjEuMC43IC0gMjAxMi0wMS0wNiAtIER1c3RpbiBCb2x0b24KCUZvcm0gdmFsaWRhdGlvbiBmdW5jdGlvbiBudW1iZXIgcnVsZSB3YXMgaW5wcm9wZXJseSBuYW1lZCBudW0uCjEuMC44IC0gMjAxMi0wMS0xMyAtIER1c3RpbiBCb2x0b24KCUFkZGVkIGVycm9yIG1lc3NhZ2UgaWYgdXBkYXRlciBzZXR0aW5ncyBwYXJhbWV0ZXIgbWlzc2luZy4KCUZpeGVkIHZlcnNpb24gbnVtYmVyLgoxLjAuOSAtIDIwMTItMDEtMTMgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBwbHVnaW5idWRkeV9zZXR0aW5ncyBmb3JtIHNldHRpbmcgZm9ybSBuYW1lIHN0YXRpY2FsbHkuCglDdXN0b20gcHJvY2Vzc2luZyBhZGRlZCBpbnRvIHBsdWdpbmJ1ZGR5X3NldHRpbmdzIGNsYXNzIHZpYSBwcm9jZXNzKCk7IGp1c3Qgc2V0IHNhdmVwb2ludCBpbiBjb25zdHJ1Y3RvciB0byBmYWxzZSB0byBhY3RpdmF0ZSB0aGlzIG1vZGUuCjEuMC4xMSAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBpbml0aWFsIHN0YXJ0aW5ncyBmb3IgbmV3IG1lZGlhIGxpYnJhcnkgc3lzdGVtLgoJVHdlYWtlZCBkb3duc2l6ZXIgbG9hZGVyIHN5c3RlbS4KCVJlbmFtZWQgcGx1Z2luYnVkZHkgY2xhc3MgdG8gcGIgY2xhc3MuIEFsbCByZWZlcmVuY2VzIHRvIHBiX2JhY2t1cGJ1ZGR5Ojogc2hvdWxkIGNoYW5nZSB0byBwYl9iYWNrdXBidWRkeTo6CjEuMC4xMiAtIDIwMTItMDEtMTggLSBEdXN0aW4gQm9sdG9uCQoJX2luaXRfY29yZV9jb250cm9sbGVyKCkgY2xlYW51cC4KMS4wLjEzIC0gMjAxMi0wMS0xOSAtIER1c3RpbiBCb2x0b24JCglGaXhlZCBsYWNrIG9mIHJldHVybiBpbiBwYl9iYWNrdXBidWRkeTo6dGlwKCkgYW5kIHBiX2JhY2t1cGJ1ZGR5Ojp2aWRlbygpLgoxLjAuMTQgLSAyMDEyLTAxLTE5IC0gRHVzdGluIEJvbHRvbgoJTW92ZWQgYWxsIGZyYW1ld29yay1yZXF1aXJlZCBKUyBhbmQgQ1NTIGludG8gcGx1Z2luYnVkZHkgZGlyZWN0b3J5LgoxLjAuMTUgLSAyMDEyLTAxLTI1IC0gRHVzdGluIEJvbHRvbgoJRml4ZWQgY29yZSBjb250cm9sbGVyIGZvciBkYXNoYm9hcmQgd2lkZ2V0IGJlaW5nIGFibGUgdG8gYWNjZXNzIHByaXZhdGUgc3RhdGljIHZhci4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjphbnRpX2RpcmVjdG9yeV9icm93c2luZygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6Om1rZGlyKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCkuCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6Z2V0X3N0YXR1cygpLgoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OmRlYnVnKCkuCjEuMC4xNiAtIDIwMTItMDEtMjYgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0gY2xhc3MgY29udHJvbGxlciBmb3IgaW50ZXJmYWNpbmcgd2l0aCBmaWxlIHN5c3RlbS4KCUFkZGVkIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0IGNsYXNzIGNvbnRyb2xsZXIgZm9yIGZvcm1hdHRpbmcgZGF0YSAvIHRleHQgaW4gaHVtYW4gcmVhZGFibGUgZm9ybWF0cy4KCWRvd25zaXplciwgdXBkYXRlciwgZmlsZXN5c3RlbSwgYW5kIGZvcm1hdCAnbW9kdWxlcycgbm93IGNvbnRyb2xsZWQgdmlhIG1vZHVsZXMga2V5IGluIHRoZSAkc2V0dGluZ3MgYXJyYXkuICBTZWUgbmV3IGluaXQucGhwLgoxLjAuMTkgLSAyMDEyLTAxLTMxIC0gRHVzdGluIEJvbHRvbgoJRm9ybSBmaXguCglTZXR0aW5ncyBmaXguCglBZGRlZCBDU1Mgb3B0aW9ucyBmb3IgZ3JvdXAgbGlzdCBpbiBVSSBjbGFzcy4KCUFkZGVkIHRpdGxlIHR5cGUgZm9yIGZvcm0vc2V0dGluZ3MgY2xhc3Nlcy4KCVVwZGF0ZWQgYWRtaW4uY3NzIGZvciB0aXRsZSBzZXR0aW5ncyBmb3JtIHR5cGUuCjEuMC4yMCAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCBlcnJvciBjb2RlIGxvb2t1cCBmdW5jdGlvbiB0byBmaWxlc3lzdGVtIGNsYXNzLiBGb3IgZXhpdCBjb2RlcyBmcm9tIGV4ZWMoKSBhbmQgc3VjaC4KCUZpeGVkIHN0YXR1cygpIGJ1Z3Mgd2l0aCBuZXdsaW5lcywgYXJyYXlzIChjaGFuZ2VkIGRlbGltaXRlcikuCjEuMC4yMSAtIDIwMTItMDEtMDEgLSBEdXN0aW4gQm9sdG9uCglBZGRlZCB3eXNpd3lnIG9iamVjdCB5b3UgZm9ybSAmIHNldHRpbmdzIHN5c3RlbS4KCVRvdWNodXAgdG8gZmlsZXN5c3RlbSBjbGFzcy4KCUFkZGVkIGhpZGRlbiBmb3JtIG9iamVjdC4KCVNldHRpbmcgdGhlIHRpdGxlIG9mIGFueSBmb3JtL3NldHRpbmdzIG9iamVjdCB0byAnJyB3aWxsIGhpZGUgaXRzIGxlZnQgY29sdW1uIChjb2xsYXBzZXMgbGVmdCkuCglBZGRlZCB0aXRsZSBmb3JtIG9iamVjdCB0eXBlIGZvciBmb3JtYXR0aW5nLgoxLjAuMjIgLSAyMDEyLTAxLTAzIC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgcGI6OiRzdGFydF90aW1lIHRvIHVzZSB0byBjb21wYXJlIHBhc3NhZ2Ugb2YgdGltZS4KMS4wLjIzIC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCVVwZGF0ZWQgdXBkYXRlci4KMS4wLjI0IC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24KCUZpeGVkIGNoZWNrYm94ICJZRVMhIiBkZWJ1ZyBvdXRwdXQuCglGaXhlZCByYWRpbyBpbnB1dCBkZWZhdWx0IGNoZWNrZWQgc2VsZWN0aW9uIG5vdCBiZWluZyBhcHBsaWVkLgoxLjAuMjUgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgb3JpZW50YXRpb24gb3B0aW9uIHRvIHJhZGlvIGJ1dHRvbnMuICBQb3NzaWJsZSB2YWxzOiBob3Jpem9udGFsLCB2ZXJ0aWNhbAoxLjAuMjYgLSAyMDEyLTAyLTA5IC0gRHVzdGluIEJvbHRvbgoJQWRkZWQgdGFiYmVkIGludGVyZmFjZXMgaW50byAkdWkgY2xhc3MuCjEuMC4yNyAtIDIwMTItMDItMTAgLSBEdXN0aW4gQm9sdG9uCglGaXhlZCBHZXR0aW5nIFN0YXJ0ZWQgcGFnZSB3aXRoIG9sZGVyIHNlcmllcyBjb25mbGljdGluZy4KMS4wLjI4IC0gMjAxMi0wMi0xNyAtIER1c3RpbiBCb2x0b24KCXN0cnN0cigpIHVzZWQgM3JkIHBhcmFtIHdoaWNoIHJlcXVpcmVkIFBIUCA+PSA1LjMgaW4gZm9ybTo6dGVzdF9ydWxlKCkuCglDbGVhbmVkIHVwIGluaXQucGhwIGEgYml0LgoJQ29sb3IgcGlja2VyOiBBZGRlZCBjb2xvciB0eXBlIHRvIGZvcm0vc2V0dGluZ3MuCgkKCUFkZGVkIHNldHRpbmdzIGNsYXNzIG1ldGhvZDogc2V0X3ZhbHVlKCkgdG8gb3ZlcndyaXRlIHZhbHVlcy4KCQ==
###PACKDATA,FILE_END,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
###PACKDATA,FILE_START,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
###PACKDATA,FILE_START,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php

###PACKDATA,FILE_END,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
###PACKDATA,FILE_START,/pluginbuddy/classes/class-pb-backupbuddy-db-helpers.php,importbuddy/pluginbuddy/classes/class-pb-backupbuddy-db-helpers.php
PD9waHAKLyoqCiAqIERhdGFiYXNlIEhlbHBlcnMgQ2xhc3MgZm9yIFBsdWdpbkJ1ZGR5CiAqCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqIEBhdXRob3IgQnJpYW4gRGlDaGlhcmEgPGJkaWNoaWFyYUBpdGhlbWVzLmNvbT4KICogQHNpbmNlIDguMi43CiAqLwoKLyoqCiAqIEFkZHMgc3RhdGljIG1ldGhvZHMgdG8gZ2V0IGluZm9ybWF0aW9uIGFib3V0IGRhdGFiYXNlIHZlcnNpb24gYW5kIHR5cGUuCiAqLwpjbGFzcyBQQl9CYWNrdXBidWRkeV9EQl9IZWxwZXJzIHsKCgkvKioKCSAqIENoZWNrcyBpZiBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBpbml0aWFsaXplZCB5ZXQuCgkgKgoJICogQHZhciBib29sCgkgKi8KCXByaXZhdGUgc3RhdGljICRoYXNfaW5pdCA9IGZhbHNlOwoKCS8qKgoJICogSXMgTWFyaWFEQiBiZWluZyB1c2VkPyBEZWZhdWx0IGZhbHNlLgoJICoKCSAqIEB2YXIgYm9vbAoJICovCglwcml2YXRlIHN0YXRpYyAkaXNfbWFyaWFfZGIgPSBmYWxzZTsKCgkvKioKCSAqIElzIE15U1FMIGJlaW5nIFVzZWQ/IERlZmF1bHQ6IHRydWUuCgkgKgoJICogQHZhciBib29sCgkgKi8KCXByaXZhdGUgc3RhdGljICRpc19teXNxbCA9IHRydWU7CgoJLyoqCgkgKiBMb2NhbCBjYWNoZSBzdG9yYWdlCgkgKgoJICogQHZhciBhcnJheQoJICovCglwcml2YXRlIHN0YXRpYyAkY2FjaGUgPSBhcnJheSgpOwoKCS8qKgoJICogV1AgQ2FjaGUgR3JvdXAKCSAqCgkgKiBAdmFyIHN0cmluZwoJICovCglwcml2YXRlIHN0YXRpYyAkd3BfY2FjaGVfZ3JvdXAgPSAnUEJfQmFja3VwYnVkZHlfREJfSGVscGVycyc7CgoJLyoqCgkgKiBMb2NhbCBhbmQgV1AgQ2FjaGUgUmV0cmlldmFsCgkgKgoJICogQHBhcmFtIHN0cmluZyAka2V5ICBDYWNoZSBzdG9yYWdlIGtleS4KCSAqCgkgKiBAcmV0dXJuIG1peGVkfGZhbHNlICBDYWNoZWQgdmFsdWUgb3IgZmFsc2Ugd2hlbiBub3QgcHJlc2VudC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjYWNoZV9nZXQoICRrZXkgKSB7CgkJJHZhbHVlID0gaXNzZXQoIHNlbGY6OiRjYWNoZVsgJGtleSBdICkgPyBzZWxmOjokY2FjaGVbICRrZXkgXSA6IGZhbHNlOwoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnd3BfY2FjaGVfZ2V0JyApICkgewoJCQkkdmFsdWUgPSB3cF9jYWNoZV9nZXQoICRrZXksIHNlbGY6OiR3cF9jYWNoZV9ncm91cCApOwoJCX0KCgkJcmV0dXJuICR2YWx1ZTsKCX0KCgkvKioKCSAqIExvY2FsIGFuZCBXUCBDYWNoZSBzZXR0aW5nLgoJICoKCSAqIEBwYXJhbSBzdHJpbmcgJGtleSAgICBDYWNoZSBzdG9yYWdlIGtleS4KCSAqIEBwYXJhbSBtaXhlZCAgJHZhbHVlICBWYWx1ZSB0byBzdG9yZS4KCSAqCgkgKiBAcmV0dXJuIHRydWUgIEFsd2F5cyByZXR1cm5zIHRydWUuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gY2FjaGVfc2V0KCAka2V5LCAkdmFsdWUgKSB7CgkJc2VsZjo6JGNhY2hlWyAka2V5IF0gPSAkdmFsdWU7CgoJCWlmICggZnVuY3Rpb25fZXhpc3RzKCAnd3BfY2FjaGVfc2V0JyApICkgewoJCQlyZXR1cm4gd3BfY2FjaGVfc2V0KCAka2V5LCAkdmFsdWUsIHNlbGY6OiR3cF9jYWNoZV9ncm91cCApOwoJCX0KCgkJcmV0dXJuIHRydWU7Cgl9CgoJLyoqCgkgKiBSZXRyaWV2ZSBhbmQgc3RvcmUgdmVyc2lvbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZGF0YWJhc2UuCgkgKgoJICogQHJldHVybiBhcnJheSAgQ29udGFpbnMgdmVyc2lvbiBhbmQgdHlwZSBpbmZvcm1hdGlvbi4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfZGJfdmVyc2lvbl9pbmZvKCkgewoJCS8vIFB1bGwgZnJvbSBjYWNoZSBmaXJzdC4KCQkkdmVyc2lvbl9pbmZvID0gc2VsZjo6Y2FjaGVfZ2V0KCAnZGJfdmVyc2lvbl9pbmZvJyApOwoKCQlpZiAoIGZhbHNlID09PSAkdmVyc2lvbl9pbmZvICkgewoJCQlnbG9iYWwgJHdwZGI7CgoJCQkkdmVyc2lvbl9pbmZvID0gYXJyYXkoKTsKCgkJCS8vIFJldHJpZXZlcyByYXcgTXlTUUwgb3IgTWFyaWFEQiB2ZXJzaW9uLgoJCQkkcmVzdWx0ID0gJHdwZGItPmdldF9yb3coICdTRUxFQ1QgVkVSU0lPTigpIGFzIGB2ZXJzaW9uYCcgKTsKCgkJCWlmICggJHJlc3VsdCApIHsKCQkJCSR2ZXJzaW9uX2luZm9bJ2RiX3ZlcnNpb24nXSA9ICRyZXN1bHQtPnZlcnNpb247CgkJCX0KCgkJCS8vIEZhbGxiYWNrIG9uIG15c3FsKl9nZXRfc2VydmVyX2luZm8uCgkJCWlmICggISBpc3NldCggJHZlcnNpb25faW5mb1snZGJfdmVyc2lvbiddICkgKSB7CgkJCQlpZiAoICR3cGRiLT51c2VfbXlzcWxpICkgewoJCQkJCSR2ZXJzaW9uX2luZm9bJ2RiX3ZlcnNpb24nXSA9IG15c3FsaV9nZXRfc2VydmVyX2luZm8oICR3cGRiLT5kYmggKTsKCQkJCX0gZWxzZSB7CgkJCQkJJHZlcnNpb25faW5mb1snZGJfdmVyc2lvbiddID0gbXlzcWxfZ2V0X3NlcnZlcl9pbmZvKCAkd3BkYi0+ZGJoICk7CgkJCQl9CgkJCX0KCgkJCWlmICggaXNzZXQoICR2ZXJzaW9uX2luZm9bJ2RiX3ZlcnNpb24nXSApICkgewoJCQkJLy8gTWFyayBpZiB1c2luZyBNYXJpYURCLgoJCQkJJHZlcnNpb25faW5mb1snaXNfbWFyaWFkYiddID0gKCBmYWxzZSAhPT0gc3RyaXBvcyggJHZlcnNpb25faW5mb1snZGJfdmVyc2lvbiddLCAnbWFyaWFkYicgKSApOwoJCQkJc2VsZjo6JGlzX21hcmlhX2RiICAgICAgICAgID0gJHZlcnNpb25faW5mb1snaXNfbWFyaWFkYiddOwoJCQkJJHZlcnNpb25faW5mb1snaXNfbXlzcWwnXSAgID0gISAkdmVyc2lvbl9pbmZvWydpc19tYXJpYWRiJ107IC8vIFN0b3JlIHRoZSBvcHBvc2l0ZSBvZiBpZiBNYXJpYURCLgoJCQkJc2VsZjo6JGlzX215c3FsICAgICAgICAgICAgID0gJHZlcnNpb25faW5mb1snaXNfbXlzcWwnXTsKCgkJCQkvLyBTdG9yZSByZWFsIHZlcnNpb24gbnVtYmVyICh4LngueCksIHN0cmlwcGluZyBvdXQgYWRkaXRpb25hbCB0ZXh0LgoJCQkJaWYgKCB0cnVlID09PSAkdmVyc2lvbl9pbmZvWydpc19tYXJpYWRiJ10gJiYgcHJlZ19tYXRjaCggJy8oLlxkK1wtKVxLKFxkK1wuKShcZCtcLikoXGQrKS8nLCAkdmVyc2lvbl9pbmZvWydkYl92ZXJzaW9uJ10sICRtYXJpYV9kYl92ZXJzaW9uICkgKSB7CgkJCQkJLy8gTWFyaWFEQiBtYXkgbG9vayBsaWtlIDUuNS41LTEwLngueC1NYXJpYURCfiBzbyBjaGVjayBmb3IgdGhpcyBmb3JtYXQgZmlyc3QuCgkJCQkJJHZlcnNpb25faW5mb1sndmVyc2lvbiddID0gJG1hcmlhX2RiX3ZlcnNpb25bMF07CgkJCQl9IGVsc2VpZiAoIHByZWdfbWF0Y2goICcvKFxkK1wuKShcZCtcLikoXGQrKS8nLCAkdmVyc2lvbl9pbmZvWydkYl92ZXJzaW9uJ10sICRyYXdfZGJfdmVyc2lvbiApICkgewoJCQkJCS8vIElmIG5vdCBwcmVmaXhlZCB3aXRoIDUuNS41LSwganVzdCBnZXQgdGhlIGZpcnN0IHNlbWFudGljIHZlcnNpb24gbnVtYmVyLgoJCQkJCSR2ZXJzaW9uX2luZm9bJ3ZlcnNpb24nXSA9ICRyYXdfZGJfdmVyc2lvblswXTsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gRmFsbGJhY2sgb24gd2hhdGV2ZXIgJHdwZGIgcmV0dXJucy4KCQkJCQkkdmVyc2lvbl9pbmZvWyd2ZXJzaW9uJ10gPSAkd3BkYi0+ZGJfdmVyc2lvbigpOwoJCQkJfQoJCQl9CgoJCQlpZiAoIGNvdW50KCAkdmVyc2lvbl9pbmZvICkgPiAwICkgewoJCQkJLy8gU3RvcmUgaW4gT2JqZWN0IGNhY2hlLgoJCQkJc2VsZjo6Y2FjaGVfc2V0KCAnZGJfdmVyc2lvbl9pbmZvJywgJHZlcnNpb25faW5mbyApOwoJCQl9CgoJCQlzZWxmOjokaGFzX2luaXQgPSB0cnVlOwoJCX0KCgkJcmV0dXJuICR2ZXJzaW9uX2luZm87Cgl9CgoJLyoqCgkgKiBDaGVja3MgaWYgc2VydmVyIGlzIHJ1bm5pbmcgTWFyaWFEQi4KCSAqCgkgKiBAcmV0dXJuIGJvb2wgIElmIE1hcmlhREIgaXMgYmVpbmcgdXNlZC4KCSAqLwoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBpc19tYXJpYV9kYigpIHsKCQlpZiAoIGZhbHNlID09PSBzZWxmOjokaGFzX2luaXQgKSB7CgkJCXNlbGY6OmdldF9kYl92ZXJzaW9uX2luZm8oKTsKCQl9CgkJcmV0dXJuIHNlbGY6OiRpc19tYXJpYV9kYjsKCX0KCgkvKioKCSAqIENoZWNrcyBpZiBzZXJ2ZXIgaXMgcnVubmluZyBNeVNRTC4KCSAqCgkgKiBAcmV0dXJuIGJvb2wgIElmIE15U1FMIGlzIGJlaW5nIHVzZWQuCgkgKi8KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gaXNfbXlzcWwoKSB7CgkJaWYgKCBmYWxzZSA9PT0gc2VsZjo6JGhhc19pbml0ICkgewoJCQlzZWxmOjpnZXRfZGJfdmVyc2lvbl9pbmZvKCk7CgkJfQoJCXJldHVybiBzZWxmOjokaXNfbXlzcWw7Cgl9CgoJLyoqCgkgKiBHZXRzIFJlYWwgREIgVmVyc2lvbiwgZWl0aGVyIE1hcmlhREIgb3IgTXlTUUwgdmVyc2lvbi4KCSAqCgkgKiBAcmV0dXJuIHN0cmluZyAgVmVyc2lvbiBvZiBNYXJpYURCIG9yIE15U1FMLgoJICovCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldF9kYl92ZXJzaW9uKCkgewoJCSR2ZXJzaW9uX2luZm8gPSBzZWxmOjpnZXRfZGJfdmVyc2lvbl9pbmZvKCk7CgkJaWYgKCBpc3NldCggJHZlcnNpb25faW5mb1sndmVyc2lvbiddICkgKSB7CgkJCXJldHVybiAkdmVyc2lvbl9pbmZvWyd2ZXJzaW9uJ107CgkJfQoJCWdsb2JhbCAkd3BkYjsKCQlyZXR1cm4gJHdwZGItPmRiX3ZlcnNpb24oKTsKCX0KfQo=
###PACKDATA,FILE_END,/pluginbuddy/classes/class-pb-backupbuddy-db-helpers.php,importbuddy/pluginbuddy/classes/class-pb-backupbuddy-db-helpers.php
###PACKDATA,FILE_START,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php

###PACKDATA,FILE_END,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php
###PACKDATA,FILE_START,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php

###PACKDATA,FILE_END,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php
###PACKDATA,FILE_START,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php

###PACKDATA,FILE_END,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php
###PACKDATA,FILE_START,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
PD9waHAKCgoKLyoJY2xhc3MgcGx1Z2luYnVkZHlfZm9ybWF0CiAqCUBhdXRob3IgRHVzdGluIEJvbHRvbgogKgogKglIZWxwcyBmb3JtYXQgY29udGVudCBvciBkYXRhIHN1Y2ggYXMgdGltZSwgZGF0ZSwgZmlsZSBzaXplLCBldGMuCiAqLwpjbGFzcyBwYl9iYWNrdXBidWRkeV9mb3JtYXQgewoKCgoJLy8gKioqKioqKioqKiBQVUJMSUMgUFJPUEVSVElFUyAqKioqKioqKioqCgoKCgkvLyAqKioqKioqKioqIFBSSVZBVEUgUFJPUEVSVElFUyAqKioqKioqKioqCglwcml2YXRlICRfdGltZXN0YW1wID0gJ00gaiwgWSBnOmk6cyBhJzsKCgoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKgoKCgoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5fX2NvbnN0cnVjdCgpCgkgKgoJICoJRGVmYXVsdCBjb25zdHJ1Y3Rvci4KCSAqCgkgKglAcmV0dXJuCQludWxsCgkgKi8KCWZ1bmN0aW9uIF9fY29uc3RydWN0KCkgewoJfSAvLyBFbmQgX19jb25zdHJ1Y3QoKS4KCgoKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZmlsZV9zaXplKCkKCSAqCgkgKglUYWtlcyBhIGZpbGUgc2l6ZSBpbiBieXRlcyBhbmQgdHJhbnNmb3JtcyBpdCBpbnRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0IHdpdGggbW9yZSBmcmllbmRseSB1bml0cy4gRGVjaWRlcyBvbiB1bml0IGJhc2VkIG9uIHRoZSBzaXplLgoJICoKCSAqCUBwYXJhbQkJaW50CQkkc2l6ZQlGaWxlIHNpemUuCgkgKglAcmV0dXJuCQlzdHJpbmcJCQlIdW1hbiBmb3JtYXR0ZWQgZnJpZW5kbHkgcmVhZGFibGUgZm9ybWF0LgoJICovCglmdW5jdGlvbiBmaWxlX3NpemUoICRzaXplICkgewoJCSRzaXplcyA9IGFycmF5KCAnIEJ5dGVzJywgJyBLQicsICcgTUInLCAnIEdCJywgJyBUQicsICcgUEInLCAnIEVCJywgJyBaQicsICcgWUInKTsKCQlpZiAoICRzaXplID09IDAgKSB7CgkJCXJldHVybiggJzAgTUInICk7CgkJfSBlbHNlIHsKCQkJcmV0dXJuICggcm91bmQoICRzaXplIC8gcG93KCAxMDI0LCAoICRpID0gZmxvb3IoIGxvZyggJHNpemUsIDEwMjQgKSApICkgKSwgJGkgPiAxID8gMiA6IDApIC4gJHNpemVzWyRpXSApOwoJCX0KCX0gLy8gRW5kIGZpbGVfc2l6ZSgpLgoKCgoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5kYXRlKCkKCSAqCgkgKglGb3JtYXRzIGEgdGltZXN0YW1wIGludG8gYSBuaWNlIGh1bWFuIGRhdGUgZm9ybWF0LgoJICoKCSAqCUBwYXJhbQkJaW50CQkkdGltZXN0YW1wCQlUaW1lc3RhbXAgdG8gbWFrZSBwcmV0dHkuCgkgKglAcGFyYW0JCXN0cmluZwkkY3VzdG9tRm9ybWF0CUN1c3RvbSB0aW1lc3RhbXAgZm9ybWF0LiBFbHNlIHVzZXMgJHRoaXMtPl90aW1lc3RhbXAgZGVmaW5lZCBhdCB0b3Agb2YgdGhpcyBmaWxlLgoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlQcmV0dHkgaHVtYW4gdGltZXN0YW1wLgoJICovCglmdW5jdGlvbiBkYXRlKCAkdGltZXN0YW1wLCAkY3VzdG9tRm9ybWF0ID0gJycgKSB7CgkJaWYgKCAnJyA9PSAkY3VzdG9tRm9ybWF0ICkgewoJCQlyZXR1cm4gZGF0ZSggJHRoaXMtPl90aW1lc3RhbXAsICR0aW1lc3RhbXAgKTsKCQl9IGVsc2UgewoJCQlyZXR1cm4gZGF0ZSggJGN1c3RvbUZvcm1hdCwgJHRpbWVzdGFtcCApOwoJCX0KCX0gLy8gRW5kIGRhdGUoKS4KCgoJLyoqCgkgKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGRhdGUgZm9ybWF0LgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICBEYXRlIGZvcm1hdCBzdHJpbmcuCgkgKi8KCWZ1bmN0aW9uIGdldF9kYXRlX2Zvcm1hdCgpIHsKCQlyZXR1cm4gJHRoaXMtPl90aW1lc3RhbXA7Cgl9CgoKCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+bG9jYWxpemVfdGltZSgpCgkgKgoJICoJTG9jYWxpemVzIHRpbWUgZm9yIHRoZSBjdXJyZW50IHVzZXIgZm9yIGRpc3BsYXkuCgkgKgoJICoJQHBhcmFtCQlpbnQJCSR0aW1lc3RhbXAJCVRpbWVzdGFtcCB0byByZW1vdmUgdGltZSBvZmZzZXQgZm9yLgoJICoJQHJldHVybgkJaW50CQkJCQkJQ29ycmVjdGVkIHRpbWVzdGFtcC4KCSAqLwoJZnVuY3Rpb24gbG9jYWxpemVfdGltZSggJHRpbWVzdGFtcCApIHsKCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cyggJ2dldF9vcHRpb24nICkgKSB7CgkJCSRnbXRfb2Zmc2V0ID0gZ2V0X29wdGlvbiggJ2dtdF9vZmZzZXQnICk7CgkJfSBlbHNlIHsKCQkJJGdtdF9vZmZzZXQgPSAwOwoJCX0KCQlyZXR1cm4gJHRpbWVzdGFtcCArICggJGdtdF9vZmZzZXQgKiAzNjAwICk7Cgl9IC8vIEVuZCBsb2NhbGl6ZV90aW1lKCkuCgoKCgkvKglwbHVnaW5idWRkeV9mb3JtYXQtPnVubG9jYWxpemVfdGltZSgpCgkgKgoJICoJUmVtb3ZlcyB0aGUgdGltZXpvbmUgb2Zmc2V0IG9mIGEgbG9jYWxpemVkIHRpbWUgZGlzcGxheSBmb3IgYSB1c2VyLgoJICoKCSAqCUBwYXJhbQkJaW50CQkkdGltZXN0YW1wCQlUaW1lc3RhbXAgdG8gcmVtb3ZlIHRpbWUgb2Zmc2V0IGZvci4KCSAqCUByZXR1cm4JCWludAkJCQkJCUNvcnJlY3RlZCB0aW1lc3RhbXAuCgkgKi8KCWZ1bmN0aW9uIHVubG9jYWxpemVfdGltZSggJHRpbWVzdGFtcCApIHsKCQlyZXR1cm4gJHRpbWVzdGFtcCAtICggZ2V0X29wdGlvbiggJ2dtdF9vZmZzZXQnICkgKiAzNjAwICk7Cgl9IC8vIEVuZCB1bmxvY2FsaXplX3RpbWUoKS4KCgkvKioKCSAqIEFsaWFzIGZ1bmN0aW9uIGZvciBodW1hbl90aW1lX2RpZmYoKS4KCSAqIEFjY2VwdHMgTk9OLWxvY2FsaXplZCB0aW1lc3RhbXBzLgoJICoKCSAqIEBzZWUgdGltZV9kdXJhdGlvbgoJICoKCSAqIEBwYXJhbSBpbnQgICAgJHRpbWVzdGFtcCAgICAgVGhlIHRpbWVzdGFtcC4KCSAqIEBwYXJhbSBzdHJpbmcgJGN1cnJlbnRfdGltZSAgUmVsYXRpdmUgY3VycmVudCB0aW1lLgoJICoKCSAqIEByZXR1cm4gc3RyaW5nICBIdW1hbiByZWFkYWJsZSB0aW1lIGRpZmZlcmVuY2UuCgkgKi8KCXB1YmxpYyBmdW5jdGlvbiB0aW1lX2FnbyggJHRpbWVzdGFtcCwgJGN1cnJlbnRfdGltZSA9IDAgKSB7CgkJcmV0dXJuIGh1bWFuX3RpbWVfZGlmZiggJHRpbWVzdGFtcCwgJGN1cnJlbnRfdGltZSApOwoJfSAvLyBFbmQgdGltZV9hZ28oKS4KCgkvKglwbHVnaW5idWRkeV9mb3JtYXQtPmR1cmF0aW9uKCkKCSAqCgkgKglSZXR1cm5zIGEgaHVtYW4gcmVhZGFibGUgZHVyYXRpb24uIFVzZWZ1bCBmb3IgdGltZSBhZ28gb3IgY291bnRkb3ducy4KCSAqCUV4OiA1IGhvdXJzLCA0IG1pbnV0ZXMsIDQzIHNlY29uZHMuCgkgKgoJICoJQHBhcmFtCQlpbnQJCSRzZWNvbmRzCQlOdW1iZXIgb2Ygc2Vjb25kcyB0byB0dXJuIGludG8gYSBodW1hbiBmcmllbmRseSByZWFkYWJsZSBmb3JtYXQuCgkgKglAcmV0dXJuCQkJCXN0cmluZwkJCUh1bWFuIHJlYWRhYmxlIHN0cmluZyBkdXJhdGlvbi4KCSAqLwoJZnVuY3Rpb24gdGltZV9kdXJhdGlvbiggJHNlY29uZHMgKSB7CgkJJHRpbWUgPSB0aW1lKCkgLSAkc2Vjb25kczsKCgkJJHBlcmlvZHMgPSBhcnJheShfXygnc2Vjb25kJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbWludXRlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnaG91cicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGF5JywgCSAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnd2VlaycsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnbW9udGgnLCAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygneWVhcicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksCgkJCQkJCSBfXygnZGVjYWRlJy4gJ0xJT04nICkKCQkJCQkJICk7CgkJJGxlbmd0aHMgPSBhcnJheSgnNjAnLCc2MCcsJzI0JywnNycsJzQuMzUnLCcxMicsJzEwJyk7CgoJCSRub3cgPSB0aW1lKCk7CgoJCSRkaWZmZXJlbmNlID0gJG5vdyAtICR0aW1lOwoJCSR0ZW5zZSA9IF9fKCdhZ28nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCgoJCWZvcigkaiA9IDA7ICRkaWZmZXJlbmNlID49ICRsZW5ndGhzWyRqXSAmJiAkaiA8IGNvdW50KCRsZW5ndGhzKS0xOyAkaisrKSB7CgkJCSRkaWZmZXJlbmNlIC89ICRsZW5ndGhzWyRqXTsKCQl9CgoJCSRkaWZmZXJlbmNlID0gcm91bmQoJGRpZmZlcmVuY2UpOwoKCQlpZigkZGlmZmVyZW5jZSAhPSAxKSB7CgkJCSRwZXJpb2RzWyRqXS49ICJzIjsKCQl9CgoJCXJldHVybiAiJGRpZmZlcmVuY2UgJHBlcmlvZHNbJGpdIjsKCX0gLy8gRW5kIGR1cmF0aW9uKCkuCgoKCgkvKglwcmV0dGlmeSgpCgkgKgoJICoJVGFrZXMgYSBzdHJpbmcgYW5kIHJldHVybnMgYSBtb3JlIHByZXR0eSB2ZXJzaW9uLiBMb29rcyBpbiBhbiBhcnJheSBmb3IgYSBrZXkgbWF0Y2hpbmcgdGhlIHN0cmluZy4KCSAqCVJldHVybnMgdGhlIGFzc29jaWF0ZWQgdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgdmFsdWUgaWYgbm8gcHJldHR5IHJlcGxhY2VyIGlzIGZvdW5kLgoJICoJRXg6CgkgKgkJcHJldHRpZnkoICdkb2cnLCBhcnJheSggJ2NhdHMnID0+ICdDYXRzJywgJ2RvZycgPT4gJ0RvZycgKSApOwoJICoJCVJldHVybnM6IERvZwoJICoKCSAqCUBwYXJhbQkJc3RyaW5nCQkkdmFsdWUJCQlWYWx1ZSB0byBiZSByZXBsYWNlZCB3aXRoIGEgcHJldHR5IHZlcnNpb24uCgkgKglAcGFyYW0JCWFycmF5CQkkcmVwbGFjZW1lbnRzCUFycmF5IG9mOiB2YWx1ZSB0byBsb29rIGZvciA9PiB2YWx1ZSB0byByZXBsYWNlIHdpdGguCgkgKglAcmV0dXJuCQlzdHJpbmcJCQkJCQlQcmV0dHkgdmVyc2lvbiB0aGF0IHJlcGxhY2VkICR2YWx1ZS4gUmV0dXJucyBvcmlnaW5hbCAkdmFsdWUgaWYgbm90IGZvdW5kIGluICRyZXBsYWNlbWVudHMga2V5cy4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIHByZXR0aWZ5KCAkdmFsdWUsICRyZXBsYWNlbWVudHMgKSB7CgoJCWlmICggaXNzZXQoICRyZXBsYWNlbWVudHNbJHZhbHVlXSApICkgeyAvLyBGb3VuZCByZXBsYWNlbWVudC4KCQkJcmV0dXJuICRyZXBsYWNlbWVudHNbJHZhbHVlXTsKCQl9IGVsc2UgeyAvLyBObyByZXBsYWNlbWVudDsgcmV0dXJuIG9yaWdpbmFsIHZhbHVlLgoJCQlyZXR1cm4gJHZhbHVlOwoJCX0KCgl9IC8vIEVuZCBwcmV0dGlmeSgpOwoKCgoJLyogbXVsdGlfaW1wbG9kZSgpCgkgKgoJICogRGVlcCByZWN1cnNpdmUgaW1wbG9zaW9uLgoJICoKCSAqLwoJcHVibGljIGZ1bmN0aW9uIG11bHRpX2ltcGxvZGUoJGFycmF5LCAkZ2x1ZSkgewoJICAgICRyZXQgPSAnJzsKCgkgICAgZm9yZWFjaCAoJGFycmF5IGFzICRpdGVtKSB7CgkgICAgICAgIGlmIChpc19hcnJheSgkaXRlbSkpIHsKCSAgICAgICAgICAgICRyZXQgLj0gJHRoaXMtPm11bHRpX2ltcGxvZGUoJGl0ZW0sICRnbHVlKSAuICRnbHVlOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgJHJldCAuPSAkaXRlbSAuICRnbHVlOwoJICAgICAgICB9CgkgICAgfQoKCSAgICAkcmV0ID0gc3Vic3RyKCRyZXQsIDAsIDAtc3RybGVuKCRnbHVlKSk7CgoJICAgIHJldHVybiAkcmV0OwoJfSAvLyBFbmQgbXVsdGlfaW1wbG9kZSgpLgoKCgp9IC8vIEVuZCBjbGFzcyBwbHVnaW5idWRkeV9zZXR0aW5ncy4KCg==
###PACKDATA,FILE_END,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
###PACKDATA,FILE_START,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
###PACKDATA,FILE_START,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php

###PACKDATA,FILE_END,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php
###PACKDATA,FILE_START,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php

###PACKDATA,FILE_END,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php
###PACKDATA,FILE_START,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
###PACKDATA,FILE_START,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
LnVpLXRvb2x0aXAgewoJcGFkZGluZzogOHB4OwoJcG9zaXRpb246IGFic29sdXRlOwoJei1pbmRleDogOTk5OTsKCW1heC13aWR0aDogMzAwcHg7Cgktd2Via2l0LWJveC1zaGFkb3c6IDAgMCA1cHggI2FhYTsKCWJveC1zaGFkb3c6IDAgMCA1cHggI2FhYTsKCXdvcmQtd3JhcDogYnJlYWstd29yZDsKfQpib2R5IC51aS10b29sdGlwIHsKCWJvcmRlci13aWR0aDogMnB4Owp9Ci51aS13aWRnZXQgewoJcGFkZGluZzogMTBweDsKCWxpbmUtaGVpZ2h0OiAxLjZlbTsKfQoudWktd2lkZ2V0IC51aS13aWRnZXQgewoJZm9udC1zaXplOiAxZW07Cn0KLnVpLXdpZGdldC1jb250ZW50IHsKCWJvcmRlcjogMXB4IHNvbGlkICNhYWFhYWE7CgliYWNrZ3JvdW5kOiAjZmZmZmZmOwoJY29sb3I6ICMyMjIyMjI7Cn0K
###PACKDATA,FILE_END,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
###PACKDATA,FILE_START,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
Lm1pbmlDb2xvcnMtdHJpZ2dlciB7CgloZWlnaHQ6IDIycHg7Cgl3aWR0aDogMjJweDsKCXZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CgltYXJnaW46IDAgLjI1ZW07CglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CglvdXRsaW5lOiBub25lOwp9CgoubWluaUNvbG9ycy1zZWxlY3RvciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7Cgl3aWR0aDogMTc1cHg7CgloZWlnaHQ6IDE1MHB4OwoJYmFja2dyb3VuZDogI0ZGRjsKCWJvcmRlcjogc29saWQgMXB4ICNCQkI7CgktbW96LWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgNnB4IHJnYmEoMCwgMCwgMCwgLjI1KTsKCWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOwoJLW1vei1ib3JkZXItcmFkaXVzOiA1cHg7Cgktd2Via2l0LWJvcmRlci1yYWRpdXM6IDVweDsKCWJvcmRlci1yYWRpdXM6IDVweDsKCXBhZGRpbmc6IDVweDsKCXotaW5kZXg6IDk5OTk5OTsKfQoKLm1pbmlDb2xvcnMtc2VsZWN0b3IuYmxhY2sgewoJYmFja2dyb3VuZDogIzAwMDsKCWJvcmRlci1jb2xvcjogIzAwMDsKfQoKLm1pbmlDb2xvcnMtY29sb3JzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogNXB4OwoJd2lkdGg6IDE1MHB4OwoJaGVpZ2h0OiAxNTBweDsKCWN1cnNvcjogY3Jvc3NoYWlyOwp9CgoubWluaUNvbG9ycy1odWVzIHsKCXBvc2l0aW9uOiBhYnNvbHV0ZTsKCXRvcDogNXB4OwoJbGVmdDogMTYwcHg7Cgl3aWR0aDogMjBweDsKCWhlaWdodDogMTUwcHg7CgljdXJzb3I6IGNyb3NzaGFpcjsKfQoKLm1pbmlDb2xvcnMtY29sb3JQaWNrZXIgewoJcG9zaXRpb246IGFic29sdXRlOwoJd2lkdGg6IDExcHg7CgloZWlnaHQ6IDExcHg7Cn0KCi5taW5pQ29sb3JzLWh1ZVBpY2tlciB7Cglwb3NpdGlvbjogYWJzb2x1dGU7CglsZWZ0OiAtM3B4OwoJd2lkdGg6IDI2cHg7CgloZWlnaHQ6IDNweDsKfQ==
###PACKDATA,FILE_END,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
###PACKDATA,FILE_START,/pluginbuddy/helpers/index.php,importbuddy/pluginbuddy/helpers/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/pluginbuddy/helpers/index.php,importbuddy/pluginbuddy/helpers/index.php
###PACKDATA,FILE_START,/pluginbuddy/helpers/is_standalone.php,importbuddy/pluginbuddy/helpers/is_standalone.php
PD9waHAKLyoqCiAqIFBsdWdpbkJ1ZGR5IEhlbHBlciBmdW5jdGlvbnMKICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkKICovCgovKioKICogRGV0ZXJtaW5lcyBpZiBQQl9TVEFOREFMT05FIGlzIGVuYWJsZWQuCiAqCiAqIEByZXR1cm4gYm9vbCAgSWYgUEJfU1RBTkRBTE9ORSBpcyBkZWZpbmVkIGFuZCBzZXQgdG8gdHJ1ZS4KICovCmZ1bmN0aW9uIHBiX2lzX3N0YW5kYWxvbmUoKSB7CglyZXR1cm4gZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgJiYgdHJ1ZSA9PT0gUEJfU1RBTkRBTE9ORTsKfQo=
###PACKDATA,FILE_END,/pluginbuddy/helpers/is_standalone.php,importbuddy/pluginbuddy/helpers/is_standalone.php
###PACKDATA,FILE_START,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAYCAYAAADzoH0MAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9oHHRIvI8D7+LoAAALwSURBVDjLrZTNa11FGMZ/78ycnPvVNG3QlqTxkiuYxaUFQVMoLqqCilD6H0gFF4W4EbdduHDbnbisIIiCtOBKs9GNVKziouoiFmOTtOKtJNE093tmXhdzqpeeuNJZznmf33mfmXceUVUmlgEqwHGgBZwo9u8A68BvwACIDwRuQixADhwDTgLL71/ffArglTOPfQvUAZ2AKID76t3XFARjLa46TX12num5JdbvZ3xysw5Ay996oXVozN6va3S37+L7e8QQAMUpwpln22ArkB+F2gK7oymufOfxhb0rtxpcfskxd+Iw9LZguANhwPUvfsTFKCCGzz/9gaMLS9SPVXlnbYbtXva3t+2e8tZqj9eX/qDb6bCztcZzLz5BjIIJGECwLqN9foXVYZvb3YyH1+1uxuqwTfv8CtZlgBAwmKAGUNSPALh4dpGrK6dLgKsrp7l4dhGgqFWCGpxXAxrxox4+KlZApKRHVVGFoIof9ZJGDc5JBDG4qRrOCHKQGhARREAU3FQtaST+Dx1EbHEGY3xQMGBMmRAVYlR8TLWgRCzOR5tm2GgCAO6ADqImsQ+KManOR4vrDCsAVOs5Wzt9arnlUMWVAHt9z/2BpzcMVOs5AJ1h5cEcgLGOUYioKj7EEsAX30YhYmz6QcBgxlEAwU1VCitC0LKFoP+cTaoVxlFwXtMoZ9U6QdKT/LcOBDACtloHMXgVjBMFjYz7XaKmN+qsKQGcNWhxG+N+FzTiRP97BwmAYLOcKMKHX9/hxi+7JcAbH33P8uIRXj51HJvlgCQLCaBoDMysX+PCwiat6VACtKYDFxY2mVm/hsYUJl4FFxTQyMkn5yFvQK3BpdmMNz/z7PaT+EgVLj2fM5sbmGnA3DyEAUHBRRXe/vhPrN2n0RjwyKNjms0m55qGD9bStZ1rKj9tDtnY2OD3e/fY398nhAAIMpHKMpHIp4Dl977ceBrg1Wea3wA3gJsPh6ocEOvVIpkfB+aL/bvAz0AH6E/G+l/J23lk4gYAJAAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
###PACKDATA,FILE_START,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAITSURBVBgZpcHLThNhGIDh9/vn7/RApwc5VCmFWBPi1mvwAlx7BW69Afeu3bozcSE7E02ILjCRhRrds8AEbKVS2gIdSjvTmf+TYqLu+zyiqszDMCf75PnnnVwhuNcLpwsXk8Q4BYeSOsWpkqrinJI6JXVK6lSRdDq9PO+19vb37XK13Hj0YLMUTVVyWY//Cf8IVwQEGEeJN47S1YdPo4npDpNmnDh5udOh1YsZRcph39EaONpnjs65oxsqvZEyTaHdj3n2psPpKDLBcuOOGUWpZDOG+q0S7751ObuYUisJGQ98T/Ct4Fuo5IX+MGZr95jKjRKLlSxXxFxOEmaaN4us1Upsf+1yGk5ZKhp8C74H5ZwwCGO2drssLZZo1ouIcs2MJikz1oPmapHlaoFXH1oMwphyTghyQj+MefG+RblcoLlaJG/5y4zGCTMikEwTctaxXq/w9kuXdm9Cuzfh9acujXqFwE8xmuBb/hCwl1GKAnGccDwIadQCfD9DZ5Dj494QA2w2qtQW84wmMZ1eyFI1QBVQwV5GiaZOpdsPaSwH5HMZULi9UmB9pYAAouBQbMHHrgQcnQwZV/KgTu1o8PMgipONu2t5KeaNiEkxgAiICDMCCFeEK5aNauAOfoXx8KR9ZOOLk8P7j7er2WBhwWY9sdbDeIJnwBjBWBBAhGsCmiZxPD4/7Z98b/0QVWUehjkZ5vQb/Un5e/DIsVsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
###PACKDATA,FILE_START,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJFSURBVBgZBcHda5V1AADg5/d733Oc7tjOaNs5GC6KdrEwmpPRxG7spoKghOim7oK8y0MIEQRL+geGEIQ3UXQvSJ8IafZxUbjQhRDZoU60iYsSc9t5v87b84TsVe3mrBWpHoCICIAIACixYTUfOJM2Z62YO97TOULSIKaEQAyESAzEgISAgLpi48de87MLUqmezhGyhO4SCW7f4O81YiSJiCQIkbqmNcXMIjMXeilIGsQxDp8AnKDY5teL3PyU6h4CdY3Av7cYu58R0QghZWeT9fP0v2V7i8Y4j77As2c5sAwIFAXDgjInJxURAzub/PwxMZBGphZYeIWJWZ44xdo5bl4kK8kzioohUUREd4kXP+Kpd3nkee72+epNBleAxdfoLJBlDEuKkpxoBAkBjXGm53n8ZZ45S/shrr7P75eBo6eo9zAsKCqGRBEB/1zj89e5eo7tLRr7ePJtWg9wZZV7t2i2OPQcw5JiRE4UESN1ZPc2g0tceos/LtPYx9HTaPDNe8Dhl9gtyStyUiMIJDXLp2m0GHzN2gdMzdPq0F3k+pcc/4+x/UwepKzIiSDWTB/iwBLT8xw8xt07rJ8HHj7GbkX/B+DBxyhrciIQ2N2i2AG2fiPL+OsXoNVlWPDnDaC5l6qiJJWjLlHxxRs0JhhcIyvp/8SHJylKdiu++4Tr31NW7B8nkrwzp627d9nkHM0Wsea+GSY6tDvESEyY6TIxyZ4GSUp/nTubqyF7WrvZtaKrZ4QSQ+TIMUSJHCVypGhaHW448z+h1tLAgvKk7gAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
###PACKDATA,FILE_START,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
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
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB7klEQVR42oWRT4gSURzHZ9u9tKmHos4WBB0VscPSEuEloot2yEsHIRE8hEIHQbBUEFSQQVBQ0EMHRRAvoh78OySMBMqSYKh7URDZg6mYLrK6r28DbjPTxn7gc3nz+7z3Zoa6jmq1+gi+hK/hE3iLuolisfgC0t9At9v90e/3u01QKpVqhULhzX/DXC5nZBiGnc1mUyJitVr9ajQazXQ6/RGjwltkMpnn5XK5sdlsLnbBdrslfC4BNjiJRCLvkexfxYlEIjCZTH7yh7PZLFksFuIbnKdSKUYul9/nwlgs9gDXYYmIaDRK4vE4GY/HgvVarfbdaDS+RXpAhUKh40ql0hbHwWCQ+P1+EggESLv993Gr1To1mUyfEEspDBzl8/l/Yq/XS1wuFyc2v1pnWfZUr9d7EN+j3G63FLvXLwE/djqdxOFwcKfySSaTLbVa/YGL/2Cz2T73er0z/pDP5yODwUAQjkajqcFgyCHRwDtcbLFYFDipPp/Pz3eDy+VSEK7X6wu8CotT/UgeC34XvuA7u91e73Q6Z0TEcDicejyehkaj+YLRZ1ACBezpdLojfAzabDYzNE03w+HwidVq/arVarMKhcKHmWN4F+5BMdzioUQikatUKp1SqTTIZLJXWHsKH0LpLryJfXgbHsKD66Lfk7TS2QhfFGsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB/ElEQVR42n2RPYgaQRiG585rclGLhKQ2gYOUipjiyBGCTQhpNEVsrhAigsWhkEKwSEQQjCBroSBiYQpFEBv/Cn+XCLsElOMCBvUaFYWARoXgKSc3eVlQ9jY/LzwwzHzPzDczJJPJCOTzeVIqlQRqtdpj8BK8Bk/AfrFYJOl0mogjlV8A5ivS6XS+93q9ThMpl8t1yG/+J1tYluXm8/mMSrJcLn/xPN+E/B7KvlR+XqlU+M1mc03/kRsEG5xHIpF30GSCHIvFSCKRCEyn05/bwsFgQLPZLI3H4xQ3EHdwlUqlWJVK9WArP0Q7HBUll8sJTCYTGo1G6Xg83q3V6/ULi8XyFuoBCYVCJ9Vq9ZtYXq1WdDgcChsEg0G6WCx2a61W69JqtX6ArCB+v/+4UChAvhWhXWxM+/0+FYfjuEuTyeSFfJ94PB5FIBBo3CCiGqFVdESlSSaTLZ1Od7aVidPp/Njtdn+Ii/Bt1OVy3RJHo9HMbDbnIerBXWK32wlQu93uBu52JS7GD+zG6/X62ufzcTjVD/EIyLYywQue4qRGu93edSD6upnX6+X1ev1nSM+AnEiyZzQaj/EYjM1mYxmGaYbD4XOHw/HFYDBk1Wr1J9ScgHtgD0gjTB7K5XKVVqs1ajQas1KpfIW5p+ARUEjEPwOZIDJwBxyCg79JvwFn8/sITKnYXQAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
###PACKDATA,FILE_START,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
R0lGODlhLwA9ALMAAP//////AMbGxgDXAP8AAABLAL0AAFkAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJBQAJACwKAA4AHAAqAAAEzTAlNKm8OGtJ7f5fN2FIWYKZ2JVC25rhZVqmC6e0TApsH+c7l+3HSbUIAiRPoyoGhUvcaZQKIKxYT0onnU2ZTqlhfNuGL4UrYmxQb7TfwqDAy0ZJb4R8joDqZ2cZe3w2cgUyWhqDcwWNe4coaAOTlJWUkJGLlpWYKJqbk50gn6CiH6SbphuolqqKoKmRkrChsrO0rqu0tbYSrLkhpGm9OpqHibIWjo1cvch4xM/NydS20tDVkdfYKNscXyFlYCJEVGbkb0XPOddA6d7cFxEAIfkECRQACQAsCAAJABwAKgAABM0wJTSpvDhrSe3+XzdhSFmCmdiVQtua4WVapguntEwKbB/nO5ftx0m1CAIkT6MqBoVL3GmUCiCsWE9KJ51NmU6pYXzbhi+HK2JsUG+03wPhwMtGSW+EfI6A6mdnGXt8NnIHMloag3MHjXuHKGgEk5SVlJCRi5aVmCiam5OdIJ+goh+km6YbqJaqiqCpkZKwobKztK6rtLW2Eqy5IaRpvTqah4myFo6NXL3IeMTPzcnUttLQ1ZHX2CjbHF8hZWAiRFRm5G9FzznXQOne3BcRACH5BAkFAAkALAkADAAcACoAAATNMCU0qbw4a0nt/l83YUhZgpnYlULbmuFlWqYLp7RMCmwf5zuX7cdJtQgCJE+jKgaFS9xplAogrFhPSiedTZlOqWF824YvhStibFBvtN/CoMDLRklvhHyOgOpnZxl7fDZyBTJaGoNzBY17hyhoA5OUlZSQkYuWlZgompuTnSCfoKIfpJumG6iWqoqgqZGSsKGys7Suq7S1thKsuSGkab06moeJshaOjVy9yHjEz83J1LbS0NWR19go2xxfIWVgIkRUZuRvRc8510Dp3twXEQAh+QQJFAAJACwIABIAIAAoAAAExBClJKe9OGtZUdUg6I1hGXoZN3Lm9bmIIMuoqb7TOJNibuEUgUcYA/4oGFxstisBlTKCQCoUrV5YZjP5MXavvNwz9QsgzOiO8SQ+u1FrZ+JQXBFboAPhoKXhNXp7dDsHdH8YgQSChYEHhxeJipKSjo9zk5iTlYeRmZSWnZ57oKKYm3+hnqd4qZmrLa2mlpelo7Oxiq+stba3pbp/CKmGsz6dlXE2E4yFLrPJPpbQSNIt02TKj2EbK3gka3DRJyzWweJyJREAOw==
###PACKDATA,FILE_END,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
###PACKDATA,FILE_START,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
dmFyIGJhY2t1cGJ1ZGR5X2Rlc3RpbmF0aW9uc19hZHZhbmNlZF90b2dnbGU7CgpqUXVlcnkoZnVuY3Rpb24oICQgKSB7CgkkKCAnLmJhY2t1cGJ1ZGR5LWRvX2J1bGtfYWN0aW9uJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHsKCQl2YXIgaXRlbXMgPSAkKCAnaW5wdXRbdHlwZT0iY2hlY2tib3giXVtuYW1lXj0iaXRlbXNbIl0nICkubGVuZ3RoOwoJCWlmICggaXRlbXMgKSB7CgkJCWlmICggISAkKCAnaW5wdXRbdHlwZT0iY2hlY2tib3giXVtuYW1lXj0iaXRlbXNbIl06Y2hlY2tlZCcgKS5sZW5ndGggKSB7CgkJCQlhbGVydCggJ1NlbGVjdCBzb21lIGl0ZW1zIGZpcnN0LicgKTsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCX0KCgkJcmV0dXJuIGNvbmZpcm0oICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZG8gdGhpcyB0byBhbGwgc2VsZWN0ZWQgaXRlbXM/JyApOwoJfSk7CgoJJCggJy5wYl9kZWJ1Z19zaG93JyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHsKCQl2YXIgJGJ0biA9ICQoIHRoaXMgKSwKCQkJJHBhcmVudCA9ICRidG4ucGFyZW50KCk7CgoJCSRidG4uaGlkZSgpOwoJCSRwYXJlbnQuY2hpbGRyZW4oICcucGJfZGVidWdfaGlkZScpLnNob3coKTsKCQkkcGFyZW50LmNzcyggJ2Zsb2F0JywgJ2xlZnQnICk7CgkJJHBhcmVudC5jc3MoICd3aWR0aCcsICc4MCUnICk7CgkJJHBhcmVudC5jaGlsZHJlbiggJ2RpdicgKS5zaG93KCk7Cgl9KTsKCgkkKCAnLnBiX2RlYnVnX2hpZGUnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkgewoJCXZhciAkYnRuID0gJCggdGhpcyApLAoJCQkkcGFyZW50ID0gJGJ0bi5wYXJlbnQoKTsKCgkJJGJ0bi5oaWRlKCk7CgkJJHBhcmVudC5jaGlsZHJlbiggJy5wYl9kZWJ1Z19zaG93Jykuc2hvdygpOwoJCSRwYXJlbnQuY3NzKCAnZmxvYXQnLCAncmlnaHQnICk7CgkJJHBhcmVudC5jc3MoICd3aWR0aCcsICc0MHB4JyApOwoJCSRwYXJlbnQuY2hpbGRyZW4oICdkaXYnICkuaGlkZSgpOwoJfSk7CgoJYmFja3VwYnVkZHlfZGVzdGluYXRpb25zX2FkdmFuY2VkX3RvZ2dsZSA9IGZ1bmN0aW9uKCkgewoJCSQoICcuYWR2YW5jZWQtdG9nZ2xlLXRpdGxlJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHsKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJdmFyICRjb250YWluZXJXcmFwID0gJCggdGhpcyApLmNsb3Nlc3QoICdmb3JtJyApLAoJCQkJJHRpdGxlVG9nZ2xlID0gJGNvbnRhaW5lcldyYXAuZmluZCggJy5hZHZhbmNlZC10b2dnbGUtdGl0bGUnICksCgkJCQkkcmlnaHRBcnJvdyA9ICR0aXRsZVRvZ2dsZS5maW5kKCAnLmRhc2hpY29ucy1hcnJvdy1yaWdodCcgKTsKCgkJCWlmICggJHJpZ2h0QXJyb3cubGVuZ3RoID4gMCApIHsKCQkJCSRyaWdodEFycm93LnJlbW92ZUNsYXNzKCAnZGFzaGljb25zLWFycm93LXJpZ2h0JyApLmFkZENsYXNzKCAnZGFzaGljb25zLWFycm93LWRvd24nICk7CgkJCX0gZWxzZSB7CgkJCQkkdGl0bGVUb2dnbGUuZmluZCggJy5kYXNoaWNvbnMtYXJyb3ctZG93bicgKS5yZW1vdmVDbGFzcyggJ2Rhc2hpY29ucy1hcnJvdy1kb3duJyApLmFkZENsYXNzKCAnZGFzaGljb25zLWFycm93LXJpZ2h0JyApOwoJCQl9CgoJCQkkY29udGFpbmVyV3JhcC5maW5kKCAnLmFkdmFuY2VkLXRvZ2dsZScgKS50b2dnbGUoKTsKCQl9KTsKCX07CgoJYmFja3VwYnVkZHlfZGVzdGluYXRpb25zX2FkdmFuY2VkX3RvZ2dsZSgpOwoKCSQoICcucGx1Z2luYnVkZHlfdGlwJyApLnRvb2x0aXAoKTsgLy8gTm93IHVzaW5nIGpRdWVyeSBVSSB0b29sdGlwLgoKCWlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mICQudGFibGVEbkQgKSB7IC8vIElmIHRhYmxlRG5EIGZ1bmN0aW9uIGxvYWRlZC4KCQkkKCAnLnBiX3Jlb3JkZXInICkudGFibGVEbkQoewoJCQlvbkRyb3A6IGZ1bmN0aW9uKHRib2R5LCByb3cpIHsKCQkJCXZhciBuZXdfb3JkZXIgPSBuZXcgQXJyYXkoKSwKCQkJCQlyb3dzID0gdGJvZHkucm93czsKCgkJCQlmb3IgKHZhciBpPTA7IGk8cm93cy5sZW5ndGg7IGkrKykgewoJCQkJCW5ld19vcmRlci5wdXNoKCByb3dzW2ldLmlkLnN1YnN0cmluZygxMSkgKTsKCQkJCX0KCQkJCW5ld19vcmRlciA9IG5ld19vcmRlci5qb2luKCAnLCcgKTsKCQkJCSQoICcjcGJfb3JkZXInICkudmFsKCBuZXdfb3JkZXIgKTsKCQkJfSwKCQkJZHJhZ0hhbmRsZTogInBiX2RyYWdoYW5kbGUiCgkJfSk7Cgl9CgoJJCggJy5wYl90b2dnbGUnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkgewoJCSQoICcjcGJfdG9nZ2xlLScgKyAkKCB0aGlzICkuYXR0ciggJ2lkJyApICkuc2xpZGVUb2dnbGUoKTsKCX0pOwoKCSQoICcuaXRidWItZWRpdHMtc3VtbWFyeSAuaXRidWItc3VtbWFyeS1pdGVtJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbiggZSApIHsKCQl2YXIgJGVsID0gJCggdGhpcyApOwoKCQkkZWwudG9nZ2xlQ2xhc3MoICdpdGJ1Yi1hY3RpdmUnICk7CgkJJCggJyMnICsgJGVsLmF0dHIoICdyZWwnICkgKS50b2dnbGVDbGFzcyggJ2l0YnViLWFjdGl2ZScgKTsKCX0pOwp9KTsK
###PACKDATA,FILE_END,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
###PACKDATA,FILE_START,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
###PACKDATA,FILE_START,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js

###PACKDATA,FILE_END,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js
###PACKDATA,FILE_START,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCQoJLy8gQ2hhbmdlIHRhYiBvbiBjbGljay4KCWpRdWVyeSggJy5iYWNrdXBidWRkeS10YWJzLXdyYXAgLm5hdi10YWJbaHJlZl49IiMiXScgKS5jbGljayggZnVuY3Rpb24oZSl7IC8qIGlnbm9yZXMgYW55IG5vbiBoYXNodGFnIGxpbmtzIHNpbmNlIHRoZXkgZ28gZGlyZWN0IHRvIGEgVVJMLi4uICovCgkJZS5wcmV2ZW50RGVmYXVsdCgpOwoJCQoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuCgkJdGhpc1RhYkJsb2NrID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICcuYmFja3VwYnVkZHktdGFicy13cmFwJyApOwoJCXRoaXNUYWJCbG9jay5maW5kKCAnLmJhY2t1cGJ1ZGR5LXRhYicgKS5oaWRlKCk7CgkJCgkJLy8gVXBkYXRlIHNlbGVjdGVkIHRhYi4KCQl0aGlzVGFiQmxvY2suZmluZCggJy5uYXYtdGFiLWFjdGl2ZScgKS5yZW1vdmVDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCQoJCS8vIFNob3cgdGhlIGNvcnJlY3QgdGFiIGJsb2NrLgoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOwoJCXRoaXNUYWJCbG9jay5maW5kKCBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkgKS5zaG93KCk7Cgl9KTsKCQoJLy8gQ2hhbmdlIHRhYiBvbiBjbGljayAtLSBBSkFYIHZlcnNpb24uCglqUXVlcnkoICcuYmFja3VwYnVkZHktdGFicy13cmFwIC5uYXYtdGFiW2hyZWZePSJqYXZhc2NyaXB0Il0nICkuY2xpY2soIGZ1bmN0aW9uKGUpeyAvKiBpZ25vcmVzIGFueSBub24gaGFzaHRhZyBsaW5rcyBzaW5jZSB0aGV5IGdvIGRpcmVjdCB0byBhIFVSTC4uLiAqLwoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuCgkJdGhpc1RhYkJsb2NrID0galF1ZXJ5KHRoaXMpLmNsb3Nlc3QoICcuYmFja3VwYnVkZHktdGFicy13cmFwJyApOwoJCXRoaXNUYWJCbG9jay5maW5kKCAnLmJhY2t1cGJ1ZGR5LXRhYicgKS5oaWRlKCk7CgkJCgkJLy8gVXBkYXRlIHNlbGVjdGVkIHRhYi4KCQl0aGlzVGFiQmxvY2suZmluZCggJy5uYXYtdGFiLWFjdGl2ZScgKS5yZW1vdmVDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOwoJCQoJCS8vIFNob3cgdGhlIGNvcnJlY3QgdGFiIGJsb2NrLgoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOwoJCXRoaXNUYWJCbG9jay5maW5kKCBqUXVlcnkodGhpcykuYXR0ciggJ2RhdGEtYWpheCcgKSApLnNob3coKTsKCX0pOwoJCgkvLyBBdXRvLWRpc3BsYXkgdGhlIGNvcnJlY3QgdGFiIG9uIGxvYWQgaWYgc3BlY2lmeWluZyBhIG5vbi1kZWZhdWx0LgoJalF1ZXJ5KCAnLm5hdi10YWItYWN0aXZlJyApLmVhY2goIGZ1bmN0aW9uKCl7CgkJalF1ZXJ5KHRoaXMpLmNsaWNrKCk7Cgl9KTsKfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
###PACKDATA,FILE_START,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js

###PACKDATA,FILE_END,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js
###PACKDATA,FILE_START,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
LyoKICogalF1ZXJ5IFRvb2x0aXAgcGx1Z2luIDEuMwogKgogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLwogKiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVG9vbHRpcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcgogKgogKiAkSWQ6IGpxdWVyeS50b29sdGlwLmpzIDU3NDEgMjAwOC0wNi0yMSAxNToyMjoxNlogam9lcm4uemFlZmZlcmVyICQKICogCiAqIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBhbmQgR1BMIGxpY2Vuc2VzOgogKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sCiAqLwogCiAKIAogCiBpZiAoICd1bmRlZmluZWQnID09IHR5cGVvZiBqUXVlcnkuYnJvd3NlciApIHsKCWpRdWVyeS5icm93c2VyPXt9OyhmdW5jdGlvbigpe2pRdWVyeS5icm93c2VyLm1zaWU9ZmFsc2U7CglqUXVlcnkuYnJvd3Nlci52ZXJzaW9uPTA7aWYobmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvTVNJRSAoWzAtOV0rKVwuLykpewoJalF1ZXJ5LmJyb3dzZXIubXNpZT10cnVlO2pRdWVyeS5icm93c2VyLnZlcnNpb249UmVnRXhwLiQxO319KSgpOwp9CiAKIDsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQpzaG93KCk7dHJhY2s9ISFzZXR0aW5ncyh0aGlzKS50cmFjazskKGRvY3VtZW50LmJvZHkpLmJpbmQoJ21vdXNlbW92ZScsdXBkYXRlKTt1cGRhdGUoZXZlbnQpO31mdW5jdGlvbiBzYXZlKCl7aWYoJC50b29sdGlwLmJsb2NrZWR8fHRoaXM9PWN1cnJlbnR8fCghdGhpcy50b29sdGlwVGV4dCYmIXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKSlyZXR1cm47Y3VycmVudD10aGlzO3RpdGxlPXRoaXMudG9vbHRpcFRleHQ7aWYoc2V0dGluZ3ModGhpcykuYm9keUhhbmRsZXIpe2hlbHBlci50aXRsZS5oaWRlKCk7dmFyIGJvZHlDb250ZW50PXNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyLmNhbGwodGhpcyk7aWYoYm9keUNvbnRlbnQubm9kZVR5cGV8fGJvZHlDb250ZW50LmpxdWVyeSl7aGVscGVyLmJvZHkuZW1wdHkoKS5hcHBlbmQoYm9keUNvbnRlbnQpfWVsc2V7aGVscGVyLmJvZHkuaHRtbChib2R5Q29udGVudCk7fWhlbHBlci5ib2R5LnNob3coKTt9ZWxzZSBpZihzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSl7dmFyIHBhcnRzPXRpdGxlLnNwbGl0KHNldHRpbmdzKHRoaXMpLnNob3dCb2R5KTtoZWxwZXIudGl0bGUuaHRtbChwYXJ0cy5zaGlmdCgpKS5zaG93KCk7aGVscGVyLmJvZHkuZW1wdHkoKTtmb3IodmFyIGk9MCxwYXJ0OyhwYXJ0PXBhcnRzW2ldKTtpKyspe2lmKGk+MCloZWxwZXIuYm9keS5hcHBlbmQoIjxici8+Iik7aGVscGVyLmJvZHkuYXBwZW5kKHBhcnQpO31oZWxwZXIuYm9keS5oaWRlV2hlbkVtcHR5KCk7fWVsc2V7aGVscGVyLnRpdGxlLmh0bWwodGl0bGUpLnNob3coKTtoZWxwZXIuYm9keS5oaWRlKCk7fWlmKHNldHRpbmdzKHRoaXMpLnNob3dVUkwmJiQodGhpcykudXJsKCkpaGVscGVyLnVybC5odG1sKCQodGhpcykudXJsKCkucmVwbGFjZSgnaHR0cDovLycsJycpKS5zaG93KCk7ZWxzZQpoZWxwZXIudXJsLmhpZGUoKTtoZWxwZXIucGFyZW50LmFkZENsYXNzKHNldHRpbmdzKHRoaXMpLmV4dHJhQ2xhc3MpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LmZpeFBORygpO2hhbmRsZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHNob3coKXt0SUQ9bnVsbDtpZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnNldHRpbmdzKGN1cnJlbnQpLmZhZGUpe2lmKGhlbHBlci5wYXJlbnQuaXMoIjphbmltYXRlZCIpKWhlbHBlci5wYXJlbnQuc3RvcCgpLnNob3coKS5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTtlbHNlCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQpoZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlT3V0KHRzZXR0aW5ncy5mYWRlLGNvbXBsZXRlKTt9ZWxzZQpjb21wbGV0ZSgpO2lmKHNldHRpbmdzKHRoaXMpLmZpeFBORyloZWxwZXIucGFyZW50LnVuZml4UE5HKCk7fX0pKGpRdWVyeSk7Cg==
###PACKDATA,FILE_END,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
R0lGODlhCwALAJECAAAAAP///////wAAACH5BAEAAAIALAAAAAALAAsAAAIflINoG+AeGFgGxEaXxVns2X2dh4CZJXBadDxQlihGAQA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png

###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
R0lGODlhGgADAIAAAP///wAAACH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGODM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGOTM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjdBQzk3MkY2MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjdBQzk3MkY3MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAABoAAwAAAguEj6ka7Q+jW7SeAgA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
iVBORw0KGgoAAAANSUhEUgAAABQAAACWCAIAAABRkz+JAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0FDOTcyRjQzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0FDOTcyRjUzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGMjM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGMzM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PnzKFbcAAAcCSURBVHjanFnbcttG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
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RjU3RTU1MzIzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RjU3RTU1MzMzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEQxNkIyMTM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEQxNkIyMjM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PiDK9P0AAAHySURBVHjarJVBasJAFIYnyVgXtrorusgdXOrWZaHgFbooegv1EoI7j+AtXLsXFFy0FFRs0LYxmXT+YV6YxIgpzcDzJcN73/z5M06s4XD4zBhrsGLHGxdCNEaj0aRI6mAw6AFs4SaKokKglmUxMHkYhgqKaDabvf9AF4vFBBwwAbbkCgpcqVTYfD7/kjWnjD6BB9MZEeocyLhrt9suOBhgJhRXq1WmodsrMBNo5gfZ65KdpFhBsVqtVmO6MLwBEkYdwkZvAhwEgUXgUqmEeV/Gzw1Q+l71EhhMpRhQBOcc8986TAgWg/dHfU3zaiPIuEev4XFSsQYfNSTUC3xq38WVzQCZPnoTivGTUnzScE9nkWOnCVMxgdNWAPiht1HekQZnWrHNAeXaArIiurDifD7Hih3HYTmgzng8floul/XEpOwlxWAmFGtwwlN5+qkwX9ZqtarLg2aCt28OWADGtZcnTGhGVn4C4vt+5iEUW0GKbduOwSmVMRj1qKOe2WzGNpsNc12XdbtdNa9q0las12uRBaWBfxjqqEeeiGy326lMh5lS7HmeTYcQlEyn09dbe4sUI6C01WqpTHNg8v1+b5PH/X4/95cE/tIu6HQ68TUymPxwODh4tHK5/KevCHr0LrqYB9OSwBf5aI9FfvOk6vdfAQYA4jTPF9eEdoEAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
###PACKDATA,FILE_START,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
PD9waHAKLyoqCiAqIENyb24gU2VydmVyIEluZm8gUGFnZQogKgogKiBPVVRQVVQ6ICRjcm9ucyBwb3B1bGF0ZWQKICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkKICovCgppZiAoICEgaXNzZXQoICRjcm9uICkgKSB7CgkkY3JvbiA9IGdldF9vcHRpb24oICdjcm9uJyApOwp9CmlmICggISBpc3NldCggJGNyb25fd2FybmluZ3MgKSApIHsKCSRjcm9uX3dhcm5pbmdzID0gYXJyYXkoKTsKfQoKLy8gTG9vcCB0aHJvdWdoIGVhY2ggY3JvbiB0aW1lIHRvIGNyZWF0ZSAkY3JvbnMgYXJyYXkgZm9yIGRpc3BsYXlpbmcgbGF0ZXIuCiRjcm9ucyA9IGFycmF5KCk7CmZvcmVhY2ggKCAoYXJyYXkpICRjcm9uIGFzICR0aW1lID0+ICRjcm9uX2l0ZW0gKSB7CglpZiAoIGlzX251bWVyaWMoICR0aW1lICkgKSB7CgkJLy8gTG9vcCB0aHJvdWdoIGVhY2ggc2NoZWR1bGUgZm9yIHRoaXMgdGltZS4KCQlmb3JlYWNoICggKGFycmF5KSAkY3Jvbl9pdGVtIGFzICRob29rX25hbWUgPT4gJGV2ZW50ICkgewoKCQkJLy8gRG9uJ3Qgc2hvdyB0aGUgaXRidWJfY3Jvbl90ZXN0IHRhc2sgdG8gYXZvaWQgY29uZnVzaW9uLgoJCQkvLyBJdCB3aWxsIGFsd2F5cyBiZSBwcmVzZW50IG9uIHZpc2l0aW5nIHRoaXMgcGFnZSBpZiB3ZSBhcmUgZG9pbmcgYW4gYWN0aXZlCgkJCS8vIGNyb24gdGVzdCBhbmQgd2lsbCBhbHdheXMgYXBwZWFyIG92ZXJkdWUgYmVjYXVzZSB3ZSBzY2hlZHVsZSBpdCBpbiB0aGUgcGFzdCAtCgkJCS8vIHNvIHRvIGF2b2lkIGN1c3RvbWVyIGNvbmZ1c2lvbiB3ZSBoaWRlIGl0LiBJdCBjYW4gYmUgdmlld2VkIGJ5IGNsaWNraW5nIHRoZQoJCQkvLyBidXR0b24gdG8gc2VlIHRoZSByYXcgY3JvbiBhcnJheS4KCQkJaWYgKCAnaXRidWJfY3Jvbl90ZXN0JyA9PSAkaG9va19uYW1lICkgewoJCQkJY29udGludWU7CgkJCX0KCgkJCWZvcmVhY2ggKCAoYXJyYXkpICRldmVudCBhcyAkaXRlbV9uYW1lID0+ICRpdGVtICkgewoKCQkJCS8vIERldGVybWluZSBwZXJpb2QuCgkJCQlpZiAoICEgZW1wdHkoICRpdGVtWydzY2hlZHVsZSddICkgKSB7IC8vIFJlY3VycmluZyBzY2hlZHVsZS4KCQkJCQkkcGVyaW9kICAgICAgICAgID0gJyc7CgkJCQkJJHByZXR0eV9pbnRlcnZhbCA9IGJhY2t1cGJ1ZGR5X2NvcmU6OnByZXR0eUNyb25JbnRlcnZhbCggJGl0ZW1bJ2ludGVydmFsJ10gKTsKCQkJCQlpZiAoIGZhbHNlICE9PSAkcHJldHR5X2ludGVydmFsICkgewoJCQkJCQkkcGVyaW9kIC49ICc8c3BhbiB0aXRsZT0iSW50ZXJ2YWwgdGFnOiBgJyAuICRwcmV0dHlfaW50ZXJ2YWxbMF0gLiAnYC4iPicgLiAkcHJldHR5X2ludGVydmFsWzFdIC4gJzwvc3Bhbj4nOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRwZXJpb2QgLj0gJzxzcGFuIHRpdGxlPSJJbnRlcnZhbCB0YWc6IGAnIC4gJGl0ZW1bJ3NjaGVkdWxlJ10gLiAnYC4iPicgLiAkaXRlbVsnc2NoZWR1bGUnXSAuICc8L3NwYW4+JzsKCQkJCQl9CgkJCQl9IGVsc2UgeyAvLyBPbmUtdGltZSBvbmx5IGNyb24uCgkJCQkJJHBlcmlvZCA9IF9fKCAnb25lIHRpbWUgb25seScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCQkJfQoKCQkJCS8vIERldGVybWluZSBpbnRlcnZhbC4KCQkJCWlmICggISBlbXB0eSggJGl0ZW1bJ2ludGVydmFsJ10gKSApIHsKCQkJCQkkaW50ZXJ2YWwgPSAkaXRlbVsnaW50ZXJ2YWwnXSAuICcgc2Vjb25kcyc7CgkJCQl9IGVsc2UgewoJCQkJCSRpbnRlcnZhbCA9IF9fKCAnb25lIHRpbWUgb25seScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJCQkJfQoKCQkJCS8vIERldGVybWluZSBhcmd1bWVudHMuCgkJCQlpZiAoICEgZW1wdHkoICRpdGVtWydhcmdzJ10gKSApIHsKCQkJCQkkYXJndW1lbnRzID0gJyc7CgkJCQkJZm9yZWFjaCAoICRpdGVtWydhcmdzJ10gYXMgJGFyZ3MgKSB7CgkJCQkJCSRhcmd1bWVudHNfaW5uZXIgPSBhcnJheSgpOwoJCQkJCQkkaXNfYXJyYXkgICAgICAgID0gZmFsc2U7CgkJCQkJCWlmICggISBpc19hcnJheSggJGFyZ3MgKSApIHsKCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9ICRhcmdzOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJJGlzX2FycmF5ID0gdHJ1ZTsKCQkJCQkJCWZvcmVhY2ggKCAkYXJncyBhcyAkYXJnICkgewoJCQkJCQkJCWlmICggISBpc19zdHJpbmcoICRhcmcgKSApIHsKCQkJCQkJCQkJJGFyZ3VtZW50c19pbm5lcltdID0gcHJpbnRfciggJGFyZywgdHJ1ZSApOwoJCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9ICRhcmc7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCWlmICggdHJ1ZSA9PT0gJGlzX2FycmF5ICkgewoJCQkJCQkJJGFyZ3VtZW50c19pbm5lciA9ICdBcnJheSggJyAuIGltcGxvZGUoICcsICcsICRhcmd1bWVudHNfaW5uZXIgKSAuICcgKSc7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQkkYXJndW1lbnRzX2lubmVyID0gaW1wbG9kZSggJywgJywgJGFyZ3VtZW50c19pbm5lciApOwoJCQkJCQl9CgkJCQkJCSRhcmd1bWVudHMgLj0gJzx0ZXh0YXJlYSB3cmFwPSJvZmYiPicgLiAkYXJndW1lbnRzX2lubmVyIC4gJzwvdGV4dGFyZWE+JzsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCSRhcmd1bWVudHMgPSBfXyggJ25vbmUnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsKCQkJCX0KCgkJCQkvLyBJZiBydW4gdGltZSBpcyBpbiB0aGUgcGFzdCwgbm90ZSB0aGlzLgoJCQkJJHBhc3RfdGltZSA9ICcnOwoJCQkJaWYgKCAkdGltZSA8IHRpbWUoKSApIHsKCQkJCQkkd2FybmluZyA9ICdXQVJOSU5HOiBOZXh0IHJ1biB0aW1lIGhhcyBwYXNzZWQuIEl0IHNob3VsZCBoYXZlIHJ1biAnIC4gcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPnRpbWVfYWdvKCAkdGltZSApIC4gJyBhZ28uIENyb24gcHJvYmxlbT8nOwoJCQkJCSRtc2cgICAgID0gJ1NvbWV0aGluZyBtYXkgYmUgd3Jvbmcgd2l0aCB5b3VyIFdvcmRQcmVzcyBjcm9uIHN1Y2ggYXMgYSBtYWxmdW5jdGlvbmluZyBjYWNoaW5nIHBsdWdpbiBvciB3ZWJob3N0IHByb2JsZW1zLic7CgkJCQkJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiR1aSApICYmIGlzX29iamVjdCggcGJfYmFja3VwYnVkZHk6OiR1aSApICkgewoJCQkJCQkkdGlwID0gcGJfYmFja3VwYnVkZHk6OiR1aS0+dGlwKCAkbXNnLCAnJywgZmFsc2UgKTsKCQkJCQl9IGVsc2UgewoJCQkJCQkkdGlwID0gJygnIC4gJG1zZyAuICcpJzsKCQkJCQl9CgkJCQkJJHBhc3RfdGltZSAgICAgICA9ICc8YnI+PHNwYW4gc3R5bGU9ImNvbG9yOiByZWQ7Ij4gKiogJyAuICR3YXJuaW5nIC4gJyAqKiAnIC4gJHRpcCAuICc8L3NwYW4+JzsKCQkJCQkkY3Jvbl93YXJuaW5nc1tdID0gJHdhcm5pbmc7CgkJCQl9CgoJCQkJLy8gUG9wdWxhdGUgY3JvbnMgYXJyYXkgZm9yIGRpc3BsYXlpbmcgbGF0ZXIuCgkJCQkkY3JvbnNbICR0aW1lIC4gJ3wnIC4gJGhvb2tfbmFtZSAuICd8JyAuICRpdGVtX25hbWUgXSA9IGFycmF5KAoJCQkJCSc8c3BhbiB0aXRsZT1cJ0tleTogJyAuICRpdGVtX25hbWUgLiAnXCc+JyAuICRob29rX25hbWUgLiAnPC9zcGFuPicsCgkJCQkJcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPmRhdGUoIHBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5sb2NhbGl6ZV90aW1lKCAkdGltZSApICkgLiAnPGJyPjxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+IFRpbWVzdGFtcDogJyAuICR0aW1lIC4gJzwvc3Bhbj4nIC4gJHBhc3RfdGltZSwKCQkJCQkkcGVyaW9kLAoJCQkJCSRpbnRlcnZhbCwKCQkJCQkkYXJndW1lbnRzLAoJCQkJKTsKCgkJCX0gLy8gRW5kIGZvcmVhY2guCgkJCXVuc2V0KCAkaXRlbSApOwoJCQl1bnNldCggJGl0ZW1fbmFtZSApOwoJCX0gLy8gRW5kIGZvcmVhY2guCgkJdW5zZXQoICRldmVudCApOwoJCXVuc2V0KCAkaG9va19uYW1lICk7Cgl9IC8vIEVuZCBpZiBpc19udW1lcmljLgp9IC8vIEVuZCBmb3JlYWNoLgp1bnNldCggJGNyb25faXRlbSApOwp1bnNldCggJHRpbWUgKTsK
###PACKDATA,FILE_END,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php
###PACKDATA,FILE_START,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php

###PACKDATA,FILE_END,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php

###PACKDATA,FILE_END,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php
###PACKDATA,FILE_START,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
PD9waHAKLyoqCiAqIFNpbGVuY2UgaXMgZ29sZGVuLgogKgogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQogKi8K
###PACKDATA,FILE_END,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
###PACKDATA,FILE_START,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
PD9waHAKLyoqCiAqIFBlcm1pc3Npb25zIFNlcnZlciBJbmZvCiAqCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqLwoKZWNobyAnPGJyPic7CgppZiAoICEgY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfc3RhdCcgKSApIHsKCS8vIHBsdWdpbmJ1ZGR5X3N0YXQgaXMgcGFydCBvZiB6aXBidWRkeS4KCXJlcXVpcmVfb25jZSBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL3ppcGJ1ZGR5L3ppcGJ1ZGR5LnBocCc7CglwYl9iYWNrdXBidWRkeTo6JGNsYXNzZXNbJ3ppcGJ1ZGR5J10gPSBuZXcgcGx1Z2luYnVkZHlfemlwYnVkZHkoIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEJhY2t1cERpcmVjdG9yeSgpICk7Cn0KCiR0ZXN0cyA9IGFycmF5KCk7CgokdXBsb2Fkc19kaXJzID0gd3BfdXBsb2FkX2RpcigpOwokZGlyZWN0b3JpZXMgID0gYXJyYXkoCglBQlNQQVRIIC4gJycsCglBQlNQQVRIIC4gJ3dwLWluY2x1ZGVzLycsCglBQlNQQVRIIC4gJ3dwLWFkbWluLycsCglXUF9DT05URU5UX0RJUiAuICcvdGhlbWVzLycsCglXUF9QTFVHSU5fRElSIC4gJy8nLAoJV1BfQ09OVEVOVF9ESVIgLiAnLycsCglydHJpbSggJHVwbG9hZHNfZGlyc1snYmFzZWRpciddLCAnXFwvJyApIC4gJy8nLAoJQUJTUEFUSCAuICd3cC1pbmNsdWRlcy8nLAoJYmFja3VwYnVkZHlfY29yZTo6Z2V0QmFja3VwRGlyZWN0b3J5KCksCgliYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKSwKKTsKaWYgKCBAZmlsZV9leGlzdHMoIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldFRlbXBEaXJlY3RvcnkoKSApICkgeyAvLyBUaGlzIGRpciBpcyB1c3VhbGx5IHRyYW5zaWVudCBzbyBtYXkgbm90IGV4aXN0LgoJJGRpcmVjdG9yaWVzW10gPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCk7Cn0KCmZvcmVhY2ggKCAkZGlyZWN0b3JpZXMgYXMgJGRpcmVjdG9yeSApIHsKCgkkbW9kZV9vY3RhbF9mb3VyID0gJzxpPicgLiBfXyggJ1Vua25vd24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2k+JzsKCSRvd25lciAgICAgICAgICAgPSAnPGk+JyAuIF9fKCAnVW5rbm93bicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvaT4nOwoKCWlmICggISBmaWxlX2V4aXN0cyggJGRpcmVjdG9yeSApICkgewoJCSRtb2RlX29jdGFsX2ZvdXIgPSAnRGlyZWN0b3J5IGRvZXNcJ3QgZXhpc3QnOwoJCSRvd25lciAgICAgICAgICAgPSAnbi9hJzsKCX0KCSRzdGF0cyA9IHBsdWdpbmJ1ZGR5X3N0YXQ6OnN0YXQoICRkaXJlY3RvcnkgKTsKCWlmICggZmFsc2UgIT09ICRzdGF0cyApIHsKCQkkbW9kZV9vY3RhbF9mb3VyID0gJHN0YXRzWydtb2RlX29jdGFsX2ZvdXInXTsKCQkkb3duZXIgICAgICAgICAgID0gJHN0YXRzWyd1aWQnXSAuICc6JyAuICRzdGF0c1snZ2lkJ107Cgl9CgkkdGhpc190ZXN0ID0gYXJyYXkoCgkJJ3RpdGxlJyAgICAgID0+ICcvJyAuIHN0cl9yZXBsYWNlKCBBQlNQQVRILCAnJywgJGRpcmVjdG9yeSApLAoJCSdzdWdnZXN0aW9uJyA9PiAnPD0gNzU1JywKCQkndmFsdWUnICAgICAgPT4gJG1vZGVfb2N0YWxfZm91ciwKCQknb3duZXInICAgICAgPT4gJG93bmVyLAoJKTsKCWlmICggZmFsc2UgPT09ICRzdGF0cyB8fCAkbW9kZV9vY3RhbF9mb3VyID4gNzU1ICkgewoJCSR0aGlzX3Rlc3RbJ3N0YXR1cyddID0gX18oICdXQVJOSU5HJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Cgl9IGVsc2UgewoJCSR0aGlzX3Rlc3RbJ3N0YXR1cyddID0gX18oICdPSycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOwoJfQoJYXJyYXlfcHVzaCggJHRlc3RzLCAkdGhpc190ZXN0ICk7Cgp9IC8vIGVuZCBmb3JlYWNoLgo/PgoKPHRhYmxlIGNsYXNzPSJ3aWRlZmF0IiBpZD0iYmFja3VwYnVkZHktc2VydmVyLXBlcm1pc3Npb25zIj4KCTx0aGVhZD4KCQk8dHIgY2xhc3M9InRoZWFkIj4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdSZWxhdGl2ZSBQYXRoJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdTdWdnZXN0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/PjwvdGg+CgkJCTx0aD48P3BocCBlc2NfaHRtbF9lKCAnT3duZXIgKFVJRDpHSUQpJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoIHN0eWxlPSJ3aWR0aDogNjBweDsiPjw/cGhwIGVzY19odG1sX2UoICdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCTwvdHI+Cgk8L3RoZWFkPgoJPHRmb290PgoJCTx0ciBjbGFzcz0idGhlYWQiPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1JlbGF0aXZlIFBhdGgnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1N1Z2dlc3Rpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdPd25lciAoVUlEOkdJRCknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCQk8dGggc3R5bGU9IndpZHRoOiA2MHB4OyI+PD9waHAgZXNjX2h0bWxfZSggJ1N0YXR1cycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/PjwvdGg+CgkJPC90cj4KCTwvdGZvb3Q+Cgk8dGJvZHk+CgkJPD9waHAgZm9yZWFjaCAoICR0ZXN0cyBhcyAkdGhpc190ZXN0ICkgeyA/PgoJCQk8dHIgY2xhc3M9ImVudHJ5LXJvdyBhbHRlcm5hdGUiPgoJCQkJPHRkPjw/cGhwIGVjaG8gZXNjX2h0bWwoICR0aGlzX3Rlc3RbJ3RpdGxlJ10gKTsgPz48L3RkPgoJCQkJPHRkPjw/cGhwIGVjaG8gZXNjX2h0bWwoICR0aGlzX3Rlc3RbJ3N1Z2dlc3Rpb24nXSApOyA/PjwvdGQ+CgkJCQk8dGQ+PD9waHAgZWNobyBlc2NfaHRtbCggJHRoaXNfdGVzdFsndmFsdWUnXSApOyA/PjwvdGQ+CgkJCQk8dGQ+PD9waHAgZWNobyBlc2NfaHRtbCggJHRoaXNfdGVzdFsnb3duZXInXSApOyA/PjwvdGQ+CgkJCQk8dGQ+CgkJCQkJPD9waHAgaWYgKCAnT0snID09ICR0aGlzX3Rlc3RbJ3N0YXR1cyddICkgeyA/PgoJCQkJCQk8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtc3VjY2VzcyI+PD9waHAgZXNjX2h0bWxfZSggJ1Bhc3MnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3NwYW4+CgkJCQkJPD9waHAgfSBlbHNlaWYgKCAnRkFJTCcgPT0gJHRoaXNfdGVzdFsnc3RhdHVzJ10gKSB7ID8+CgkJCQkJCTxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC1pbXBvcnRhbnQiPjw/cGhwIGVzY19odG1sX2UoICdGYWlsJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC9zcGFuPgoJCQkJCTw/cGhwIH0gZWxzZWlmICggJ1dBUk5JTkcnID09ICR0aGlzX3Rlc3RbJ3N0YXR1cyddICkgeyA/PgoJCQkJCQk8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtd2FybmluZyI+PD9waHAgZXNjX2h0bWxfZSggJ1dhcm5pbmcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3NwYW4+CgkJCQkJPD9waHAgfSBlbHNlIHsgPz4KCQkJCQkJdW5rbm93bgoJCQkJCTw/cGhwIH0gPz4KCQkJCTwvdGQ+CgkJCTwvdHI+CgkJPD9waHAgfSA/PgoJPC90Ym9keT4KPC90YWJsZT4KCjxicj48YnI+Cg==
###PACKDATA,FILE_END,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
###PACKDATA,FILE_START,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
PD9waHAKLyoqCiAqIFJlbW90ZSBTZW5kcyBTZXJ2ZXIgSW5mbyBQYWdlCiAqCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5CiAqLwoKcmVxdWlyZV9vbmNlIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9jbGFzc2VzL2hvdXNla2VlcGluZy5waHAnOwpiYWNrdXBidWRkeV9ob3VzZWtlZXBpbmc6OnRyaW1fcmVtb3RlX3NlbmRfc3RhdHMoKTsKCnJlcXVpcmUgJ19yZW1vdGVfc2VuZHMucGhwJzsgLy8gU2V0cyAkc2VuZHMuCj8+CjxkaXYgY2xhc3M9ImJhY2t1cGJ1ZGR5LXJlbW90ZS1zZW5kcyI+Cgk8aDM+UmVjZW50IFJlbW90ZSBTZW5kcy9GaWxlIFRyYW5zZmVyczwvaDM+Cgk8P3BocCBpZiAoIGNvdW50KCAkc2VuZHMgKSA9PT0gMCApIDogPz4KCQk8ZGl2IGNsYXNzPSJuby1yZWNlbnQtdHJhbnNmZXJzIj48P3BocCBlc2NfaHRtbF9lKCAnVGhlcmUgaGF2ZSBiZWVuIG5vIHJlY2VudCBmaWxlIHRyYW5zZmVycy4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L2Rpdj4KCTw/cGhwIGVsc2UgOiA/PgoJCTw/cGhwCgkJJHNlbmRzID0gYXJyYXlfc2xpY2UoICRzZW5kcywgMCwgYmFja3VwYnVkZHlfY29uc3RhbnRzOjpSRUNFTlRfU0VORFNfTUFYX0xJU1RJTkdfQ09VTlQgKTsgLy8gT25seSBkaXNwbGF5IG1vc3QgcmVjZW50IFggc2VuZHMgdG8ga2VlcCBwYWdlIGZyb20gYmVpbmcgYm9nZ2VkIGRvd24uCgkJcGJfYmFja3VwYnVkZHk6OiR1aS0+bGlzdF90YWJsZSgKCQkJJHNlbmRzLAoJCQlhcnJheSgKCQkJCSdhY3Rpb24nICA9PiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSwKCQkJCSdjb2x1bW5zJyA9PiBhcnJheSgKCQkJCQlfXyggJ1NlbnQgRmlsZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLAoJCQkJCV9fKCAnRGVzdGluYXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCQlfXyggJ1RyaWdnZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwKCQkJCQlfXyggJ1RyYW5zZmVyIEluZm9ybWF0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIDxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL3NvcnRfZG93bi5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogMHB4OyIgdGl0bGU9IlNvcnRlZCBtb3N0IHJlY2VudCBzdGFydGVkIGZpcnN0Ij4nLAoJCQkJCV9fKCAnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIDxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+KGhvdmVyIGZvciBvcHRpb25zKTwvc3Bhbj4nLAoJCQkJKSwKCQkJCSdjc3MnICAgICA9PiAnd2lkdGg6IDEwMCU7JywKCQkJKQoJCSk7CgkJPz4KCQk8ZGl2IGNsYXNzPSJhbGlnbnJpZ2h0IGFjdGlvbnMiPgoJCQk8P3BocCBwYl9iYWNrdXBidWRkeTo6JHVpLT5ub3RlKCAnSG92ZXIgb3ZlciBpdGVtcyBhYm92ZSBmb3IgYWRkaXRpb25hbCBvcHRpb25zLicgKTsgPz4KCQk8L2Rpdj4KCTw/cGhwIGVuZGlmOyA/Pgo8L2Rpdj4K
###PACKDATA,FILE_END,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
PD9waHAKLyoqCiAqIERpYWdub3N0aWNzIFBhZ2UgU2VydmVyIEluZm8KICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkKICovCgo/Pgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgoJLnBiX2JhY2t1cGJ1ZGR5X3JlZnJlc2hfc3RhdHMgewoJCWN1cnNvcjogcG9pbnRlcjsKCX0KPC9zdHlsZT4KPHNjcmlwdD4KalF1ZXJ5KGZ1bmN0aW9uKCAkICkgewoJZnVuY3Rpb24gYmJfaXNOdW1iZXIoIG4gKSB7CgkJcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTsKCX07CgoJJCgnLnBiX2JhY2t1cGJ1ZGR5X3Rlc3RFcnJvckxvZycpLm9uKCAnY2xpY2snLCBmdW5jdGlvbihlKSB7CgkJJCggJy5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLnNob3coKTsKCQkkLnBvc3QoICQodGhpcykuYXR0ciggJ3JlbCcgKSwgeyBmdW5jdGlvbjogJ3Rlc3RFcnJvckxvZycgfSwKCQkJZnVuY3Rpb24oZGF0YSkgewoJCQkJJCggJy5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLmhpZGUoKTsKCQkJCWFsZXJ0KCBkYXRhICk7CgkJCX0KCQkpOwoJCXJldHVybiBmYWxzZTsKCX0pOwoKCSQoICcucGJfYmFja3VwYnVkZHlfdGVzdFBIUFJ1bnRpbWUnICkub24oICdjbGljaycsIGZ1bmN0aW9uKGUpewoJCWxvYWRpbmcgPSAkKHRoaXMpLmNoaWxkcmVuKCAnLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICk7CgkJc2VyaWFsaXplZEZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoICdmb3JtJyApLnNlcmlhbGl6ZSgpOwoKCQl0ZXN0UEhQUnVudGltZUludGVydmFsID0gc2V0SW50ZXJ2YWwoIGZ1bmN0aW9uKCl7CgkJCWxvYWRpbmcuc2hvdygpOwoJCQkkLnBvc3QoCgkJCQknPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6YWpheF91cmwoICdydW5fcGhwX3J1bnRpbWVfdGVzdF9yZXN1bHRzJyApOyA/PicsCgkJCQlzZXJpYWxpemVkRm9ybSwKCQkJCWZ1bmN0aW9uKGRhdGEpIHsKCQkJCQlsb2FkaW5nLmhpZGUoKTsKCQkJCQlpZiAoIGJiX2lzTnVtYmVyKCBkYXRhICkgKSB7IC8vIEZpbmlzaGVkCgkJCQkJCXJlc3VsdF9vYmouaHRtbCggZGF0YSArICcgPD9waHAgX2UoICdzZWNzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+JyApOwoJCQkJCQljbGVhckludGVydmFsKCB0ZXN0UEhQUnVudGltZUludGVydmFsICk7CgkJCQkJfSBlbHNlIHsgLy8gSW4gcHJvZ3Jlc3MuCgkJCQkJCXJlc3VsdF9vYmouaHRtbCggZGF0YSApOwoJCQkJCX0KCQkJCX0KCQkJKTsKCQl9LCA1MDAwICk7Cgl9KTsKCgkkKCAnLnBiX2JhY2t1cGJ1ZGR5X3Rlc3RQSFBNZW1vcnknICkub24oICdjbGljaycsIGZ1bmN0aW9uKGUpewoJCWxvYWRpbmcgPSAkKHRoaXMpLmNoaWxkcmVuKCAnLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICk7CgkJc2VyaWFsaXplZEZvcm0gPSAkKHRoaXMpLmNsb3Nlc3QoICdmb3JtJyApLnNlcmlhbGl6ZSgpOwoKCQl0ZXN0UEhQTWVtb3J5SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCggZnVuY3Rpb24oKXsKCQkJbG9hZGluZy5zaG93KCk7CgkJCSQucG9zdCgKCQkJCSc8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjphamF4X3VybCggJ3J1bl9waHBfbWVtb3J5X3Rlc3RfcmVzdWx0cycgKTsgPz4nLAoJCQkJc2VyaWFsaXplZEZvcm0sCgkJCQlmdW5jdGlvbihkYXRhKSB7CgkJCQkJbG9hZGluZy5oaWRlKCk7CgkJCQkJaWYgKCBiYl9pc051bWJlciggZGF0YSApICkgeyAvLyBGaW5pc2hlZAoJCQkJCQlyZXN1bHRfb2JqLmh0bWwoIGRhdGEgKyAnIDw/cGhwIF9lKCAnTUInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz4nICk7CgkJCQkJCWNsZWFySW50ZXJ2YWwoIHRlc3RQSFBNZW1vcnlJbnRlcnZhbCApOwoJCQkJCX0gZWxzZSB7IC8vIEluIHByb2dyZXNzLgoJCQkJCQlyZXN1bHRfb2JqLmh0bWwoIGRhdGEgKTsKCQkJCQl9CgkJCQl9CgkJCSk7CgkJfSwgNTAwMCApOwoJfSk7CgoJJCgnLnBiX2JhY2t1cGJ1ZGR5X3JlZnJlc2hfc3RhdHMnKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oZSkgewoJCWxvYWRpbmcgPSAkKHRoaXMpLmNoaWxkcmVuKCAnLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICk7CgkJbG9hZGluZy5zaG93KCk7CgoJCXJlc3VsdF9vYmogPSAkKCAnI3BiX3N0YXRzXycgKyAkKHRoaXMpLmF0dHIoICdyZWwnICkgKTsKCgkJJC5wb3N0KCAkKHRoaXMpLmF0dHIoICdhbHQnICksICQodGhpcykuY2xvc2VzdCggJ2Zvcm0nICkuc2VyaWFsaXplKCksCgkJCWZ1bmN0aW9uKGRhdGEpIHsKCQkJCWxvYWRpbmcuaGlkZSgpOwoJCQkJcmVzdWx0X29iai5odG1sKCBkYXRhICk7CgkJCX0KCQkpOwoKCQlyZXR1cm4gZmFsc2U7Cgl9KTsKfSk7Cjwvc2NyaXB0Pgo8P3BocCByZXF1aXJlICdfc2VydmVyX3Rlc3RzLnBocCc7ID8+Cgo8dGFibGUgY2xhc3M9IndpZGVmYXQgc3RyaXBlZCI+Cgk8dGhlYWQ+CgkJPHRyIGNsYXNzPSJ0aGVhZCI+CgkJCTx0aCBzdHlsZT0id2lkdGg6IDE1cHg7Ij4mbmJzcDs8L3RoPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1NlcnZlciBDb25maWd1cmF0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdTdWdnZXN0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoPjw/cGhwIGVzY19odG1sX2UoICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/PjwvdGg+CgkJCTx0aCBzdHlsZT0id2lkdGg6IDYwcHg7Ij48P3BocCBlc2NfaHRtbF9lKCAnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQk8L3RyPgoJPC90aGVhZD4KCTx0Zm9vdD4KCQk8dHIgY2xhc3M9InRoZWFkIj4KCQkJPHRoIHN0eWxlPSJ3aWR0aDogMTVweDsiPiZuYnNwOzwvdGg+CgkJCTx0aD48P3BocCBlc2NfaHRtbF9lKCAnU2VydmVyIENvbmZpZ3VyYXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1N1Z2dlc3Rpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCQk8dGg+PD9waHAgZXNjX2h0bWxfZSggJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC90aD4KCQkJPHRoIHN0eWxlPSJ3aWR0aDogNjBweDsiPjw/cGhwIGVzY19odG1sX2UoICdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3RoPgoJCTwvdHI+Cgk8L3Rmb290PgoJPHRib2R5PgoJCTw/cGhwIGZvcmVhY2ggKCAkdGVzdHMgYXMgJHBhcmVudF9jbGFzc190ZXN0ICkgeyA/PgoJCQk8dHIgY2xhc3M9ImVudHJ5LXJvdyI+CgkJCQk8dGQ+PD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6dGlwKCAkcGFyZW50X2NsYXNzX3Rlc3RbJ3RpcCddLCAnJywgZmFsc2UgKTsgPz48L3RkPgoJCQkJPHRkPjw/cGhwIGVjaG8gJHBhcmVudF9jbGFzc190ZXN0Wyd0aXRsZSddOyA/PjwvdGQ+CgkJCQk8dGQ+PD9waHAgZWNobyAkcGFyZW50X2NsYXNzX3Rlc3RbJ3N1Z2dlc3Rpb24nXTsgPz48L3RkPgoJCQkJPHRkPjw/cGhwIGVjaG8gJHBhcmVudF9jbGFzc190ZXN0Wyd2YWx1ZSddOyA/PjwvdGQ+CgkJCQk8dGQ+CgkJCQkJPD9waHAgaWYgKCAnT0snID09ICRwYXJlbnRfY2xhc3NfdGVzdFsnc3RhdHVzJ10gKSB7ID8+CgkJCQkJCTxzcGFuIGNsYXNzPSJwYl9sYWJlbCBwYl9sYWJlbC1zdWNjZXNzIj48P3BocCBlc2NfaHRtbF9lKCAnUGFzcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/Pjwvc3Bhbj4KCQkJCQk8P3BocCB9IGVsc2VpZiAoICdGQUlMJyA9PSAkcGFyZW50X2NsYXNzX3Rlc3RbJ3N0YXR1cyddICkgeyA/PgoJCQkJCQk8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtaW1wb3J0YW50Ij48P3BocCBlc2NfaHRtbF9lKCAnRmFpbCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/Pjwvc3Bhbj4KCQkJCQk8P3BocCB9IGVsc2VpZiAoICdXQVJOSU5HJyA9PSAkcGFyZW50X2NsYXNzX3Rlc3RbJ3N0YXR1cyddICkgeyA/PgoJCQkJCQk8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtd2FybmluZyI+PD9waHAgZXNjX2h0bWxfZSggJ1dhcm5pbmcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L3NwYW4+CgkJCQkJPD9waHAgfSA/PgoJCQkJPC90ZD4KCQkJPC90cj4KCQk8P3BocCB9ID8+Cgk8L3Rib2R5Pgo8L3RhYmxlPgo8YnI+CjxjZW50ZXI+Cgk8P3BocAoJaWYgKCAhIGRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSApIHsKCQllY2hvICc8YSBocmVmPSIjVEJfaW5saW5lP3dpZHRoPTY0MCYjMDM4O2hlaWdodD02MDAmIzAzODtpbmxpbmVJZD1wYl9zZXJ2ZXJpbmZvdGV4dF9tb2RhbCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tc2Vjb25kYXJ5IGJ1dHRvbi10ZXJ0aWFyeSB0aGlja2JveCIgdGl0bGU9IlNlcnZlciBJbmZvcm1hdGlvbiBSZXN1bHRzIj5EaXNwbGF5IFNlcnZlciBDb25maWd1cmF0aW9uIGluIFRleHQgRm9ybWF0PC9hPiAmbmJzcDsmbmJzcDsmbmJzcDsgJzsKCQllY2hvICc8YSBocmVmPSInIC4gcGJfYmFja3VwYnVkZHk6OmFqYXhfdXJsKCAncGluZm8nICkgLiAnJiMwMzg7VEJfaWZyYW1lPTEmIzAzODt3aWR0aD02NDAmIzAzODtoZWlnaHQ9NjAwIiBjbGFzcz0idGhpY2tib3ggYnV0dG9uIHNlY29uZGFyeS1idXR0b24iIHRpdGxlPSInIC4gZXNjX2h0bWxfXyggJ0Rpc3BsYXkgRXh0ZW5kZWQgUEhQIFNldHRpbmdzIHZpYSBwaHBpbmZvKCknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciPicgLiBlc2NfaHRtbF9fKCAnRGlzcGxheSBFeHRlbmRlZCBQSFAgU2V0dGluZ3MgdmlhIHBocGluZm8oKScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvYT4nOwoJfSBlbHNlIHsKCQllY2hvICc8YSBpZD0ic2VydmVyaW5mb3RleHQiIGNsYXNzPSJidXR0b24gYnV0dG9uLXNlY29uZGFyeSBidXR0b24tdGVydGlhcnkgYnV0dG9uLXByaW1hcnkgdGhpY2tib3ggdG9nZ2xlIiB0aXRsZT0iU2VydmVyIEluZm9ybWF0aW9uIFJlc3VsdHMiPkRpc3BsYXkgUmVzdWx0cyBpbiBUZXh0IEZvcm1hdDwvYT4gJm5ic3A7Jm5ic3A7Jm5ic3A7ICc7Cgl9Cgk/Pgo8L2NlbnRlcj4KPGJyPgoKPD9waHAKJGRpdl9pZCAgICAgICAgID0gISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgPyAncGJfc2VydmVyaW5mb3RleHRfbW9kYWwnIDogJ3RvZ2dsZS1zZXJ2ZXJpbmZvdGV4dCc7CiR0ZXh0YXJlYV93aWR0aCA9ICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApID8gJzEwMCUnIDogJzk1JSc7Cj8+CjxkaXYgaWQ9Ijw/cGhwIGVjaG8gZXNjX2F0dHIoICRkaXZfaWQgKTsgPz4iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+Cgk8P3BocCBpZiAoICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApICkgOiA/PgoJCTxoMz48P3BocCBlc2NfaHRtbF9lKCAnU2VydmVyIEluZm9ybWF0aW9uIFJlc3VsdHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L2gzPgoJPD9waHAgZW5kaWY7ID8+Cgk8dGV4dGFyZWEgc3R5bGU9IndpZHRoOiA8P3BocCBlY2hvIGVzY19hdHRyKCAkdGV4dGFyZWFfd2lkdGggKTsgPz47IGhlaWdodDogMzAwcHg7IiB3cmFwPSJvZmYiPgoJCTw/cGhwCgkJZm9yZWFjaCAoICR0ZXN0cyBhcyAkdGVzdCApIDoKCQkJZWNobyAnWycgLiBlc2NfaHRtbCggJHRlc3RbJ3N0YXR1cyddICkgLiAnXSAgICAgJyAuIGVzY19odG1sKCAkdGVzdFsndGl0bGUnXSApIC4gJyAgID0gICAnIC4gZXNjX2h0bWwoIHN0cmlwX3RhZ3MoICR0ZXN0Wyd2YWx1ZSddICkgKSAuICJcbiI7CgkJZW5kZm9yZWFjaDsKCQl1bnNldCggJHRlc3RzICk7CgkJPz4KCTwvdGV4dGFyZWE+CjwvZGl2Pgo=
###PACKDATA,FILE_END,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
###PACKDATA,FILE_START,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
PD9waHAKLyoqCiAqIFNpdGUgU2l6ZSBJbmZvIG9uIERpYWdub3N0aWNzIFBhZ2UKICoKICogQHBhY2thZ2UgQmFja3VwQnVkZHkKICovCgpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpY2ljbGUuanMnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2ljaWNsZV9zZXR1cC5qcycgKTsKcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdqaXRfYmFzZS5jc3MnICk7CnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnaml0X2ljaWNsZS5jc3MnICk7Cj8+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCWpRdWVyeShmdW5jdGlvbigpIHsKCQlqUXVlcnkoJyNwYl9pY2ljbGVsYXVuY2gnKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oZSkgewoJCQlqUXVlcnkoJyNwYl9pbmZvdmlzX2NvbnRhaW5lcicpLnNsaWRlVG9nZ2xlKCk7CgkJCWpRdWVyeS5wb3N0KCAnPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6YWpheF91cmwoICdpY2ljbGUnICk7ID8+JywKCQkJCWZ1bmN0aW9uKCBkYXRhICkgewoJCQkJCWpRdWVyeSgnI2luZm92aXMnKS5odG1sKCcnKTsKCQkJCQlpY2ljbGVfaW5pdCggZGF0YSApOwoJCQkJfQoJCQkpOwoJCX0pOwoKCQlqUXVlcnkoICcucGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfYnV0dG9uJyApLm9uKCAnY2xpY2snLCBmdW5jdGlvbigpIHsKCQkJalF1ZXJ5KCAnI3BiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2ludHJvID4gLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICkuc2hvdygpOwoJCQlqUXVlcnkucG9zdCggJzw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OmFqYXhfdXJsKCAnc2l0ZV9zaXplX2xpc3RpbmcnICk7ID8+JnByb2ZpbGU9JyArIGpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9maWxlbGlzdGluZ3Byb2ZpbGUnICkudmFsKCksCgkJCQlmdW5jdGlvbiggZGF0YSApIHsKCQkJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfY29udGVudCcgKS5odG1sKCBkYXRhICk7CgkJCQkJalF1ZXJ5KCAnI3BiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2ludHJvID4gLnBiX2JhY2t1cGJ1ZGR5X2xvYWRpbmcnICkuaGlkZSgpOwoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19jb250ZW50JyApLnNsaWRlRG93bigpOwoJCQkJfQoJCQkpOwoJCQlqUXVlcnkoICdwYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLmhpZGUoKTsKCQl9ICk7CgoJfSk7Cjwvc2NyaXB0Pgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgoJI3BiX2JhY2t1cGJ1ZGR5X3NlcnZlcmluZm9fZXhjbHVzaW9uczo6LXdlYmtpdC1zY3JvbGxiYXIgewoJCS13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKCQl3aWR0aDogMTFweDsKCQloZWlnaHQ6IDExcHg7Cgl9CgkjcGJfYmFja3VwYnVkZHlfc2VydmVyaW5mb19leGNsdXNpb25zOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7CgkJYm9yZGVyLXJhZGl1czogOHB4OwoJCWJvcmRlcjogMnB4IHNvbGlkIHdoaXRlOyAvKiBzaG91bGQgbWF0Y2ggYmFja2dyb3VuZCwgY2FuJ3QgYmUgdHJhbnNwYXJlbnQgKi8KCQliYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTsKCX3igIsKPC9zdHlsZT4KCjxicj4KPGgzIGNsYXNzPSJwYl9odGl0bGUiPjw/cGhwIGVzY19odG1sX2UoICdEaXJlY3RvcnkgU2l6ZSBMaXN0aW5nJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC9oMz4KPGEgbmFtZT0icGJfYmFja3VwYnVkZHlfZGlyX3NpemVfbGlzdGluZyI+Jm5ic3A7PC9hPgoKPGRpdiBpZD0icGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8iPgoJPD9waHAgZXNjX2h0bWxfZSggJ0Rpc3BsYXkgYSBjb21wcmVoZW5zaXZlIGxpc3Rpbmcgb2YgZGlyZWN0b3JpZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIHNpemUgb2YgYWxsIGNvbnRlbnRzIHdpdGhpbiwgaW5jbHVkaW5nIHN1YmRpcmVjdG9yaWVzLiAgVGhpcyBpcyB1c2VmdWwgZm9yIGZpbmRpbmcgd2hlcmUgc3BhY2UgaXMgYmVpbmcgdXNlZC4gTm90ZSB0aGF0IHRoaXMgaXMgYSBDUFUgaW50ZW5zaXZlIHByb2Nlc3MgYW5kIG1heSB0YWtlIGEgd2hpbGUgdG8gbG9hZCBhbmQgZXZlbiB0aW1lIG91dCBvbiBzb21lIHNlcnZlcnMuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+Cgk8YnIgLz48YnIgLz4KCgk8Yj5CYWNrdXAgcHJvZmlsZSBmb3IgY2FsY3VsYXRpbmcgZXhjbHVzaW9uczo8L2I+Cgk8c2VsZWN0IGlkPSJwYl9iYWNrdXBidWRkeV9maWxlbGlzdGluZ3Byb2ZpbGUiPgoJCTw/cGhwCgkJJHByb2ZpbGVfaWQgPSAnJyAhPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Byb2ZpbGUnICkgPyBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Byb2ZpbGUnICkgOiAwOwoJCWZvcmVhY2ggKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3Byb2ZpbGVzJ10gYXMgJHRoaXNfcHJvZmlsZV9pZCA9PiAkcHJvZmlsZSApIHsKCQkJaWYgKCAnZGInID09ICRwcm9maWxlWyd0eXBlJ10gKSB7CgkJCQljb250aW51ZTsKCQkJfQoJCQk/PgoJCQk8b3B0aW9uIHZhbHVlPSI8P3BocCBlY2hvIGVzY19hdHRyKCAkdGhpc19wcm9maWxlX2lkICk7ID8+IiA8P3BocCBzZWxlY3RlZCggJHByb2ZpbGVfaWQsICR0aGlzX3Byb2ZpbGVfaWQgKTsgPz4+CgkJCQk8P3BocCBlY2hvIGVzY19odG1sKCAkcHJvZmlsZVsndGl0bGUnXSApOyA/PiAoPD9waHAgZWNobyBlc2NfaHRtbCggJHByb2ZpbGVbJ3R5cGUnXSApOyA/PikKCQkJPC9vcHRpb24+CgkJPD9waHAgfSA/PgoJPC9zZWxlY3Q+PGJyPgoKCgk8YnI+Cgk8YSBjbGFzcz0icGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfYnV0dG9uIGJ1dHRvbiBidXR0b24tcHJpbWFyeSIgc3R5bGU9Im1hcmdpbi10b3A6IDNweDsiPjw/cGhwIGVzY19odG1sX2UoICdEaXNwbGF5IERpcmVjdG9yeSBTaXplIExpc3RpbmcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L2E+Cgk8c3BhbiBjbGFzcz0icGJfYmFja3VwYnVkZHlfbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmcuZ2lmIiBhbHQ9Ijw/cGhwIGVzY19hdHRyX2UoICdMb2FkaW5nLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+IiB0aXRsZT0iPD9waHAgZXNjX2F0dHJfZSggJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz4iIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyIgLz48L3NwYW4+CjwvZGl2Pgo8YnI+CjxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+Cjxicj48YnI+CjxoMyBjbGFzcz0icGJfaHRpdGxlIj48P3BocCBlc2NfaHRtbF9lKCAnSW50ZXJhY3RpdmUgR3JhcGhpY2FsIERpcmVjdG9yeSBTaXplIE1hcCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/PjwvaDM+Cjxicj4KPD9waHAKZXNjX2h0bWxfZSggJ0Rpc3BsYXlzIGFuIGludGVyYWN0aXZlIGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBvZiBkaXJlY3RvcmllcyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgc2l6ZSBvZiBhbGwgY29udGVudHMgd2l0aGluLCBpbmNsdWRpbmcgc3ViZGlyZWN0b3JpZXMuClRoaXMgaXMgdXNlZnVsIGZvciBmaW5kaW5nIHdoZXJlIHNwYWNlIGlzIGJlaW5nIHVzZWQuIERpcmVjdG9yeSBib3hlcyBhcmUgc2NhbGVkIGJhc2VkIG9uIHNpemUuIENsaWNrIG9uIGEgZGlyZWN0b3J5IGJveCB0byBtb3ZlIGFyb3VuZC4gTm90ZSB0aGF0IHRoaXMKaXMgYSBDUFUgaW50ZW5zaXZlIHByb2Nlc3MgYW5kIG1heSB0YWtlIGEgd2hpbGUgdG8gbG9hZCBhbmQgZXZlbiB0aW1lIG91dCBvbiBzb21lIHNlcnZlcnMuIFNsb3dlciBjb21wdXRlcnMgbWF5IGhhdmUgdHJvdWJsZSBuYXZpZ2F0aW5nIHRoZSBpbnRlcmFjdGl2ZSBtYXAuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Cj8+Cjxicj4KPHA+PGEgaWQ9InBiX2ljaWNsZWxhdW5jaCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tcHJpbWFyeSIgc3R5bGU9Im1hcmdpbi10b3A6IDNweDsiPjw/cGhwIGVzY19odG1sX2UoICdEaXNwbGF5IEludGVyYWN0aXZlIEdyYXBoaWNhbCBEaXJlY3RvcnkgU2l6ZSBNYXAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L2E+PC9wPgoKPGxpbmsgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vY3NzL2ppdF9iYXNlLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiAvPgo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9jc3Mvaml0X2ljaWNsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz4KCjxkaXYgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IiBpZD0icGJfaW5mb3Zpc19jb250YWluZXIiPgoJPGRpdiBzdHlsZT0iYmFja2dyb3VuZDogIzFBMUExQTsiPgoJCTxkaXYgaWQ9ImluZm92aXMiPgoJCQk8YnIgLz48YnIgLz4KCQkJPGRpdiBzdHlsZT0ibWFyZ2luOiAzMHB4OyI+CgkJCQk8aDQgc3R5bGU9ImNvbG9yOiAjRkZGRkZGOyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmdfbGFyZ2VfZGFya2JnLmdpZiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtOXB4OyIgLz4gPD9waHAgZXNjX2h0bWxfZSggJ0xvYWRpbmcgLi4uIFBsZWFzZSB3YWl0IC4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOyA/PjwvaDQ+CgkJCTwvZGl2PgoJCTwvZGl2PgoJPC9kaXY+CgoJPGxhYmVsIGZvcj0icy1vcmllbnRhdGlvbiI+PD9waHAgZXNjX2h0bWxfZSggJ09yaWVudGF0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+OiA8L2xhYmVsPgoJPHNlbGVjdCBuYW1lPSJzLW9yaWVudGF0aW9uIiBpZD0icy1vcmllbnRhdGlvbiI+CgkJPG9wdGlvbiB2YWx1ZT0iaCIgc2VsZWN0ZWQ+PD9waHAgZXNjX2h0bWxfZSggJ2hvcml6b250YWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L29wdGlvbj4KCQk8b3B0aW9uIHZhbHVlPSJ2Ij48P3BocCBlc2NfaHRtbF9lKCAndmVydGljYWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsgPz48L29wdGlvbj4KCTwvc2VsZWN0PgoKCTxsYWJlbCBmb3I9ImktbGV2ZWxzLXRvLXNob3ciPjw/cGhwIGVzY19odG1sX2UoICdNYXggbGV2ZWxzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+OiA8L2xhYmVsPgoJPHNlbGVjdCAgaWQ9ImktbGV2ZWxzLXRvLXNob3ciIG5hbWU9ImktbGV2ZWxzLXRvLXNob3ciIHN0eWxlPSJ3aWR0aDogNTBweCI+CgkJPG9wdGlvbj5hbGw8L29wdGlvbj4KCQk8b3B0aW9uPjE8L29wdGlvbj4KCQk8b3B0aW9uPjI8L29wdGlvbj4KCQk8b3B0aW9uIHNlbGVjdGVkPSJzZWxlY3RlZCI+Mzwvb3B0aW9uPgoJCTxvcHRpb24+NDwvb3B0aW9uPgoJCTxvcHRpb24+NTwvb3B0aW9uPgoJPC9zZWxlY3Q+CgoJPGEgaWQ9InVwZGF0ZSIgY2xhc3M9InRoZW1lIGJ1dHRvbiB3aGl0ZSI+PD9waHAgZXNjX2h0bWxfZSggJ0dvIFVwJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7ID8+PC9hPgo8L2Rpdj4KPGJyPjxicj4KCjw/cGhwCiRkaXJfYXJyYXkgICAgPSBhcnJheSgpOwokaWNpY2xlX2FycmF5ID0gYXJyYXkoKTsKJHRpbWVfc3RhcnQgICA9IG1pY3JvdGltZSggdHJ1ZSApOwo=
###PACKDATA,FILE_END,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
###PACKDATA,FILE_START,/controllers/pages/diagnostics.php,importbuddy/controllers/pages/diagnostics.php

###PACKDATA,FILE_END,/controllers/pages/diagnostics.php,importbuddy/controllers/pages/diagnostics.php
###PACKDATA,FILE_START,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
PD9waHAKcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzcy5pdGNyZWQucGhwJyApOwoKY2xhc3MgSVRYQVBJX0hlbHBlcjIgewoJCglwcml2YXRlIHN0YXRpYyBmdW5jdGlvbiBfcGhwYXNzX2hhc2hfcGFzc3dvcmQoICRwYXNzd29yZCApIHsKCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnUGFzc3dvcmRIYXNoJyApICkgewoJCQlyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzLXBocGFzcy5waHAnKTsKCQl9CgkJCgkJJGhhc2hlciA9IG5ldyBQYXNzd29yZEhhc2goOCwgdHJ1ZSk7CgkJJGhhc2ggPSAkaGFzaGVyLT5IYXNoUGFzc3dvcmQoJHBhc3N3b3JkKTsKCQkKCQlyZXR1cm4gJGhhc2g7CgkJCgl9CgkKCS8vIFdBUzogZ2V0X3dvcmRwcmVzc19waHBhc3MoKS4KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0X2FjY2Vzc190b2tlbigkdXNlciwgJHBhc3MsICRzaXRlLCAkd3ApIHsKCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnUGFzc3dvcmRIYXNoJyApICkgewoJCQlyZXF1aXJlX29uY2UoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL2NsYXNzLXBocGFzcy5waHAnKTsKCQl9CgkJCgkJJHNvdXJjZV9zdHJpbmcgPSAkcGFzcyAuICR1c2VyIC4gc3RyX3JlcGxhY2UoICd3d3cuJywgJycsICRzaXRlICkgLiAkd3A7CgkJJHNhbHRlZF9zdHJpbmcyID0gc3Vic3RyKCAkc291cmNlX3N0cmluZywgMCwgbWF4KCBzdHJsZW4oICRwYXNzICksIDUxMiApICk7ICAgICAvLyAgbmV3IGF1dGggd2l0aCBoYXNoZWQgcGFzc3dvcmRzCgkJCgkJcmV0dXJuIHNlbGY6Ol9waHBhc3NfaGFzaF9wYXNzd29yZCggJHNhbHRlZF9zdHJpbmcyICk7Cgl9CgkKfSAvLyBFbmQgY2xhc3Mu
###PACKDATA,FILE_END,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
###PACKDATA,FILE_START,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
PD9waHAKCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAKICAgIGNsYXNzIGlUaGVtZXNfQ3JlZGVudGlhbHMKICAgIHsKICAgIAogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJGhhc2ggICAgICAgICAgICAgPSAnc2hhMjU2JzsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJHNhbHRfcGFkZGluZyAgICAgPSAnd2RIVndVJkhjWWNXbmxsbyVrVFVVbnhwU2N5NCVJQ00yOSc7CiAgICAgICAgCiAgICAgICAgcHJvdGVjdGVkICRpdGVyYXRpb25fY291bnQgID0gMTMxMDcyOwogICAgICAgIAogICAgICAgIHByb3RlY3RlZCAka2V5X2xlbmd0aCAgICAgICA9IDY0OwogICAgICAgICAgICAgICAKICAgICAgICBwcm90ZWN0ZWQgJHBhc3N3b3JkOwogICAgICAgIAogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAKICAgICAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHVzZXJuYW1lLCAkcGFzc3dvcmQsICRvcHRpb25zID0gYXJyYXkoKSkKICAgICAgICB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAkdGhpcy0+dXNlcm5hbWUgPSAkdXNlcm5hbWU7CiAgICAgICAgICAgIAogICAgICAgICAgICAkdGhpcy0+cGFzc3dvcmQgPSAkcGFzc3dvcmQ7CiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydoYXNoJ10pKQogICAgICAgICAgICAgICAgJHRoaXMtPmhhc2ggICAgICAgICAgICAgPSBzdHJ0b2xvd2VyKHRyaW0oJG9wdGlvbnNbJ2hhc2gnXSkpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydpdGVyYXRpb25zJ10pKQogICAgICAgICAgICAgICAgJHRoaXMtPml0ZXJhdGlvbl9jb3VudCAgPSBpbnR2YWwoJG9wdGlvbnNbJ2l0ZXJhdGlvbnMnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCFlbXB0eSgkb3B0aW9uc1snc2FsdCddKSkKICAgICAgICAgICAgICAgICR0aGlzLT5zYWx0X3BhZGRpbmcgICAgID0gJG9wdGlvbnNbJ3NhbHQnXTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmKCFlbXB0eSgkb3B0aW9uc1sna2V5X2xlbmd0aCddKSkKICAgICAgICAgICAgICAgICR0aGlzLT5rZXlfbGVuZ3RoICAgICAgID0gaW50dmFsKCRvcHRpb25zWydrZXlfbGVuZ3RoJ10pOwogICAgICAgIAogICAgICAgIH0gICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgCiAgICAgICAgCiAgICAgICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfcGFzc3dvcmRfaGFzaCgkdXNlcm5hbWUsICRwYXNzd29yZCwgJG9wdGlvbnMgPSBhcnJheSgpKQogICAgICAgIHsKICAgICAgICAgICAgJGhhc2hlciA9IG5ldyBpVGhlbWVzX0NyZWRlbnRpYWxzKCR1c2VybmFtZSwgJHBhc3N3b3JkLCAkb3B0aW9ucyk7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gJGhhc2hlci0+Z2V0X3Bia2RmMigpOwogICAgICAgICAgICAKICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldF9zYWx0KCkKICAgICAgICB7CiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gc3RydG9sb3dlcih0cmltKCR0aGlzLT51c2VybmFtZSkpIC4gJHRoaXMtPnNhbHRfcGFkZGluZzsgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgfSAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgCiAgICAgICAgcHVibGljIGZ1bmN0aW9uIGdldF9wYmtkZjIoKQogICAgICAgIHsKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+cGJrZGYyKCR0aGlzLT5oYXNoLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnBhc3N3b3JkLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmdldF9zYWx0KCksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aXRlcmF0aW9uX2NvdW50LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmtleV9sZW5ndGggLyAyLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpOwogICAgICAgICAgICAKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgICAgICAgCiAgICAgICAgCiAgICAgICAgLyoKICAgICAgICAgKiBQQktERjIga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gYXMgZGVmaW5lZCBieSBSU0EncyBQS0NTICM1OiBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMjg5OC50eHQKICAgICAgICAgKiAkYWxnb3JpdGhtIC0gVGhlIGhhc2ggYWxnb3JpdGhtIHRvIHVzZS4gUmVjb21tZW5kZWQ6IFNIQTI1NgogICAgICAgICAqICRwYXNzd29yZCAtIFRoZSBwYXNzd29yZC4KICAgICAgICAgKiAkc2FsdCAtIEEgc2FsdCB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgcGFzc3dvcmQuCiAgICAgICAgICogJGNvdW50IC0gSXRlcmF0aW9uIGNvdW50LiBIaWdoZXIgaXMgYmV0dGVyLCBidXQgc2xvd2VyLiBSZWNvbW1lbmRlZDogQXQgbGVhc3QgMTAwMC4KICAgICAgICAgKiAka2V5X2xlbmd0aCAtIFRoZSBsZW5ndGggb2YgdGhlIGRlcml2ZWQga2V5IGluIGJ5dGVzLgogICAgICAgICAqICRyYXdfb3V0cHV0IC0gSWYgdHJ1ZSwgdGhlIGtleSBpcyByZXR1cm5lZCBpbiByYXcgYmluYXJ5IGZvcm1hdC4gSGV4IGVuY29kZWQgb3RoZXJ3aXNlLgogICAgICAgICAqIFJldHVybnM6IEEgJGtleV9sZW5ndGgtYnl0ZSBrZXkgZGVyaXZlZCBmcm9tIHRoZSBwYXNzd29yZCBhbmQgc2FsdC4KICAgICAgICAgKgogICAgICAgICAqIFRlc3QgdmVjdG9ycyBjYW4gYmUgZm91bmQgaGVyZTogaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzYwNzAudHh0CiAgICAgICAgICoKICAgICAgICAgKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIFBCS0RGMiB3YXMgb3JpZ2luYWxseSBjcmVhdGVkIGJ5IGh0dHBzOi8vZGVmdXNlLmNhCiAgICAgICAgICogV2l0aCBpbXByb3ZlbWVudHMgYnkgaHR0cDovL3d3dy52YXJpYXRpb25zLW9mLXNoYWRvdy5jb20KICAgICAgICAgKi8KICAgICAgICBwdWJsaWMgZnVuY3Rpb24gcGJrZGYyKCRhbGdvcml0aG0sICRwYXNzd29yZCwgJHNhbHQsICRjb3VudCwgJGtleV9sZW5ndGgsICRyYXdfb3V0cHV0ID0gZmFsc2UpCiAgICAgICAgewogICAgICAgICAgICAKICAgICAgICAgICAgJGFsZ29yaXRobSA9IHN0cnRvbG93ZXIoJGFsZ29yaXRobSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZighaW5fYXJyYXkoJGFsZ29yaXRobSwgaGFzaF9hbGdvcygpLCB0cnVlKSkKICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBoYXNoIGFsZ29yaXRobS4nLCBFX1VTRVJfRVJST1IpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYoJGNvdW50IDw9IDAgfHwgJGtleV9sZW5ndGggPD0gMCkKICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBwYXJhbWV0ZXJzLicsIEVfVVNFUl9FUlJPUik7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgICAgICRoYXNoX2xlbmd0aCA9IHN0cmxlbihoYXNoKCRhbGdvcml0aG0sICcnLCB0cnVlKSk7CiAgICAgICAgICAgICRibG9ja19jb3VudCA9IGNlaWwoJGtleV9sZW5ndGggLyAkaGFzaF9sZW5ndGgpOwogICAgICAgIAogICAgICAgICAgICAkb3V0cHV0ID0gJyc7CiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IoJGkgPSAxOyAkaSA8PSAkYmxvY2tfY291bnQ7ICRpKyspIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vICRpIGVuY29kZWQgYXMgNCBieXRlcywgYmlnIGVuZGlhbi4KICAgICAgICAgICAgICAgICRsYXN0ID0gJHNhbHQgLiBwYWNrKCJOIiwgJGkpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBmaXJzdCBpdGVyYXRpb24KICAgICAgICAgICAgICAgICRsYXN0ID0gJHhvcnN1bSA9IGhhc2hfaG1hYygkYWxnb3JpdGhtLCAkbGFzdCwgJHBhc3N3b3JkLCB0cnVlKTsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gcGVyZm9ybSB0aGUgb3RoZXIgJGNvdW50IC0gMSBpdGVyYXRpb25zCiAgICAgICAgICAgICAgICBmb3IgKCRqID0gMTsgJGogPCAkY291bnQ7ICRqKyspIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICR4b3JzdW0gXj0gKCRsYXN0ID0gaGFzaF9obWFjKCRhbGdvcml0aG0sICRsYXN0LCAkcGFzc3dvcmQsIHRydWUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgJG91dHB1dCAuPSAkeG9yc3VtOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICAKICAgICAgICAgICAgaWYoJHJhd19vdXRwdXQpCiAgICAgICAgICAgICAgICByZXR1cm4gc3Vic3RyKCRvdXRwdXQsIDAsICRrZXlfbGVuZ3RoKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmV0dXJuIGJpbjJoZXgoc3Vic3RyKCRvdXRwdXQsIDAsICRrZXlfbGVuZ3RoKSk7CiAgICAgICAgICAgICAgICAKICAgICAgICB9CgogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIH0KICAgIAogICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgCg==
###PACKDATA,FILE_END,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
###PACKDATA,FILE_START,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php

###PACKDATA,FILE_END,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
Q29weXJpZ2h0IChjKSAyMDA2LTIwMTAgUnlhbiBQYXJtYW4sIEZvbGVlbyBJbmMuLCBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgoKUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlCnBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OgoKCSogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YKCSAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLgoKCSogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3QKCSAgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMKCSAgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKCSogTmVpdGhlciB0aGUgbmFtZSBvZiBSeWFuIFBhcm1hbiwgRm9sZWVvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvCgkgIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4KCSAgcGVybWlzc2lvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MKT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkKQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUlMKQU5EIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SCkNPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IKU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkKVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IKT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRQpQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4K
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
IyBSZXF1ZXN0Q29yZQoKUmVxdWVzdENvcmUgaXMgYSBsaWdodHdlaWdodCBjVVJMLWJhc2VkIEhUVFAgcmVxdWVzdC9yZXNwb25zZSBjbGFzcyB0aGF0IGxldmVyYWdlcyBNdWx0aUN1cmwgZm9yIHBhcmFsbGVsIHJlcXVlc3RzLgoKIyMjIFBFQVIgSFRUUF9SZXF1ZXN0PwoKUmVxdWVzdENvcmUgd2FzIHdyaXR0ZW4gYXMgYSByZXBsYWNlbWVudCBmb3IgW1BFQVIgSFRUUF9SZXF1ZXN0XShodHRwOi8vcGVhci5waHAubmV0L2h0dHBfcmVxdWVzdC8pLiBXaGlsZSBQRUFSIEhUVFBfUmVxdWVzdCBpcyBmdWxsLWZlYXR1cmVkIGFuZCBoZWF2eSwgUmVxdWVzdENvcmUgZmVhdHVyZXMgb25seSB0aGUgZXNzZW50aWFscyBhbmQgaXMgdmVyeSBsaWdodHdlaWdodC4gSXQgYWxzbyBsZXZlcmFnZXMgdGhlIGJhdGNoIHJlcXVlc3Qgc3VwcG9ydCBpbiBjVVJMJ3MgYGN1cmxfbXVsdGlfZXhlYygpYCB0byBlbmFibGUgbXVsdGktdGhyZWFkZWQgcmVxdWVzdHMgdGhhdCBmaXJlIGluIHBhcmFsbGVsLgoKIyMjIFJlZmVyZW5jZSBhbmQgRG93bmxvYWQKCllvdSBjYW4gZmluZCB0aGUgY2xhc3MgcmVmZXJlbmNlIGF0IDxodHRwOi8vc2t5enl4LmdpdGh1Yi5jb20vcmVxdWVzdGNvcmUvPi4gWW91IGNhbiBnZXQgdGhlIGNvZGUgZnJvbSA8aHR0cDovL2dpdGh1Yi5jb20vc2t5enl4L3JlcXVlc3Rjb3JlPi4KCiMjIyBMaWNlbnNlIGFuZCBDb3B5cmlnaHQKClRoaXMgY29kZSBpcyBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCwgUnlhbiBQYXJtYW4uIEhvd2V2ZXIsIEknbSBsaWNlbnNpbmcgdGhpcyBjb2RlIGZvciBvdGhlcnMgdG8gdXNlIHVuZGVyIHRoZSBbU2ltcGxpZmllZCBCU0QgbGljZW5zZV0oaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9ic2QtbGljZW5zZS5waHApLgo=
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php
###PACKDATA,END
*/









